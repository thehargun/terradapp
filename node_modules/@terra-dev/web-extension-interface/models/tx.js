import { Fee, Msg, } from '@terra-money/terra.js';
export var WebExtensionTxStatus;
(function (WebExtensionTxStatus) {
    WebExtensionTxStatus["PROGRESS"] = "PROGRESS";
    WebExtensionTxStatus["SUCCEED"] = "SUCCEED";
    WebExtensionTxStatus["FAIL"] = "FAIL";
    WebExtensionTxStatus["DENIED"] = "DENIED";
})(WebExtensionTxStatus || (WebExtensionTxStatus = {}));
export function serializeTx(tx) {
    var _a, _b, _c;
    return {
        msgs: tx.msgs.map((msg) => msg.toJSON()),
        fee: (_a = tx.fee) === null || _a === void 0 ? void 0 : _a.toJSON(),
        memo: tx.memo,
        gasPrices: (_b = tx.gasPrices) === null || _b === void 0 ? void 0 : _b.toString(),
        gasAdjustment: (_c = tx.gasAdjustment) === null || _c === void 0 ? void 0 : _c.toString(),
        feeDenoms: tx.feeDenoms,
    };
}
export function deserializeTx(tx) {
    const msgs = tx.msgs.map((msg) => JSON.parse(msg));
    const isProto = '@type' in msgs[0];
    return {
        ...tx,
        msgs: msgs.map((msg) => (isProto ? Msg.fromData(msg) : Msg.fromAmino(msg))),
        fee: tx.fee
            ? isProto
                ? Fee.fromData(JSON.parse(tx.fee))
                : Fee.fromAmino(JSON.parse(tx.fee))
            : undefined,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQHRlcnJhLWRldi93ZWItZXh0ZW5zaW9uLWludGVyZmFjZS9tb2RlbHMvdHgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLEdBQUcsRUFDSCxHQUFHLEdBR0osTUFBTSx1QkFBdUIsQ0FBQztBQU8vQixNQUFNLENBQU4sSUFBWSxvQkFLWDtBQUxELFdBQVksb0JBQW9CO0lBQzlCLDZDQUFxQixDQUFBO0lBQ3JCLDJDQUFtQixDQUFBO0lBQ25CLHFDQUFhLENBQUE7SUFDYix5Q0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBTFcsb0JBQW9CLEtBQXBCLG9CQUFvQixRQUsvQjtBQXlFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEVBQW1COztJQUM3QyxPQUFPO1FBQ0wsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDeEMsR0FBRyxFQUFFLE1BQUEsRUFBRSxDQUFDLEdBQUcsMENBQUUsTUFBTSxFQUFFO1FBQ3JCLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSTtRQUNiLFNBQVMsRUFBRSxNQUFBLEVBQUUsQ0FBQyxTQUFTLDBDQUFFLFFBQVEsRUFBRTtRQUNuQyxhQUFhLEVBQUUsTUFBQSxFQUFFLENBQUMsYUFBYSwwQ0FBRSxRQUFRLEVBQUU7UUFDM0MsU0FBUyxFQUFFLEVBQUUsQ0FBQyxTQUFTO0tBQ3hCLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUE2QjtJQUN6RCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbkMsT0FBTztRQUNMLEdBQUcsRUFBRTtRQUNMLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzNFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRztZQUNULENBQUMsQ0FBQyxPQUFPO2dCQUNQLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNsQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUMsU0FBUztLQUNkLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ3JlYXRlVHhPcHRpb25zLFxuICBGZWUsXG4gIE1zZyxcbiAgUHVibGljS2V5LFxuICBUeCxcbn0gZnJvbSAnQHRlcnJhLW1vbmV5L3RlcnJhLmpzJztcbmltcG9ydCB7XG4gIFdlYkV4dGVuc2lvbkNyZWF0ZVR4RmFpbGVkLFxuICBXZWJFeHRlbnNpb25UeEZhaWxlZCxcbiAgV2ViRXh0ZW5zaW9uVHhVbnNwZWNpZmllZEVycm9yLFxufSBmcm9tICcuLi9lcnJvcnMnO1xuXG5leHBvcnQgZW51bSBXZWJFeHRlbnNpb25UeFN0YXR1cyB7XG4gIFBST0dSRVNTID0gJ1BST0dSRVNTJyxcbiAgU1VDQ0VFRCA9ICdTVUNDRUVEJyxcbiAgRkFJTCA9ICdGQUlMJyxcbiAgREVOSUVEID0gJ0RFTklFRCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2ViRXh0ZW5zaW9uVHhQcm9ncmVzcyB7XG4gIHN0YXR1czogV2ViRXh0ZW5zaW9uVHhTdGF0dXMuUFJPR1JFU1M7XG4gIHBheWxvYWQ/OiB1bmtub3duO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlYkV4dGVuc2lvblBvc3RQYXlsb2FkIHtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIHJhd19sb2c6IHN0cmluZztcbiAgdHhoYXNoOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFdlYkV4dGVuc2lvblNpZ25QYXlsb2FkID0gVHguRGF0YTtcblxuZXhwb3J0IGludGVyZmFjZSBXZWJFeHRlbnNpb25TaWduQnl0ZXNQYXlsb2FkIHtcbiAgcmVjaWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogYmFzZTY0IFVpbnQ4QXJyYXlcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgXG4gICAqIC8vIHN0cmluZ2lmaWVkIGJ5XG4gICAqIEJ1ZmZlci5mcm9tKFVpbnQ4QXJyYXkpLnRvU3RyaW5nKCdiYXNlNjQnKVxuICAgKlxuICAgKiAvLyB0byBVaW50OEFycmF5XG4gICAqIFVpbnQ4QXJyYXkuZnJvbShCdWZmZXIuZnJvbShiYXNlNjRTdHJpbmcsICdiYXNlNjQnKSlcbiAgICogYGBgXG4gICAqL1xuICBzaWduYXR1cmU6IHN0cmluZztcblxuICAvKipcbiAgICogQGV4YW1wbGVcbiAgICogYGBgXG4gICAqIFB1YmxpY0tleS5mcm9tRGF0YShwdWJsaWNfa2V5KVxuICAgKiBgYGBcbiAgICovXG4gIHB1YmxpY19rZXk/OiBQdWJsaWNLZXkuRGF0YTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXZWJFeHRlbnNpb25UeFN1Y2NlZWQ8UGF5bG9hZD4ge1xuICBzdGF0dXM6IFdlYkV4dGVuc2lvblR4U3RhdHVzLlNVQ0NFRUQ7XG4gIHBheWxvYWQ6IFBheWxvYWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2ViRXh0ZW5zaW9uVHhGYWlsIHtcbiAgc3RhdHVzOiBXZWJFeHRlbnNpb25UeFN0YXR1cy5GQUlMO1xuICBlcnJvcjpcbiAgICB8IFdlYkV4dGVuc2lvbkNyZWF0ZVR4RmFpbGVkXG4gICAgfCBXZWJFeHRlbnNpb25UeEZhaWxlZFxuICAgIHwgV2ViRXh0ZW5zaW9uVHhVbnNwZWNpZmllZEVycm9yO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlYkV4dGVuc2lvblR4RGVuaWVkIHtcbiAgc3RhdHVzOiBXZWJFeHRlbnNpb25UeFN0YXR1cy5ERU5JRUQ7XG59XG5cbmV4cG9ydCB0eXBlIFdlYkV4dGVuc2lvblR4UmVzdWx0PFBheWxvYWQ+ID1cbiAgfCBXZWJFeHRlbnNpb25UeFByb2dyZXNzXG4gIHwgV2ViRXh0ZW5zaW9uVHhTdWNjZWVkPFBheWxvYWQ+XG4gIHwgV2ViRXh0ZW5zaW9uVHhGYWlsXG4gIHwgV2ViRXh0ZW5zaW9uVHhEZW5pZWQ7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gZnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBpbnRlcmZhY2UgU2VyaWFsaXplZENyZWF0ZVR4T3B0aW9uc1xuICBleHRlbmRzIE9taXQ8Q3JlYXRlVHhPcHRpb25zLCAnbXNncycgfCAnZmVlJz4ge1xuICBtc2dzOiBzdHJpbmdbXTtcbiAgZmVlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVUeCh0eDogQ3JlYXRlVHhPcHRpb25zKTogU2VyaWFsaXplZENyZWF0ZVR4T3B0aW9ucyB7XG4gIHJldHVybiB7XG4gICAgbXNnczogdHgubXNncy5tYXAoKG1zZykgPT4gbXNnLnRvSlNPTigpKSxcbiAgICBmZWU6IHR4LmZlZT8udG9KU09OKCksXG4gICAgbWVtbzogdHgubWVtbyxcbiAgICBnYXNQcmljZXM6IHR4Lmdhc1ByaWNlcz8udG9TdHJpbmcoKSxcbiAgICBnYXNBZGp1c3RtZW50OiB0eC5nYXNBZGp1c3RtZW50Py50b1N0cmluZygpLFxuICAgIGZlZURlbm9tczogdHguZmVlRGVub21zLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemVUeCh0eDogU2VyaWFsaXplZENyZWF0ZVR4T3B0aW9ucyk6IENyZWF0ZVR4T3B0aW9ucyB7XG4gIGNvbnN0IG1zZ3MgPSB0eC5tc2dzLm1hcCgobXNnKSA9PiBKU09OLnBhcnNlKG1zZykpO1xuICBjb25zdCBpc1Byb3RvID0gJ0B0eXBlJyBpbiBtc2dzWzBdO1xuXG4gIHJldHVybiB7XG4gICAgLi4udHgsXG4gICAgbXNnczogbXNncy5tYXAoKG1zZykgPT4gKGlzUHJvdG8gPyBNc2cuZnJvbURhdGEobXNnKSA6IE1zZy5mcm9tQW1pbm8obXNnKSkpLFxuICAgIGZlZTogdHguZmVlXG4gICAgICA/IGlzUHJvdG9cbiAgICAgICAgPyBGZWUuZnJvbURhdGEoSlNPTi5wYXJzZSh0eC5mZWUpKVxuICAgICAgICA6IEZlZS5mcm9tQW1pbm8oSlNPTi5wYXJzZSh0eC5mZWUpKVxuICAgICAgOiB1bmRlZmluZWQsXG4gIH07XG59XG4iXX0=