"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeTx = exports.serializeTx = exports.WebExtensionTxStatus = void 0;
const terra_js_1 = require("@terra-money/terra.js");
var WebExtensionTxStatus;
(function (WebExtensionTxStatus) {
    WebExtensionTxStatus["PROGRESS"] = "PROGRESS";
    WebExtensionTxStatus["SUCCEED"] = "SUCCEED";
    WebExtensionTxStatus["FAIL"] = "FAIL";
    WebExtensionTxStatus["DENIED"] = "DENIED";
})(WebExtensionTxStatus = exports.WebExtensionTxStatus || (exports.WebExtensionTxStatus = {}));
function serializeTx(tx) {
    var _a, _b, _c;
    return {
        msgs: tx.msgs.map((msg) => msg.toJSON()),
        fee: (_a = tx.fee) === null || _a === void 0 ? void 0 : _a.toJSON(),
        memo: tx.memo,
        gasPrices: (_b = tx.gasPrices) === null || _b === void 0 ? void 0 : _b.toString(),
        gasAdjustment: (_c = tx.gasAdjustment) === null || _c === void 0 ? void 0 : _c.toString(),
        feeDenoms: tx.feeDenoms,
    };
}
exports.serializeTx = serializeTx;
function deserializeTx(tx) {
    const msgs = tx.msgs.map((msg) => JSON.parse(msg));
    const isProto = '@type' in msgs[0];
    return {
        ...tx,
        msgs: msgs.map((msg) => (isProto ? terra_js_1.Msg.fromData(msg) : terra_js_1.Msg.fromAmino(msg))),
        fee: tx.fee
            ? isProto
                ? terra_js_1.Fee.fromData(JSON.parse(tx.fee))
                : terra_js_1.Fee.fromAmino(JSON.parse(tx.fee))
            : undefined,
    };
}
exports.deserializeTx = deserializeTx;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQHRlcnJhLWRldi93ZWItZXh0ZW5zaW9uLWludGVyZmFjZS9tb2RlbHMvdHgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0RBTStCO0FBTy9CLElBQVksb0JBS1g7QUFMRCxXQUFZLG9CQUFvQjtJQUM5Qiw2Q0FBcUIsQ0FBQTtJQUNyQiwyQ0FBbUIsQ0FBQTtJQUNuQixxQ0FBYSxDQUFBO0lBQ2IseUNBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQUxXLG9CQUFvQixHQUFwQiw0QkFBb0IsS0FBcEIsNEJBQW9CLFFBSy9CO0FBeUVELFNBQWdCLFdBQVcsQ0FBQyxFQUFtQjs7SUFDN0MsT0FBTztRQUNMLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3hDLEdBQUcsRUFBRSxNQUFBLEVBQUUsQ0FBQyxHQUFHLDBDQUFFLE1BQU0sRUFBRTtRQUNyQixJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7UUFDYixTQUFTLEVBQUUsTUFBQSxFQUFFLENBQUMsU0FBUywwQ0FBRSxRQUFRLEVBQUU7UUFDbkMsYUFBYSxFQUFFLE1BQUEsRUFBRSxDQUFDLGFBQWEsMENBQUUsUUFBUSxFQUFFO1FBQzNDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUztLQUN4QixDQUFDO0FBQ0osQ0FBQztBQVRELGtDQVNDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLEVBQTZCO0lBQ3pELE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbkQsTUFBTSxPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVuQyxPQUFPO1FBQ0wsR0FBRyxFQUFFO1FBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxjQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDM0UsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHO1lBQ1QsQ0FBQyxDQUFDLE9BQU87Z0JBQ1AsQ0FBQyxDQUFDLGNBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2xDLENBQUMsQ0FBQyxjQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxTQUFTO0tBQ2QsQ0FBQztBQUNKLENBQUM7QUFiRCxzQ0FhQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENyZWF0ZVR4T3B0aW9ucyxcbiAgRmVlLFxuICBNc2csXG4gIFB1YmxpY0tleSxcbiAgVHgsXG59IGZyb20gJ0B0ZXJyYS1tb25leS90ZXJyYS5qcyc7XG5pbXBvcnQge1xuICBXZWJFeHRlbnNpb25DcmVhdGVUeEZhaWxlZCxcbiAgV2ViRXh0ZW5zaW9uVHhGYWlsZWQsXG4gIFdlYkV4dGVuc2lvblR4VW5zcGVjaWZpZWRFcnJvcixcbn0gZnJvbSAnLi4vZXJyb3JzJztcblxuZXhwb3J0IGVudW0gV2ViRXh0ZW5zaW9uVHhTdGF0dXMge1xuICBQUk9HUkVTUyA9ICdQUk9HUkVTUycsXG4gIFNVQ0NFRUQgPSAnU1VDQ0VFRCcsXG4gIEZBSUwgPSAnRkFJTCcsXG4gIERFTklFRCA9ICdERU5JRUQnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlYkV4dGVuc2lvblR4UHJvZ3Jlc3Mge1xuICBzdGF0dXM6IFdlYkV4dGVuc2lvblR4U3RhdHVzLlBST0dSRVNTO1xuICBwYXlsb2FkPzogdW5rbm93bjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXZWJFeHRlbnNpb25Qb3N0UGF5bG9hZCB7XG4gIGhlaWdodDogbnVtYmVyO1xuICByYXdfbG9nOiBzdHJpbmc7XG4gIHR4aGFzaDogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBXZWJFeHRlbnNpb25TaWduUGF5bG9hZCA9IFR4LkRhdGE7XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2ViRXh0ZW5zaW9uU2lnbkJ5dGVzUGF5bG9hZCB7XG4gIHJlY2lkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIGJhc2U2NCBVaW50OEFycmF5XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYFxuICAgKiAvLyBzdHJpbmdpZmllZCBieVxuICAgKiBCdWZmZXIuZnJvbShVaW50OEFycmF5KS50b1N0cmluZygnYmFzZTY0JylcbiAgICpcbiAgICogLy8gdG8gVWludDhBcnJheVxuICAgKiBVaW50OEFycmF5LmZyb20oQnVmZmVyLmZyb20oYmFzZTY0U3RyaW5nLCAnYmFzZTY0JykpXG4gICAqIGBgYFxuICAgKi9cbiAgc2lnbmF0dXJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYFxuICAgKiBQdWJsaWNLZXkuZnJvbURhdGEocHVibGljX2tleSlcbiAgICogYGBgXG4gICAqL1xuICBwdWJsaWNfa2V5PzogUHVibGljS2V5LkRhdGE7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2ViRXh0ZW5zaW9uVHhTdWNjZWVkPFBheWxvYWQ+IHtcbiAgc3RhdHVzOiBXZWJFeHRlbnNpb25UeFN0YXR1cy5TVUNDRUVEO1xuICBwYXlsb2FkOiBQYXlsb2FkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlYkV4dGVuc2lvblR4RmFpbCB7XG4gIHN0YXR1czogV2ViRXh0ZW5zaW9uVHhTdGF0dXMuRkFJTDtcbiAgZXJyb3I6XG4gICAgfCBXZWJFeHRlbnNpb25DcmVhdGVUeEZhaWxlZFxuICAgIHwgV2ViRXh0ZW5zaW9uVHhGYWlsZWRcbiAgICB8IFdlYkV4dGVuc2lvblR4VW5zcGVjaWZpZWRFcnJvcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXZWJFeHRlbnNpb25UeERlbmllZCB7XG4gIHN0YXR1czogV2ViRXh0ZW5zaW9uVHhTdGF0dXMuREVOSUVEO1xufVxuXG5leHBvcnQgdHlwZSBXZWJFeHRlbnNpb25UeFJlc3VsdDxQYXlsb2FkPiA9XG4gIHwgV2ViRXh0ZW5zaW9uVHhQcm9ncmVzc1xuICB8IFdlYkV4dGVuc2lvblR4U3VjY2VlZDxQYXlsb2FkPlxuICB8IFdlYkV4dGVuc2lvblR4RmFpbFxuICB8IFdlYkV4dGVuc2lvblR4RGVuaWVkO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgaW50ZXJmYWNlIFNlcmlhbGl6ZWRDcmVhdGVUeE9wdGlvbnNcbiAgZXh0ZW5kcyBPbWl0PENyZWF0ZVR4T3B0aW9ucywgJ21zZ3MnIHwgJ2ZlZSc+IHtcbiAgbXNnczogc3RyaW5nW107XG4gIGZlZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplVHgodHg6IENyZWF0ZVR4T3B0aW9ucyk6IFNlcmlhbGl6ZWRDcmVhdGVUeE9wdGlvbnMge1xuICByZXR1cm4ge1xuICAgIG1zZ3M6IHR4Lm1zZ3MubWFwKChtc2cpID0+IG1zZy50b0pTT04oKSksXG4gICAgZmVlOiB0eC5mZWU/LnRvSlNPTigpLFxuICAgIG1lbW86IHR4Lm1lbW8sXG4gICAgZ2FzUHJpY2VzOiB0eC5nYXNQcmljZXM/LnRvU3RyaW5nKCksXG4gICAgZ2FzQWRqdXN0bWVudDogdHguZ2FzQWRqdXN0bWVudD8udG9TdHJpbmcoKSxcbiAgICBmZWVEZW5vbXM6IHR4LmZlZURlbm9tcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlc2VyaWFsaXplVHgodHg6IFNlcmlhbGl6ZWRDcmVhdGVUeE9wdGlvbnMpOiBDcmVhdGVUeE9wdGlvbnMge1xuICBjb25zdCBtc2dzID0gdHgubXNncy5tYXAoKG1zZykgPT4gSlNPTi5wYXJzZShtc2cpKTtcbiAgY29uc3QgaXNQcm90byA9ICdAdHlwZScgaW4gbXNnc1swXTtcblxuICByZXR1cm4ge1xuICAgIC4uLnR4LFxuICAgIG1zZ3M6IG1zZ3MubWFwKChtc2cpID0+IChpc1Byb3RvID8gTXNnLmZyb21EYXRhKG1zZykgOiBNc2cuZnJvbUFtaW5vKG1zZykpKSxcbiAgICBmZWU6IHR4LmZlZVxuICAgICAgPyBpc1Byb3RvXG4gICAgICAgID8gRmVlLmZyb21EYXRhKEpTT04ucGFyc2UodHguZmVlKSlcbiAgICAgICAgOiBGZWUuZnJvbUFtaW5vKEpTT04ucGFyc2UodHguZmVlKSlcbiAgICAgIDogdW5kZWZpbmVkLFxuICB9O1xufVxuIl19