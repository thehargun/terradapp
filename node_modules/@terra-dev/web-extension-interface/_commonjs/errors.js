"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTxErrorFromJson = exports.isWebExtensionError = exports.WebExtensionLedgerError = exports.WebExtensionTxUnspecifiedError = exports.WebExtensionTxFailed = exports.WebExtensionCreateTxFailed = exports.WebExtensionUserDenied = void 0;
class WebExtensionUserDenied extends Error {
    constructor() {
        super('User Denied');
        this.toString = () => {
            return `[${this.name}]`;
        };
        this.toJSON = () => {
            return {
                name: this.name,
            };
        };
        this.name = 'WebExtensionUserDenied';
    }
}
exports.WebExtensionUserDenied = WebExtensionUserDenied;
class WebExtensionCreateTxFailed extends Error {
    constructor(message) {
        super(message);
        this.toString = () => {
            return `[${this.name} message="${this.message}"]`;
        };
        this.toJSON = () => {
            return {
                name: this.name,
                message: this.message,
            };
        };
        this.name = 'WebExtensionCreateTxFailed';
    }
}
exports.WebExtensionCreateTxFailed = WebExtensionCreateTxFailed;
class WebExtensionTxFailed extends Error {
    constructor(txhash, message, raw_message) {
        super(message);
        this.txhash = txhash;
        this.raw_message = raw_message;
        this.toString = () => {
            return `[${this.name} txhash="${this.txhash}" message="${this.message}"]\n${JSON.stringify(this.raw_message, null, 2)}`;
        };
        this.toJSON = () => {
            return {
                name: this.name,
                txhash: this.txhash,
                message: this.message,
                raw_message: this.raw_message,
            };
        };
        this.name = 'WebExtensionTxFailed';
    }
}
exports.WebExtensionTxFailed = WebExtensionTxFailed;
class WebExtensionTxUnspecifiedError extends Error {
    constructor(message) {
        super(message);
        this.toString = () => {
            return `[${this.name} message="${this.message}"]`;
        };
        this.toJSON = () => {
            return {
                name: this.name,
                message: this.message,
            };
        };
        this.name = 'WebExtensionTxUnspecifiedError';
    }
}
exports.WebExtensionTxUnspecifiedError = WebExtensionTxUnspecifiedError;
class WebExtensionLedgerError extends Error {
    constructor(code, message) {
        super(message);
        this.code = code;
        this.toString = () => {
            return `[${this.name} code="${this.code}" message="${this.message}"]`;
        };
        this.toJSON = () => {
            return {
                name: this.name,
                code: this.code,
                message: this.message,
            };
        };
        this.name = 'WebExtensionLedgerError';
    }
}
exports.WebExtensionLedgerError = WebExtensionLedgerError;
// ---------------------------------------------
// functions
// ---------------------------------------------
function isWebExtensionError(error) {
    return (error instanceof WebExtensionUserDenied ||
        error instanceof WebExtensionCreateTxFailed ||
        error instanceof WebExtensionTxFailed ||
        error instanceof WebExtensionLedgerError ||
        error instanceof WebExtensionTxUnspecifiedError);
}
exports.isWebExtensionError = isWebExtensionError;
function createTxErrorFromJson(json) {
    switch (json.name) {
        case 'WebExtensionUserDenied':
            return new WebExtensionUserDenied();
        case 'WebExtensionCreateTxFailed':
            return new WebExtensionCreateTxFailed(json.message);
        case 'WebExtensionLedgerError':
            return new WebExtensionLedgerError(json.code, json.message);
        case 'WebExtensionTxFailed':
            return new WebExtensionTxFailed(json.txhash, json.message, json.raw_message);
        default:
            return new WebExtensionTxUnspecifiedError('message' in json ? json.message : String(json));
    }
}
exports.createTxErrorFromJson = createTxErrorFromJson;
//# sourceMappingURL=data:application/json;base64,