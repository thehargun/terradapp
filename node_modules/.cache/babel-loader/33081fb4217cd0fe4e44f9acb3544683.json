{"ast":null,"code":"import Connector from '@walletconnect/core';\nimport * as cryptoLib from '@walletconnect/iso-crypto';\nimport { uuid } from '@walletconnect/utils';\nimport { BehaviorSubject } from 'rxjs';\nimport { isMobile } from '../../utils/browser-check';\nimport { WalletConnectCreateTxFailed, WalletConnectTimeout, WalletConnectTxFailed, WalletConnectTxUnspecifiedError, WalletConnectUserDenied } from './errors';\nimport SocketTransport from './impl/socket-transport';\nimport { TerraWalletconnectQrcodeModal } from './modal';\nimport { WalletConnectSessionStatus } from './types';\nconst WALLETCONNECT_STORAGE_KEY = 'walletconnect';\nexport function connectIfSessionExists() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const storedSession = localStorage.getItem(WALLETCONNECT_STORAGE_KEY);\n\n  if (typeof storedSession === 'string') {\n    return connect(options, true);\n  }\n\n  return null;\n}\nexport function connect() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let useCachedSession = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _a, _b;\n\n  let connector = null;\n  let sessionSubject = new BehaviorSubject({\n    status: WalletConnectSessionStatus.DISCONNECTED\n  });\n  const qrcodeModal = (_b = (_a = options.connectorOpts) === null || _a === void 0 ? void 0 : _a.qrcodeModal) !== null && _b !== void 0 ? _b : new TerraWalletconnectQrcodeModal();\n  const connectorOpts = {\n    bridge: 'https://walletconnect.terra.dev/',\n    qrcodeModal,\n    ...options.connectorOpts\n  };\n  const pushServerOpts = options.pushServerOpts; // ---------------------------------------------\n  // event listeners\n  // ---------------------------------------------\n\n  function initEvents() {\n    if (!connector) {\n      throw new Error(`WalletConnect is not defined!`);\n    }\n\n    connector.on('session_update', async (error, payload) => {\n      if (error) throw error;\n      sessionSubject.next({\n        status: WalletConnectSessionStatus.CONNECTED,\n        peerMeta: payload.params[0],\n        terraAddress: payload.params[0].accounts[0],\n        chainId: payload.params[0].chainId\n      });\n      console.log('WALLETCONNECT SESSION UPDATED:', payload.params[0]);\n    });\n    connector.on('connect', (error, payload) => {\n      if (error) throw error;\n      sessionSubject.next({\n        status: WalletConnectSessionStatus.CONNECTED,\n        peerMeta: payload.params[0],\n        terraAddress: payload.params[0].accounts[0],\n        chainId: payload.params[0].chainId\n      });\n    });\n    connector.on('disconnect', (error, payload) => {\n      if (error) throw error;\n      sessionSubject.next({\n        status: WalletConnectSessionStatus.DISCONNECTED\n      });\n    });\n  } // ---------------------------------------------\n  // initialize\n  // ---------------------------------------------\n\n\n  const cachedSession = localStorage.getItem('walletconnect');\n\n  if (typeof cachedSession === 'string' && useCachedSession) {\n    const cachedSessionObject = JSON.parse(cachedSession);\n    const clientId = cachedSessionObject.clientId;\n    const draftConnector = new Connector({\n      connectorOpts: { ...connectorOpts,\n        session: JSON.parse(cachedSession)\n      },\n      pushServerOpts,\n      cryptoLib,\n      transport: new SocketTransport({\n        protocol: 'wc',\n        version: 1,\n        url: connectorOpts.bridge,\n        subscriptions: [clientId]\n      })\n    });\n    draftConnector.clientId = clientId;\n    connector = draftConnector;\n    initEvents();\n    sessionSubject.next({\n      status: WalletConnectSessionStatus.CONNECTED,\n      peerMeta: draftConnector.peerMeta,\n      terraAddress: draftConnector.accounts[0],\n      chainId: draftConnector.chainId\n    });\n  } else {\n    const clientId = uuid();\n    const draftConnector = new Connector({\n      connectorOpts,\n      pushServerOpts,\n      cryptoLib,\n      transport: new SocketTransport({\n        protocol: 'wc',\n        version: 1,\n        url: connectorOpts.bridge,\n        subscriptions: [clientId]\n      })\n    });\n    draftConnector.clientId = clientId;\n    connector = draftConnector;\n\n    if (!draftConnector.connected) {\n      draftConnector.createSession().catch(console.error);\n\n      if (qrcodeModal instanceof TerraWalletconnectQrcodeModal) {\n        qrcodeModal.setCloseCallback(() => {\n          sessionSubject.next({\n            status: WalletConnectSessionStatus.DISCONNECTED\n          });\n        });\n      }\n\n      initEvents();\n      sessionSubject.next({\n        status: WalletConnectSessionStatus.REQUESTED\n      });\n    }\n  } // ---------------------------------------------\n  // methods\n  // ---------------------------------------------\n\n\n  function disconnect() {\n    if (connector && connector.connected) {\n      try {\n        connector.killSession();\n      } catch (_a) {}\n    }\n\n    sessionSubject.next({\n      status: WalletConnectSessionStatus.DISCONNECTED\n    });\n  }\n\n  function session() {\n    return sessionSubject.asObservable();\n  }\n\n  function getLatestSession() {\n    return sessionSubject.getValue();\n  }\n  /**\n   * post transaction\n   *\n   * @param tx transaction data\n   * @throws { WalletConnectUserDenied }\n   * @throws { WalletConnectCreateTxFailed }\n   * @throws { WalletConnectTxFailed }\n   * @throws { WalletConnectTimeout }\n   * @throws { WalletConnectTxUnspecifiedError }\n   */\n\n\n  function post(tx) {\n    var _a, _b, _c;\n\n    if (!connector || !connector.connected) {\n      throw new Error(`WalletConnect is not connected!`);\n    }\n\n    const id = Date.now();\n    const serializedTxOptions = {\n      msgs: tx.msgs.map(msg => msg.toJSON()),\n      fee: (_a = tx.fee) === null || _a === void 0 ? void 0 : _a.toJSON(),\n      memo: tx.memo,\n      gas: tx.gas,\n      gasPrices: (_b = tx.gasPrices) === null || _b === void 0 ? void 0 : _b.toString(),\n      gasAdjustment: (_c = tx.gasAdjustment) === null || _c === void 0 ? void 0 : _c.toString(),\n      //account_number: tx.account_number,\n      //sequence: tx.sequence,\n      feeDenoms: tx.feeDenoms,\n      timeoutHeight: tx.timeoutHeight\n    };\n\n    if (isMobile()) {\n      const payload = btoa(JSON.stringify({\n        id,\n        handshakeTopic: connector.handshakeTopic,\n        params: serializedTxOptions\n      })); // FIXME changed walletconnect confirm schema\n\n      window.location.href = `terrastation://walletconnect_confirm/?payload=${payload}`; //window.location.href = `terrastation://wallet_connect_confirm?id=${id}&handshakeTopic=${\n      //  connector.handshakeTopic\n      //}&params=${JSON.stringify([serializedTxOptions])}`;\n    }\n\n    return connector.sendCustomRequest({\n      id,\n      method: 'post',\n      params: [serializedTxOptions]\n    }).catch(error => {\n      let throwError = error;\n\n      try {\n        const {\n          code,\n          txhash,\n          message,\n          raw_message\n        } = JSON.parse(error.message);\n\n        switch (code) {\n          case 1:\n            throwError = new WalletConnectUserDenied();\n            break;\n\n          case 2:\n            throwError = new WalletConnectCreateTxFailed(message);\n            break;\n\n          case 3:\n            throwError = new WalletConnectTxFailed(txhash, message, raw_message);\n            break;\n\n          case 4:\n            throwError = new WalletConnectTimeout(message);\n            break;\n\n          case 99:\n            throwError = new WalletConnectTxUnspecifiedError(message);\n            break;\n        }\n      } catch (_a) {\n        throwError = new WalletConnectTxUnspecifiedError(error.message);\n      }\n\n      throw throwError;\n    });\n  } // ---------------------------------------------\n  // return\n  // ---------------------------------------------\n\n\n  return {\n    session,\n    getLatestSession,\n    post,\n    disconnect\n  };\n}","map":{"version":3,"sources":["../../../../../src/@terra-money/wallet-provider/modules/walletconnect/connect.ts"],"names":[],"mappings":"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","sourcesContent":["import { CreateTxOptions } from '@terra-money/terra.js';\nimport Connector from '@walletconnect/core';\nimport * as cryptoLib from '@walletconnect/iso-crypto';\nimport {\n  IPushServerOptions,\n  IWalletConnectOptions,\n} from '@walletconnect/types';\nimport { uuid } from '@walletconnect/utils';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { isMobile } from '../../utils/browser-check';\nimport {\n  WalletConnectCreateTxFailed,\n  WalletConnectTimeout,\n  WalletConnectTxFailed,\n  WalletConnectTxUnspecifiedError,\n  WalletConnectUserDenied,\n} from './errors';\nimport SocketTransport from './impl/socket-transport';\nimport { TerraWalletconnectQrcodeModal } from './modal';\nimport {\n  WalletConnectSession,\n  WalletConnectSessionStatus,\n  WalletConnectTxResult,\n} from './types';\n\nexport interface WalletConnectControllerOptions {\n  /**\n   * Configuration parameter that `new WalletConnect(connectorOpts)`\n   *\n   * @default\n   * ```js\n   * {\n   *   bridge: 'https://walletconnect.terra.dev/',\n   *   qrcodeModal: new TerraWalletconnectQrcodeModal(),\n   * }\n   * ```\n   */\n  connectorOpts?: IWalletConnectOptions;\n\n  /**\n   * Configuration parameter that `new WalletConnect(_, pushServerOpts)`\n   *\n   * @default undefined\n   */\n  pushServerOpts?: IPushServerOptions;\n}\n\nexport interface WalletConnectController {\n  session: () => Observable<WalletConnectSession>;\n  getLatestSession: () => WalletConnectSession;\n  post: (tx: CreateTxOptions) => Promise<WalletConnectTxResult>;\n  disconnect: () => void;\n}\n\nconst WALLETCONNECT_STORAGE_KEY = 'walletconnect';\n\nexport function connectIfSessionExists(\n  options: WalletConnectControllerOptions = {},\n): WalletConnectController | null {\n  const storedSession = localStorage.getItem(WALLETCONNECT_STORAGE_KEY);\n\n  if (typeof storedSession === 'string') {\n    return connect(options, true);\n  }\n\n  return null;\n}\n\nexport function connect(\n  options: WalletConnectControllerOptions = {},\n  useCachedSession: boolean = false,\n): WalletConnectController {\n  let connector: Connector | null = null;\n\n  let sessionSubject: BehaviorSubject<WalletConnectSession> =\n    new BehaviorSubject<WalletConnectSession>({\n      status: WalletConnectSessionStatus.DISCONNECTED,\n    });\n\n  const qrcodeModal =\n    options.connectorOpts?.qrcodeModal ?? new TerraWalletconnectQrcodeModal();\n\n  const connectorOpts: IWalletConnectOptions = {\n    bridge: 'https://walletconnect.terra.dev/',\n    qrcodeModal,\n    ...options.connectorOpts,\n  };\n\n  const pushServerOpts: IPushServerOptions | undefined = options.pushServerOpts;\n\n  // ---------------------------------------------\n  // event listeners\n  // ---------------------------------------------\n  function initEvents() {\n    if (!connector) {\n      throw new Error(`WalletConnect is not defined!`);\n    }\n\n    connector.on('session_update', async (error, payload) => {\n      if (error) throw error;\n\n      sessionSubject.next({\n        status: WalletConnectSessionStatus.CONNECTED,\n        peerMeta: payload.params[0],\n        terraAddress: payload.params[0].accounts[0],\n        chainId: payload.params[0].chainId,\n      });\n\n      console.log('WALLETCONNECT SESSION UPDATED:', payload.params[0]);\n    });\n\n    connector.on('connect', (error, payload) => {\n      if (error) throw error;\n\n      sessionSubject.next({\n        status: WalletConnectSessionStatus.CONNECTED,\n        peerMeta: payload.params[0],\n        terraAddress: payload.params[0].accounts[0],\n        chainId: payload.params[0].chainId,\n      });\n    });\n\n    connector.on('disconnect', (error, payload) => {\n      if (error) throw error;\n\n      sessionSubject.next({\n        status: WalletConnectSessionStatus.DISCONNECTED,\n      });\n    });\n  }\n\n  // ---------------------------------------------\n  // initialize\n  // ---------------------------------------------\n  const cachedSession = localStorage.getItem('walletconnect');\n\n  if (typeof cachedSession === 'string' && useCachedSession) {\n    const cachedSessionObject = JSON.parse(cachedSession);\n    const clientId = cachedSessionObject.clientId;\n    const draftConnector = new Connector({\n      connectorOpts: {\n        ...connectorOpts,\n        session: JSON.parse(cachedSession),\n      },\n      pushServerOpts,\n      cryptoLib,\n      transport: new SocketTransport({\n        protocol: 'wc',\n        version: 1,\n        url: connectorOpts.bridge!,\n        subscriptions: [clientId],\n      }),\n    });\n    draftConnector.clientId = clientId;\n\n    connector = draftConnector;\n\n    initEvents();\n\n    sessionSubject.next({\n      status: WalletConnectSessionStatus.CONNECTED,\n      peerMeta: draftConnector.peerMeta!,\n      terraAddress: draftConnector.accounts[0],\n      chainId: draftConnector.chainId,\n    });\n  } else {\n    const clientId = uuid();\n    const draftConnector = new Connector({\n      connectorOpts,\n      pushServerOpts,\n      cryptoLib,\n      transport: new SocketTransport({\n        protocol: 'wc',\n        version: 1,\n        url: connectorOpts.bridge!,\n        subscriptions: [clientId],\n      }),\n    });\n    draftConnector.clientId = clientId;\n\n    connector = draftConnector;\n\n    if (!draftConnector.connected) {\n      draftConnector.createSession().catch(console.error);\n\n      if (qrcodeModal instanceof TerraWalletconnectQrcodeModal) {\n        qrcodeModal.setCloseCallback(() => {\n          sessionSubject.next({\n            status: WalletConnectSessionStatus.DISCONNECTED,\n          });\n        });\n      }\n\n      initEvents();\n\n      sessionSubject.next({\n        status: WalletConnectSessionStatus.REQUESTED,\n      });\n    }\n  }\n\n  // ---------------------------------------------\n  // methods\n  // ---------------------------------------------\n  function disconnect() {\n    if (connector && connector.connected) {\n      try {\n        connector.killSession();\n      } catch {}\n    }\n\n    sessionSubject.next({\n      status: WalletConnectSessionStatus.DISCONNECTED,\n    });\n  }\n\n  function session(): Observable<WalletConnectSession> {\n    return sessionSubject.asObservable();\n  }\n\n  function getLatestSession(): WalletConnectSession {\n    return sessionSubject.getValue();\n  }\n\n  /**\n   * post transaction\n   *\n   * @param tx transaction data\n   * @throws { WalletConnectUserDenied }\n   * @throws { WalletConnectCreateTxFailed }\n   * @throws { WalletConnectTxFailed }\n   * @throws { WalletConnectTimeout }\n   * @throws { WalletConnectTxUnspecifiedError }\n   */\n  function post(tx: CreateTxOptions): Promise<WalletConnectTxResult> {\n    if (!connector || !connector.connected) {\n      throw new Error(`WalletConnect is not connected!`);\n    }\n\n    const id = Date.now();\n\n    const serializedTxOptions = {\n      msgs: tx.msgs.map((msg) => msg.toJSON()),\n      fee: tx.fee?.toJSON(),\n      memo: tx.memo,\n      gas: tx.gas,\n      gasPrices: tx.gasPrices?.toString(),\n      gasAdjustment: tx.gasAdjustment?.toString(),\n      //account_number: tx.account_number,\n      //sequence: tx.sequence,\n      feeDenoms: tx.feeDenoms,\n      timeoutHeight: tx.timeoutHeight,\n    };\n\n    if (isMobile()) {\n      const payload = btoa(\n        JSON.stringify({\n          id,\n          handshakeTopic: connector.handshakeTopic,\n          params: serializedTxOptions,\n        }),\n      );\n\n      // FIXME changed walletconnect confirm schema\n      window.location.href = `terrastation://walletconnect_confirm/?payload=${payload}`;\n      //window.location.href = `terrastation://wallet_connect_confirm?id=${id}&handshakeTopic=${\n      //  connector.handshakeTopic\n      //}&params=${JSON.stringify([serializedTxOptions])}`;\n    }\n\n    return connector\n      .sendCustomRequest({\n        id,\n        method: 'post',\n        params: [serializedTxOptions],\n      })\n      .catch((error) => {\n        let throwError = error;\n\n        try {\n          const { code, txhash, message, raw_message } = JSON.parse(\n            error.message,\n          );\n          switch (code) {\n            case 1:\n              throwError = new WalletConnectUserDenied();\n              break;\n            case 2:\n              throwError = new WalletConnectCreateTxFailed(message);\n              break;\n            case 3:\n              throwError = new WalletConnectTxFailed(\n                txhash,\n                message,\n                raw_message,\n              );\n              break;\n            case 4:\n              throwError = new WalletConnectTimeout(message);\n              break;\n            case 99:\n              throwError = new WalletConnectTxUnspecifiedError(message);\n              break;\n          }\n        } catch {\n          throwError = new WalletConnectTxUnspecifiedError(error.message);\n        }\n\n        throw throwError;\n      });\n  }\n\n  // ---------------------------------------------\n  // return\n  // ---------------------------------------------\n  return {\n    session,\n    getLatestSession,\n    post,\n    disconnect,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}