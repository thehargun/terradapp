{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Channel = void 0;\n\nvar channel_1 = require(\"@terra-money/terra.proto/ibc/core/channel/v1/channel\");\n\nvar json_1 = require(\"../../../../util/json\");\n\nvar Counterparty_1 = require(\"./Counterparty\");\n/**\n * Channel is a monotonically increasing data type\n * that can be compared against another Channel for the purposes of updating and\n * freezing clients\n *\n * Normally the RevisionChannel is incremented at each height while keeping\n * RevisionNumber the same. However some consensus algorithms may choose to\n * reset the height in certain conditions e.g. hard forks, state-machine\n * breaking changes In these cases, the RevisionNumber is incremented so that\n * height continues to be monitonically increasing even as the RevisionChannel\n * gets reset\n */\n\n\nvar Channel =\n/** @class */\nfunction (_super) {\n  __extends(Channel, _super);\n  /**\n   * @param state current state of the channel end\n   * @param ordering  whether the channel is ordered or unordered\n   * @param counterparty counterparty channel end\n   * @param connection_hops list of connection identifiers, in order, along which packets sent on this channel will travel\n   * @param version opaque channel version, which is agreed upon during the handshake\n   */\n\n\n  function Channel(state, ordering, counterparty, connection_hops, version) {\n    var _this = _super.call(this) || this;\n\n    _this.state = state;\n    _this.ordering = ordering;\n    _this.counterparty = counterparty;\n    _this.connection_hops = connection_hops;\n    _this.version = version;\n    return _this;\n  }\n\n  Channel.fromAmino = function (data) {\n    var state = data.state,\n        ordering = data.ordering,\n        counterparty = data.counterparty,\n        connection_hops = data.connection_hops,\n        version = data.version;\n    return new Channel(state, ordering, counterparty ? Counterparty_1.Counterparty.fromAmino(counterparty) : undefined, connection_hops, version);\n  };\n\n  Channel.prototype.toAmino = function () {\n    var _a = this,\n        state = _a.state,\n        ordering = _a.ordering,\n        counterparty = _a.counterparty,\n        connection_hops = _a.connection_hops,\n        version = _a.version;\n\n    var res = {\n      state: state,\n      ordering: ordering,\n      counterparty: counterparty ? counterparty.toAmino() : undefined,\n      connection_hops: connection_hops,\n      version: version\n    };\n    return res;\n  };\n\n  Channel.fromData = function (data) {\n    var state = data.state,\n        ordering = data.ordering,\n        counterparty = data.counterparty,\n        connection_hops = data.connection_hops,\n        version = data.version;\n    return new Channel(state, ordering, counterparty ? Counterparty_1.Counterparty.fromData(counterparty) : undefined, connection_hops, version);\n  };\n\n  Channel.prototype.toData = function () {\n    var _a = this,\n        state = _a.state,\n        ordering = _a.ordering,\n        counterparty = _a.counterparty,\n        connection_hops = _a.connection_hops,\n        version = _a.version;\n\n    var res = {\n      state: state,\n      ordering: ordering,\n      counterparty: counterparty ? counterparty.toData() : undefined,\n      connection_hops: connection_hops,\n      version: version\n    };\n    return res;\n  };\n\n  Channel.fromProto = function (proto) {\n    return new Channel(proto.state, proto.ordering, proto.counterparty ? Counterparty_1.Counterparty.fromProto(proto.counterparty) : undefined, proto.connectionHops, proto.version);\n  };\n\n  Channel.prototype.toProto = function () {\n    var _a = this,\n        state = _a.state,\n        ordering = _a.ordering,\n        counterparty = _a.counterparty,\n        connection_hops = _a.connection_hops,\n        version = _a.version;\n\n    return channel_1.Channel.fromPartial({\n      state: state,\n      ordering: ordering,\n      counterparty: counterparty ? counterparty.toProto() : undefined,\n      connectionHops: connection_hops,\n      version: version\n    });\n  };\n\n  return Channel;\n}(json_1.JSONSerializable);\n\nexports.Channel = Channel;","map":{"version":3,"sources":["../../../../../src/core/ibc/msgs/channel/Channel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Channel = void 0;\nvar channel_1 = require(\"@terra-money/terra.proto/ibc/core/channel/v1/channel\");\nvar json_1 = require(\"../../../../util/json\");\nvar Counterparty_1 = require(\"./Counterparty\");\n/**\n * Channel is a monotonically increasing data type\n * that can be compared against another Channel for the purposes of updating and\n * freezing clients\n *\n * Normally the RevisionChannel is incremented at each height while keeping\n * RevisionNumber the same. However some consensus algorithms may choose to\n * reset the height in certain conditions e.g. hard forks, state-machine\n * breaking changes In these cases, the RevisionNumber is incremented so that\n * height continues to be monitonically increasing even as the RevisionChannel\n * gets reset\n */\nvar Channel = /** @class */ (function (_super) {\n    __extends(Channel, _super);\n    /**\n     * @param state current state of the channel end\n     * @param ordering  whether the channel is ordered or unordered\n     * @param counterparty counterparty channel end\n     * @param connection_hops list of connection identifiers, in order, along which packets sent on this channel will travel\n     * @param version opaque channel version, which is agreed upon during the handshake\n     */\n    function Channel(state, ordering, counterparty, connection_hops, version) {\n        var _this = _super.call(this) || this;\n        _this.state = state;\n        _this.ordering = ordering;\n        _this.counterparty = counterparty;\n        _this.connection_hops = connection_hops;\n        _this.version = version;\n        return _this;\n    }\n    Channel.fromAmino = function (data) {\n        var state = data.state, ordering = data.ordering, counterparty = data.counterparty, connection_hops = data.connection_hops, version = data.version;\n        return new Channel(state, ordering, counterparty ? Counterparty_1.Counterparty.fromAmino(counterparty) : undefined, connection_hops, version);\n    };\n    Channel.prototype.toAmino = function () {\n        var _a = this, state = _a.state, ordering = _a.ordering, counterparty = _a.counterparty, connection_hops = _a.connection_hops, version = _a.version;\n        var res = {\n            state: state,\n            ordering: ordering,\n            counterparty: counterparty ? counterparty.toAmino() : undefined,\n            connection_hops: connection_hops,\n            version: version,\n        };\n        return res;\n    };\n    Channel.fromData = function (data) {\n        var state = data.state, ordering = data.ordering, counterparty = data.counterparty, connection_hops = data.connection_hops, version = data.version;\n        return new Channel(state, ordering, counterparty ? Counterparty_1.Counterparty.fromData(counterparty) : undefined, connection_hops, version);\n    };\n    Channel.prototype.toData = function () {\n        var _a = this, state = _a.state, ordering = _a.ordering, counterparty = _a.counterparty, connection_hops = _a.connection_hops, version = _a.version;\n        var res = {\n            state: state,\n            ordering: ordering,\n            counterparty: counterparty ? counterparty.toData() : undefined,\n            connection_hops: connection_hops,\n            version: version,\n        };\n        return res;\n    };\n    Channel.fromProto = function (proto) {\n        return new Channel(proto.state, proto.ordering, proto.counterparty ? Counterparty_1.Counterparty.fromProto(proto.counterparty) : undefined, proto.connectionHops, proto.version);\n    };\n    Channel.prototype.toProto = function () {\n        var _a = this, state = _a.state, ordering = _a.ordering, counterparty = _a.counterparty, connection_hops = _a.connection_hops, version = _a.version;\n        return channel_1.Channel.fromPartial({\n            state: state,\n            ordering: ordering,\n            counterparty: counterparty ? counterparty.toProto() : undefined,\n            connectionHops: connection_hops,\n            version: version,\n        });\n    };\n    return Channel;\n}(json_1.JSONSerializable));\nexports.Channel = Channel;\n//# sourceMappingURL=Channel.js.map"]},"metadata":{},"sourceType":"script"}