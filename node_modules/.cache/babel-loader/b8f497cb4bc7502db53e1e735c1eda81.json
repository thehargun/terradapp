{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hargu\\\\Desktop\\\\Luna Classic\\\\LunaClassic\\\\src\\\\components\\\\SignBytesSample.tsx\",\n    _s = $RefreshSig$();\n\nimport { SignBytesFailed, Timeout, useConnectedWallet, UserDenied, verifyBytes } from '@terra-money/wallet-provider';\nimport React, { useCallback, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TEST_BYTES = Buffer.from('hello world');\nexport function SignBytesSample() {\n  _s();\n\n  const [txResult, setTxResult] = useState(null);\n  const [txError, setTxError] = useState(null);\n  const [verifyResult, setVerifyResult] = useState(null);\n  const connectedWallet = useConnectedWallet();\n  const send = useCallback(() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    setTxResult(null);\n    setTxError(null);\n    setVerifyResult(null);\n    connectedWallet.signBytes(TEST_BYTES).then(nextSignBytesResult => {\n      setTxResult(nextSignBytesResult);\n      setTxError(null);\n      const result = verifyBytes(TEST_BYTES, nextSignBytesResult.result);\n      setVerifyResult(result ? 'Verify OK' : 'Verify failed');\n    }).catch(error => {\n      setTxResult(null);\n      setVerifyResult(null);\n\n      if (error instanceof UserDenied) {\n        setTxError('User Denied');\n      } else if (error instanceof Timeout) {\n        setTxError('Timeout');\n      } else if (error instanceof SignBytesFailed) {\n        setTxError('Sign Bytes Failed');\n      } else {\n        setTxError('Unknown Error: ' + (error instanceof Error ? error.message : String(error)));\n      }\n    });\n  }, [connectedWallet]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sign Bytes Sample\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), (connectedWallet === null || connectedWallet === void 0 ? void 0 : connectedWallet.availableSignBytes) && !txResult && !txError && !verifyResult && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => send(),\n      children: [\"Sign bytes with \", connectedWallet.walletAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this), txResult && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(txResult, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 20\n    }, this), txError && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: txError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }, this), verifyResult && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: verifyResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 24\n    }, this), (!!txResult || !!txError || !!verifyResult) && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setTxResult(null);\n        setTxError(null);\n        setVerifyResult(null);\n      },\n      children: \"Clear result\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), !connectedWallet && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 28\n    }, this), connectedWallet && !connectedWallet.availableSignBytes && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This connection does not support signBytes()\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignBytesSample, \"4y4ahY8LA0nQvaI/YcsJW5Becaw=\", false, function () {\n  return [useConnectedWallet];\n});\n\n_c = SignBytesSample;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignBytesSample\");","map":{"version":3,"sources":["C:/Users/hargu/Desktop/Luna Classic/LunaClassic/src/components/SignBytesSample.tsx"],"names":["SignBytesFailed","Timeout","useConnectedWallet","UserDenied","verifyBytes","React","useCallback","useState","TEST_BYTES","Buffer","from","SignBytesSample","txResult","setTxResult","txError","setTxError","verifyResult","setVerifyResult","connectedWallet","send","signBytes","then","nextSignBytesResult","result","catch","error","Error","message","String","availableSignBytes","walletAddress","JSON","stringify"],"mappings":"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","sourcesContent":["import {\n  SignBytesFailed,\n  SignBytesResult,\n  Timeout,\n  useConnectedWallet,\n  UserDenied,\n  verifyBytes,\n} from '@terra-money/wallet-provider';\nimport React, { useCallback, useState } from 'react';\n\nconst TEST_BYTES = Buffer.from('hello world');\n\nexport function SignBytesSample() {\n  const [txResult, setTxResult] = useState<SignBytesResult | null>(null);\n  const [txError, setTxError] = useState<string | null>(null);\n  const [verifyResult, setVerifyResult] = useState<string | null>(null);\n\n  const connectedWallet = useConnectedWallet();\n\n  const send = useCallback(() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    setTxResult(null);\n    setTxError(null);\n    setVerifyResult(null);\n\n    connectedWallet\n      .signBytes(TEST_BYTES)\n      .then((nextSignBytesResult: SignBytesResult) => {\n        setTxResult(nextSignBytesResult);\n        setTxError(null);\n\n        const result = verifyBytes(TEST_BYTES, nextSignBytesResult.result);\n        setVerifyResult(result ? 'Verify OK' : 'Verify failed');\n      })\n      .catch((error) => {\n        setTxResult(null);\n        setVerifyResult(null);\n\n        if (error instanceof UserDenied) {\n          setTxError('User Denied');\n        } else if (error instanceof Timeout) {\n          setTxError('Timeout');\n        } else if (error instanceof SignBytesFailed) {\n          setTxError('Sign Bytes Failed');\n        } else {\n          setTxError(\n            'Unknown Error: ' +\n              (error instanceof Error ? error.message : String(error)),\n          );\n        }\n      });\n  }, [connectedWallet]);\n\n  return (\n    <div>\n      <h1>Sign Bytes Sample</h1>\n\n      {connectedWallet?.availableSignBytes &&\n        !txResult &&\n        !txError &&\n        !verifyResult && (\n          <button onClick={() => send()}>\n            Sign bytes with {connectedWallet.walletAddress}\n          </button>\n        )}\n\n      {txResult && <pre>{JSON.stringify(txResult, null, 2)}</pre>}\n\n      {txError && <pre>{txError}</pre>}\n\n      {verifyResult && <pre>{verifyResult}</pre>}\n\n      {(!!txResult || !!txError || !!verifyResult) && (\n        <button\n          onClick={() => {\n            setTxResult(null);\n            setTxError(null);\n            setVerifyResult(null);\n          }}\n        >\n          Clear result\n        </button>\n      )}\n\n      {!connectedWallet && <p>Wallet not connected!</p>}\n\n      {connectedWallet && !connectedWallet.availableSignBytes && (\n        <p>This connection does not support signBytes()</p>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}