{"ast":null,"code":"import { createElement } from 'react';\n\nconst isHMR = (() => {\n  try {\n    // @ts-ignore prevent type warning\n    return process.env.NODE_ENV === 'development'; // TODO currenly CRA default babel config does not support import.meta\n    //return !!import.meta.hot || !!module.hot;\n  } catch (_a) {\n    return false;\n  }\n})();\n\nexport function fixHMR(Component) {\n  return isHMR ? props => createElement(Component, props) : Component;\n}","map":{"version":3,"sources":["../../../src/fix-hmr/index.ts"],"names":[],"mappings":"AAAA,SAAwB,aAAxB,QAA6C,OAA7C;;AAEA,MAAM,KAAK,GAAG,CAAC,MAAK;AAClB,MAAI;AACF;AACA,WAAO,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,aAAhC,CAFE,CAGF;AACA;AACD,GALD,CAKE,OAAA,EAAA,EAAM;AACN,WAAO,KAAP;AACD;AACF,CATa,GAAd;;AAWA,OAAM,SAAU,MAAV,CACJ,SADI,EAC2B;AAE/B,SAAO,KAAK,GAAI,KAAD,IAAkB,aAAa,CAAC,SAAD,EAAY,KAAZ,CAAlC,GAAuD,SAAnE;AACD","sourcesContent":["import { ComponentType, createElement } from 'react';\n\nconst isHMR = (() => {\n  try {\n    // @ts-ignore prevent type warning\n    return process.env.NODE_ENV === 'development';\n    // TODO currenly CRA default babel config does not support import.meta\n    //return !!import.meta.hot || !!module.hot;\n  } catch {\n    return false;\n  }\n})();\n\nexport function fixHMR<Props extends {}>(\n  Component: ComponentType<Props>,\n): ComponentType<Props> {\n  return isHMR ? (props: Props) => createElement(Component, props) : Component;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}