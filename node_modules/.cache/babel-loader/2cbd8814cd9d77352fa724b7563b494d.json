{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = void 0;\n\nvar BaseAccount_1 = require(\"./BaseAccount\");\n\nvar LazyGradedVestingAccount_1 = require(\"./LazyGradedVestingAccount\");\n/**\n * Stores information about an account fetched from the blockchain.\n */\n\n\nvar Account;\n\n(function (Account) {\n  function fromAmino(amino) {\n    switch (amino.type) {\n      case 'core/Account':\n        return BaseAccount_1.BaseAccount.fromAmino(amino);\n\n      case 'core/LazyGradedVestingAccount':\n        return LazyGradedVestingAccount_1.LazyGradedVestingAccount.fromAmino(amino);\n    }\n  }\n\n  Account.fromAmino = fromAmino;\n\n  function fromData(data) {\n    switch (data['@type']) {\n      case '/cosmos.auth.v1beta1.BaseAccount':\n        return BaseAccount_1.BaseAccount.fromData(data);\n\n      case '/terra.vesting.v1beta1.LazyGradedVestingAccount':\n        return LazyGradedVestingAccount_1.LazyGradedVestingAccount.fromData(data);\n    }\n  }\n\n  Account.fromData = fromData;\n\n  function fromProto(accountAny) {\n    var typeUrl = accountAny.typeUrl;\n\n    if (typeUrl === '/cosmos.auth.v1beta1.BaseAccount') {\n      return BaseAccount_1.BaseAccount.unpackAny(accountAny);\n    } else if (typeUrl === '/terra.vesting.v1beta1.LazyGradedVestingAccount') {\n      return LazyGradedVestingAccount_1.LazyGradedVestingAccount.unpackAny(accountAny);\n    }\n\n    throw new Error(\"Account type \" + typeUrl + \" not recognized\");\n  }\n\n  Account.fromProto = fromProto;\n})(Account = exports.Account || (exports.Account = {}));","map":{"version":3,"sources":["../../../src/core/auth/Account.ts"],"names":[],"mappings":";;;;;;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,0BAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;AAGA;;AAEG;;;AACH,IAAiB,OAAjB;;AAAA,CAAA,UAAiB,OAAjB,EAAwB;AAKtB,WAAgB,SAAhB,CAA0B,KAA1B,EAA8C;AAC5C,YAAQ,KAAK,CAAC,IAAd;AACE,WAAK,cAAL;AACE,eAAO,aAAA,CAAA,WAAA,CAAY,SAAZ,CAAsB,KAAtB,CAAP;;AACF,WAAK,+BAAL;AACE,eAAO,0BAAA,CAAA,wBAAA,CAAyB,SAAzB,CAAmC,KAAnC,CAAP;AAJJ;AAMD;;AAPe,EAAA,OAAA,CAAA,SAAA,GAAS,SAAT;;AAShB,WAAgB,QAAhB,CAAyB,IAAzB,EAA2C;AACzC,YAAQ,IAAI,CAAC,OAAD,CAAZ;AACE,WAAK,kCAAL;AACE,eAAO,aAAA,CAAA,WAAA,CAAY,QAAZ,CAAqB,IAArB,CAAP;;AACF,WAAK,iDAAL;AACE,eAAO,0BAAA,CAAA,wBAAA,CAAyB,QAAzB,CAAkC,IAAlC,CAAP;AAJJ;AAMD;;AAPe,EAAA,OAAA,CAAA,QAAA,GAAQ,QAAR;;AAShB,WAAgB,SAAhB,CAA0B,UAA1B,EAAmD;AACjD,QAAM,OAAO,GAAG,UAAU,CAAC,OAA3B;;AACA,QAAI,OAAO,KAAK,kCAAhB,EAAoD;AAClD,aAAO,aAAA,CAAA,WAAA,CAAY,SAAZ,CAAsB,UAAtB,CAAP;AACD,KAFD,MAEO,IAAI,OAAO,KAAK,iDAAhB,EAAmE;AACxE,aAAO,0BAAA,CAAA,wBAAA,CAAyB,SAAzB,CAAmC,UAAnC,CAAP;AACD;;AAED,UAAM,IAAI,KAAJ,CAAU,kBAAgB,OAAhB,GAAuB,iBAAjC,CAAN;AACD;;AATe,EAAA,OAAA,CAAA,SAAA,GAAS,SAAT;AAUjB,CAjCD,EAAiB,OAAO,GAAP,OAAA,CAAA,OAAA,KAAA,OAAA,CAAA,OAAA,GAAO,EAAP,CAAjB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account = void 0;\nvar BaseAccount_1 = require(\"./BaseAccount\");\nvar LazyGradedVestingAccount_1 = require(\"./LazyGradedVestingAccount\");\n/**\n * Stores information about an account fetched from the blockchain.\n */\nvar Account;\n(function (Account) {\n    function fromAmino(amino) {\n        switch (amino.type) {\n            case 'core/Account':\n                return BaseAccount_1.BaseAccount.fromAmino(amino);\n            case 'core/LazyGradedVestingAccount':\n                return LazyGradedVestingAccount_1.LazyGradedVestingAccount.fromAmino(amino);\n        }\n    }\n    Account.fromAmino = fromAmino;\n    function fromData(data) {\n        switch (data['@type']) {\n            case '/cosmos.auth.v1beta1.BaseAccount':\n                return BaseAccount_1.BaseAccount.fromData(data);\n            case '/terra.vesting.v1beta1.LazyGradedVestingAccount':\n                return LazyGradedVestingAccount_1.LazyGradedVestingAccount.fromData(data);\n        }\n    }\n    Account.fromData = fromData;\n    function fromProto(accountAny) {\n        var typeUrl = accountAny.typeUrl;\n        if (typeUrl === '/cosmos.auth.v1beta1.BaseAccount') {\n            return BaseAccount_1.BaseAccount.unpackAny(accountAny);\n        }\n        else if (typeUrl === '/terra.vesting.v1beta1.LazyGradedVestingAccount') {\n            return LazyGradedVestingAccount_1.LazyGradedVestingAccount.unpackAny(accountAny);\n        }\n        throw new Error(\"Account type \" + typeUrl + \" not recognized\");\n    }\n    Account.fromProto = fromProto;\n})(Account = exports.Account || (exports.Account = {}));\n//# sourceMappingURL=Account.js.map"]},"metadata":{},"sourceType":"script"}