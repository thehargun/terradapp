{"ast":null,"code":"import { Fee, Msg } from '@terra-money/terra.js';\nexport var WebExtensionTxStatus;\n\n(function (WebExtensionTxStatus) {\n  WebExtensionTxStatus[\"PROGRESS\"] = \"PROGRESS\";\n  WebExtensionTxStatus[\"SUCCEED\"] = \"SUCCEED\";\n  WebExtensionTxStatus[\"FAIL\"] = \"FAIL\";\n  WebExtensionTxStatus[\"DENIED\"] = \"DENIED\";\n})(WebExtensionTxStatus || (WebExtensionTxStatus = {}));\n\nexport function serializeTx(tx) {\n  var _a, _b, _c;\n\n  return {\n    msgs: tx.msgs.map(msg => msg.toJSON()),\n    fee: (_a = tx.fee) === null || _a === void 0 ? void 0 : _a.toJSON(),\n    memo: tx.memo,\n    gasPrices: (_b = tx.gasPrices) === null || _b === void 0 ? void 0 : _b.toString(),\n    gasAdjustment: (_c = tx.gasAdjustment) === null || _c === void 0 ? void 0 : _c.toString(),\n    feeDenoms: tx.feeDenoms\n  };\n}\nexport function deserializeTx(tx) {\n  const msgs = tx.msgs.map(msg => JSON.parse(msg));\n  const isProto = ('@type' in msgs[0]);\n  return { ...tx,\n    msgs: msgs.map(msg => isProto ? Msg.fromData(msg) : Msg.fromAmino(msg)),\n    fee: tx.fee ? isProto ? Fee.fromData(JSON.parse(tx.fee)) : Fee.fromAmino(JSON.parse(tx.fee)) : undefined\n  };\n}","map":{"version":3,"sources":["../../../../src/@terra-dev/web-extension-interface/models/tx.ts"],"names":[],"mappings":"AAAA,SAEE,GAFF,EAGE,GAHF,QAMO,uBANP;AAaA,OAAA,IAAY,oBAAZ;;AAAA,CAAA,UAAY,oBAAZ,EAAgC;AAC9B,EAAA,oBAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,oBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,oBAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,EAAA,oBAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACD,CALD,EAAY,oBAAoB,KAApB,oBAAoB,GAAA,EAAA,CAAhC;;AA8EA,OAAM,SAAU,WAAV,CAAsB,EAAtB,EAAyC;;;AAC7C,SAAO;AACL,IAAA,IAAI,EAAE,EAAE,CAAC,IAAH,CAAQ,GAAR,CAAa,GAAD,IAAS,GAAG,CAAC,MAAJ,EAArB,CADD;AAEL,IAAA,GAAG,EAAE,CAAA,EAAA,GAAA,EAAE,CAAC,GAAH,MAAM,IAAN,IAAM,EAAA,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAM,EAAA,CAAE,MAAF,EAFN;AAGL,IAAA,IAAI,EAAE,EAAE,CAAC,IAHJ;AAIL,IAAA,SAAS,EAAE,CAAA,EAAA,GAAA,EAAE,CAAC,SAAH,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,QAAF,EAJlB;AAKL,IAAA,aAAa,EAAE,CAAA,EAAA,GAAA,EAAE,CAAC,aAAH,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAE,QAAF,EAL1B;AAML,IAAA,SAAS,EAAE,EAAE,CAAC;AANT,GAAP;AAQD;AAED,OAAM,SAAU,aAAV,CAAwB,EAAxB,EAAqD;AACzD,QAAM,IAAI,GAAG,EAAE,CAAC,IAAH,CAAQ,GAAR,CAAa,GAAD,IAAS,IAAI,CAAC,KAAL,CAAW,GAAX,CAArB,CAAb;AACA,QAAM,OAAO,IAAG,WAAW,IAAI,CAAC,CAAD,CAAlB,CAAb;AAEA,SAAO,EACL,GAAG,EADE;AAEL,IAAA,IAAI,EAAE,IAAI,CAAC,GAAL,CAAU,GAAD,IAAU,OAAO,GAAG,GAAG,CAAC,QAAJ,CAAa,GAAb,CAAH,GAAuB,GAAG,CAAC,SAAJ,CAAc,GAAd,CAAjD,CAFD;AAGL,IAAA,GAAG,EAAE,EAAE,CAAC,GAAH,GACD,OAAO,GACL,GAAG,CAAC,QAAJ,CAAa,IAAI,CAAC,KAAL,CAAW,EAAE,CAAC,GAAd,CAAb,CADK,GAEL,GAAG,CAAC,SAAJ,CAAc,IAAI,CAAC,KAAL,CAAW,EAAE,CAAC,GAAd,CAAd,CAHD,GAID;AAPC,GAAP;AASD","sourcesContent":["import {\n  CreateTxOptions,\n  Fee,\n  Msg,\n  PublicKey,\n  Tx,\n} from '@terra-money/terra.js';\nimport {\n  WebExtensionCreateTxFailed,\n  WebExtensionTxFailed,\n  WebExtensionTxUnspecifiedError,\n} from '../errors';\n\nexport enum WebExtensionTxStatus {\n  PROGRESS = 'PROGRESS',\n  SUCCEED = 'SUCCEED',\n  FAIL = 'FAIL',\n  DENIED = 'DENIED',\n}\n\nexport interface WebExtensionTxProgress {\n  status: WebExtensionTxStatus.PROGRESS;\n  payload?: unknown;\n}\n\nexport interface WebExtensionPostPayload {\n  height: number;\n  raw_log: string;\n  txhash: string;\n}\n\nexport type WebExtensionSignPayload = Tx.Data;\n\nexport interface WebExtensionSignBytesPayload {\n  recid: number;\n\n  /**\n   * base64 Uint8Array\n   *\n   * @example\n   * ```\n   * // stringified by\n   * Buffer.from(Uint8Array).toString('base64')\n   *\n   * // to Uint8Array\n   * Uint8Array.from(Buffer.from(base64String, 'base64'))\n   * ```\n   */\n  signature: string;\n\n  /**\n   * @example\n   * ```\n   * PublicKey.fromData(public_key)\n   * ```\n   */\n  public_key?: PublicKey.Data;\n}\n\nexport interface WebExtensionTxSucceed<Payload> {\n  status: WebExtensionTxStatus.SUCCEED;\n  payload: Payload;\n}\n\nexport interface WebExtensionTxFail {\n  status: WebExtensionTxStatus.FAIL;\n  error:\n    | WebExtensionCreateTxFailed\n    | WebExtensionTxFailed\n    | WebExtensionTxUnspecifiedError;\n}\n\nexport interface WebExtensionTxDenied {\n  status: WebExtensionTxStatus.DENIED;\n}\n\nexport type WebExtensionTxResult<Payload> =\n  | WebExtensionTxProgress\n  | WebExtensionTxSucceed<Payload>\n  | WebExtensionTxFail\n  | WebExtensionTxDenied;\n\n// ---------------------------------------------\n// functions\n// ---------------------------------------------\nexport interface SerializedCreateTxOptions\n  extends Omit<CreateTxOptions, 'msgs' | 'fee'> {\n  msgs: string[];\n  fee: string | undefined;\n}\n\nexport function serializeTx(tx: CreateTxOptions): SerializedCreateTxOptions {\n  return {\n    msgs: tx.msgs.map((msg) => msg.toJSON()),\n    fee: tx.fee?.toJSON(),\n    memo: tx.memo,\n    gasPrices: tx.gasPrices?.toString(),\n    gasAdjustment: tx.gasAdjustment?.toString(),\n    feeDenoms: tx.feeDenoms,\n  };\n}\n\nexport function deserializeTx(tx: SerializedCreateTxOptions): CreateTxOptions {\n  const msgs = tx.msgs.map((msg) => JSON.parse(msg));\n  const isProto = '@type' in msgs[0];\n\n  return {\n    ...tx,\n    msgs: msgs.map((msg) => (isProto ? Msg.fromData(msg) : Msg.fromAmino(msg))),\n    fee: tx.fee\n      ? isProto\n        ? Fee.fromData(JSON.parse(tx.fee))\n        : Fee.fromAmino(JSON.parse(tx.fee))\n      : undefined,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}