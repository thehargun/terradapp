{"ast":null,"code":"/** User denied the request */\nexport class UserDenied extends Error {\n  constructor() {\n    super('User Denied');\n\n    this.toString = () => {\n      return `[${this.name}]`;\n    };\n\n    this.name = 'UserDenied';\n  }\n\n}\n/** the user did not complete the action during a specific time */\n\nexport class Timeout extends Error {\n  constructor(message) {\n    super(message);\n\n    this.toString = () => {\n      return `[${this.name} message=\"${this.message}\"]`;\n    };\n\n    this.name = 'Timeout';\n  }\n\n}\n/** failed on signBytes() */\n\nexport class SignBytesFailed extends Error {\n  constructor(bytes, message) {\n    super(message);\n    this.bytes = bytes;\n\n    this.toString = () => {\n      return `[${this.name} message=\"${this.message}\"]`;\n    };\n\n    this.name = 'SignBytesFailed';\n  }\n\n}\n/** Failed to create tx (did not make a txhash) */\n\nexport class CreateTxFailed extends Error {\n  constructor(tx, message) {\n    super(message);\n    this.tx = tx;\n\n    this.toString = () => {\n      return `[${this.name} message=\"${this.message}\"]\\n${JSON.stringify(this.tx, null, 2)}`;\n    };\n\n    this.name = 'CreateTxFailed';\n  }\n\n}\n/** Failed process the tx (maked a txhash) */\n\nexport class TxFailed extends Error {\n  constructor(tx, txhash, message, raw_message) {\n    super(message);\n    this.tx = tx;\n    this.txhash = txhash;\n    this.raw_message = raw_message;\n\n    this.toString = () => {\n      return `[${this.name} txhash=\"${this.txhash}\" message=\"${this.message}\"]\\n${JSON.stringify(this.tx, null, 2)}\\n${JSON.stringify(this.raw_message, null, 2)}`;\n    };\n\n    this.name = 'TxFailed';\n  }\n\n}\n/** Unknown error */\n\nexport class TxUnspecifiedError extends Error {\n  constructor(tx, message) {\n    super(message);\n    this.tx = tx;\n\n    this.toString = () => {\n      return `[${this.name} message=\"${this.message}\"]\\n${JSON.stringify(this.tx, null, 2)}`;\n    };\n\n    this.name = 'TxUnspecifiedError';\n  }\n\n}","map":{"version":3,"sources":["../../../src/@terra-money/use-wallet/errors.ts"],"names":[],"mappings":"AAGA;AACA,OAAM,MAAO,UAAP,SAA0B,KAA1B,CAA+B;AACnC,EAAA,WAAA,GAAA;AACE,UAAM,aAAN;;AAIF,SAAA,QAAA,GAAW,MAAK;AACd,aAAO,IAAI,KAAK,IAAI,GAApB;AACD,KAFD;;AAHE,SAAK,IAAL,GAAY,YAAZ;AACD;;AAJkC;AAWrC;;AACA,OAAM,MAAO,OAAP,SAAuB,KAAvB,CAA4B;AAChC,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;;AAIF,SAAA,QAAA,GAAW,MAAK;AACd,aAAO,IAAI,KAAK,IAAI,aAAa,KAAK,OAAO,IAA7C;AACD,KAFD;;AAHE,SAAK,IAAL,GAAY,SAAZ;AACD;;AAJ+B;AAWlC;;AACA,OAAM,MAAO,eAAP,SAA+B,KAA/B,CAAoC;AACxC,EAAA,WAAA,CAA4B,KAA5B,EAA2C,OAA3C,EAA0D;AACxD,UAAM,OAAN;AAD0B,SAAA,KAAA,GAAA,KAAA;;AAK5B,SAAA,QAAA,GAAW,MAAK;AACd,aAAO,IAAI,KAAK,IAAI,aAAa,KAAK,OAAO,IAA7C;AACD,KAFD;;AAHE,SAAK,IAAL,GAAY,iBAAZ;AACD;;AAJuC;AAW1C;;AACA,OAAM,MAAO,cAAP,SAA8B,KAA9B,CAAmC;AACvC,EAAA,WAAA,CAA4B,EAA5B,EAAiD,OAAjD,EAAgE;AAC9D,UAAM,OAAN;AAD0B,SAAA,EAAA,GAAA,EAAA;;AAK5B,SAAA,QAAA,GAAW,MAAK;AACd,aAAO,IAAI,KAAK,IAAI,aAAa,KAAK,OAAO,OAAO,IAAI,CAAC,SAAL,CAClD,KAAK,EAD6C,EAElD,IAFkD,EAGlD,CAHkD,CAInD,EAJD;AAKD,KAND;;AAHE,SAAK,IAAL,GAAY,gBAAZ;AACD;;AAJsC;AAezC;;AACA,OAAM,MAAO,QAAP,SAAwB,KAAxB,CAA6B;AACjC,EAAA,WAAA,CACkB,EADlB,EAEkB,MAFlB,EAGE,OAHF,EAIkB,WAJlB,EAIkC;AAEhC,UAAM,OAAN;AALgB,SAAA,EAAA,GAAA,EAAA;AACA,SAAA,MAAA,GAAA,MAAA;AAEA,SAAA,WAAA,GAAA,WAAA;;AAMlB,SAAA,QAAA,GAAW,MAAK;AACd,aAAO,IAAI,KAAK,IAAI,YAAY,KAAK,MAAM,cACzC,KAAK,OACP,OAAO,IAAI,CAAC,SAAL,CAAe,KAAK,EAApB,EAAwB,IAAxB,EAA8B,CAA9B,CAAgC,KAAK,IAAI,CAAC,SAAL,CAC1C,KAAK,WADqC,EAE1C,IAF0C,EAG1C,CAH0C,CAI3C,EAND;AAOD,KARD;;AAHE,SAAK,IAAL,GAAY,UAAZ;AACD;;AATgC;AAsBnC;;AACA,OAAM,MAAO,kBAAP,SAAkC,KAAlC,CAAuC;AAC3C,EAAA,WAAA,CAA4B,EAA5B,EAAiD,OAAjD,EAAgE;AAC9D,UAAM,OAAN;AAD0B,SAAA,EAAA,GAAA,EAAA;;AAK5B,SAAA,QAAA,GAAW,MAAK;AACd,aAAO,IAAI,KAAK,IAAI,aAAa,KAAK,OAAO,OAAO,IAAI,CAAC,SAAL,CAClD,KAAK,EAD6C,EAElD,IAFkD,EAGlD,CAHkD,CAInD,EAJD;AAKD,KAND;;AAHE,SAAK,IAAL,GAAY,oBAAZ;AACD;;AAJ0C","sourcesContent":["import { CreateTxOptions } from '@terra-money/terra.js';\nimport * as Buffer from 'buffer';\n\n/** User denied the request */\nexport class UserDenied extends Error {\n  constructor() {\n    super('User Denied');\n    this.name = 'UserDenied';\n  }\n\n  toString = () => {\n    return `[${this.name}]`;\n  };\n}\n\n/** the user did not complete the action during a specific time */\nexport class Timeout extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'Timeout';\n  }\n\n  toString = () => {\n    return `[${this.name} message=\"${this.message}\"]`;\n  };\n}\n\n/** failed on signBytes() */\nexport class SignBytesFailed extends Error {\n  constructor(public readonly bytes: Buffer, message: string) {\n    super(message);\n    this.name = 'SignBytesFailed';\n  }\n\n  toString = () => {\n    return `[${this.name} message=\"${this.message}\"]`;\n  };\n}\n\n/** Failed to create tx (did not make a txhash) */\nexport class CreateTxFailed extends Error {\n  constructor(public readonly tx: CreateTxOptions, message: string) {\n    super(message);\n    this.name = 'CreateTxFailed';\n  }\n\n  toString = () => {\n    return `[${this.name} message=\"${this.message}\"]\\n${JSON.stringify(\n      this.tx,\n      null,\n      2,\n    )}`;\n  };\n}\n\n/** Failed process the tx (maked a txhash) */\nexport class TxFailed extends Error {\n  constructor(\n    public readonly tx: CreateTxOptions,\n    public readonly txhash: string | undefined,\n    message: string,\n    public readonly raw_message: any,\n  ) {\n    super(message);\n    this.name = 'TxFailed';\n  }\n\n  toString = () => {\n    return `[${this.name} txhash=\"${this.txhash}\" message=\"${\n      this.message\n    }\"]\\n${JSON.stringify(this.tx, null, 2)}\\n${JSON.stringify(\n      this.raw_message,\n      null,\n      2,\n    )}`;\n  };\n}\n\n/** Unknown error */\nexport class TxUnspecifiedError extends Error {\n  constructor(public readonly tx: CreateTxOptions, message: string) {\n    super(message);\n    this.name = 'TxUnspecifiedError';\n  }\n\n  toString = () => {\n    return `[${this.name} message=\"${this.message}\"]\\n${JSON.stringify(\n      this.tx,\n      null,\n      2,\n    )}`;\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}