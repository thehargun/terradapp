{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hargu\\\\Desktop\\\\Luna Classic\\\\LunaClassic\\\\src\\\\components\\\\NetworkSample.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useWallet, WalletStatus } from '@terra-money/use-wallet';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function NetworkSample() {\n  _s();\n\n  const {\n    status,\n    supportFeatures\n  } = useWallet();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Network Sample\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), supportFeatures.has('network') ? /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this) : status === WalletStatus.WALLET_CONNECTED ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This connection does not support Network commands\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NetworkSample, \"Dy1llrVdEU9a4FO8SQihfgCcZwk=\", false, function () {\n  return [useWallet];\n});\n\n_c = NetworkSample;\nconst TEST_NETWORK = {\n  name: 'test-network',\n  chainID: 'bombay-12',\n  lcd: 'https://lcd.terra.dev'\n};\n\nfunction Component() {\n  _s2();\n\n  const {\n    hasNetwork,\n    addNetwork\n  } = useWallet();\n  const [networkExists, setNetworkExists] = useState(null);\n  const availableAdd = useMemo(() => {\n    return networkExists === 'not exists';\n  }, [networkExists]);\n  useEffect(() => {\n    hasNetwork(TEST_NETWORK).then(result => setNetworkExists(result ? 'exists' : 'not exists'));\n  }, [hasNetwork]);\n  const add = useCallback(() => {\n    addNetwork(TEST_NETWORK).then(result => setNetworkExists(result ? 'exists' : 'not exists'));\n  }, [addNetwork]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n      children: [\"Network exists: \", networkExists]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), availableAdd && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: add,\n      children: \"Add network\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Component, \"rWELecK4N9TG3Hadu9aJdxRF0no=\", false, function () {\n  return [useWallet];\n});\n\n_c2 = Component;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NetworkSample\");\n$RefreshReg$(_c2, \"Component\");","map":{"version":3,"sources":["C:/Users/hargu/Desktop/Luna Classic/LunaClassic/src/components/NetworkSample.tsx"],"names":["useWallet","WalletStatus","useCallback","useEffect","useMemo","useState","NetworkSample","status","supportFeatures","has","WALLET_CONNECTED","TEST_NETWORK","name","chainID","lcd","Component","hasNetwork","addNetwork","networkExists","setNetworkExists","availableAdd","then","result","add"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,YAApB,QAAwC,yBAAxC;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,QAA1C,QAA0D,OAA1D;;AAEA,OAAO,SAASC,aAAT,GAAyB;AAAA;;AAC9B,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA8BR,SAAS,EAA7C;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGQ,eAAe,CAACC,GAAhB,CAAoB,SAApB,iBACC,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YADD,GAEGF,MAAM,KAAKN,YAAY,CAACS,gBAAxB,gBACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADE,gBAGF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAfeJ,a;UACsBN,S;;;KADtBM,a;AAiBhB,MAAMK,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,cADa;AAEnBC,EAAAA,OAAO,EAAE,WAFU;AAGnBC,EAAAA,GAAG,EAAE;AAHc,CAArB;;AAMA,SAASC,SAAT,GAAqB;AAAA;;AACnB,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA6BjB,SAAS,EAA5C;AAEA,QAAM,CAACkB,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAEhD,IAFgD,CAAlD;AAIA,QAAMe,YAAY,GAAGhB,OAAO,CAAC,MAAM;AACjC,WAAOc,aAAa,KAAK,YAAzB;AACD,GAF2B,EAEzB,CAACA,aAAD,CAFyB,CAA5B;AAIAf,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,UAAU,CAACL,YAAD,CAAV,CAAyBU,IAAzB,CAA+BC,MAAD,IAC5BH,gBAAgB,CAACG,MAAM,GAAG,QAAH,GAAc,YAArB,CADlB;AAGD,GAJQ,EAIN,CAACN,UAAD,CAJM,CAAT;AAMA,QAAMO,GAAG,GAAGrB,WAAW,CAAC,MAAM;AAC5Be,IAAAA,UAAU,CAACN,YAAD,CAAV,CAAyBU,IAAzB,CAA+BC,MAAD,IAC5BH,gBAAgB,CAACG,MAAM,GAAG,QAAH,GAAc,YAArB,CADlB;AAGD,GAJsB,EAIpB,CAACL,UAAD,CAJoB,CAAvB;AAMA,sBACE;AAAA,4BACE;AAAA,qCAAsBC,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGE,YAAY,iBAAI;AAAQ,MAAA,OAAO,EAAEG,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;IA7BQR,S;UAC4Bf,S;;;MAD5Be,S","sourcesContent":["import { useWallet, WalletStatus } from '@terra-money/use-wallet';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nexport function NetworkSample() {\n  const { status, supportFeatures } = useWallet();\n\n  return (\n    <div>\n      <h1>Network Sample</h1>\n      {supportFeatures.has('network') ? (\n        <Component />\n      ) : status === WalletStatus.WALLET_CONNECTED ? (\n        <p>This connection does not support Network commands</p>\n      ) : (\n        <p>Wallet not connected!</p>\n      )}\n    </div>\n  );\n}\n\nconst TEST_NETWORK = {\n  name: 'test-network',\n  chainID: 'bombay-12',\n  lcd: 'https://lcd.terra.dev',\n};\n\nfunction Component() {\n  const { hasNetwork, addNetwork } = useWallet();\n\n  const [networkExists, setNetworkExists] = useState<\n    'exists' | 'not exists' | null\n  >(null);\n\n  const availableAdd = useMemo(() => {\n    return networkExists === 'not exists';\n  }, [networkExists]);\n\n  useEffect(() => {\n    hasNetwork(TEST_NETWORK).then((result) =>\n      setNetworkExists(result ? 'exists' : 'not exists'),\n    );\n  }, [hasNetwork]);\n\n  const add = useCallback(() => {\n    addNetwork(TEST_NETWORK).then((result) =>\n      setNetworkExists(result ? 'exists' : 'not exists'),\n    );\n  }, [addNetwork]);\n\n  return (\n    <div>\n      <pre>Network exists: {networkExists}</pre>\n      {availableAdd && <button onClick={add}>Add network</button>}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}