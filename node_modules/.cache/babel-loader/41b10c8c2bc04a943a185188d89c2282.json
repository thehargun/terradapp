{"ast":null,"code":"import { AccAddress } from '@terra-money/terra.js';\nimport { useMemo } from 'react';\nimport { WalletStatus } from './types';\nimport { useWallet } from './useWallet';\nexport function useConnectedWallet() {\n  const {\n    status,\n    network,\n    wallets,\n    post,\n    sign,\n    signBytes,\n    supportFeatures\n  } = useWallet();\n  const value = useMemo(() => {\n    try {\n      if (status === WalletStatus.WALLET_CONNECTED && wallets.length > 0 && AccAddress.validate(wallets[0].terraAddress)) {\n        const {\n          terraAddress,\n          connectType,\n          design\n        } = wallets[0];\n        return {\n          network,\n          terraAddress: terraAddress,\n          walletAddress: terraAddress,\n          design,\n          post: tx => {\n            return post(tx, terraAddress);\n          },\n          sign: tx => {\n            return sign(tx, terraAddress);\n          },\n          signBytes: bytes => {\n            return signBytes(bytes, terraAddress);\n          },\n          availablePost: supportFeatures.has('post'),\n          availableSign: supportFeatures.has('sign'),\n          availableSignBytes: supportFeatures.has('sign-bytes'),\n          connectType\n        };\n      } else {\n        return undefined;\n      }\n    } catch (_a) {\n      return undefined;\n    }\n  }, [network, post, sign, signBytes, status, supportFeatures, wallets]);\n  return value;\n}","map":{"version":3,"sources":["../../../src/@terra-money/use-wallet/useConnectedWallet.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA4C,uBAA5C;AACA,SAAS,OAAT,QAAwB,OAAxB;AACA,SAME,YANF,QAOO,SAPP;AAQA,SAAS,SAAT,QAA0B,aAA1B;AAmBA,OAAM,SAAU,kBAAV,GAA4B;AAChC,QAAM;AAAE,IAAA,MAAF;AAAU,IAAA,OAAV;AAAmB,IAAA,OAAnB;AAA4B,IAAA,IAA5B;AAAkC,IAAA,IAAlC;AAAwC,IAAA,SAAxC;AAAmD,IAAA;AAAnD,MACJ,SAAS,EADX;AAGA,QAAM,KAAK,GAAG,OAAO,CAA8B,MAAK;AACtD,QAAI;AACF,UACE,MAAM,KAAK,YAAY,CAAC,gBAAxB,IACA,OAAO,CAAC,MAAR,GAAiB,CADjB,IAEA,UAAU,CAAC,QAAX,CAAoB,OAAO,CAAC,CAAD,CAAP,CAAW,YAA/B,CAHF,EAIE;AACA,cAAM;AAAE,UAAA,YAAF;AAAgB,UAAA,WAAhB;AAA6B,UAAA;AAA7B,YAAwC,OAAO,CAAC,CAAD,CAArD;AAEA,eAAO;AACL,UAAA,OADK;AAEL,UAAA,YAAY,EAAE,YAFT;AAGL,UAAA,aAAa,EAAE,YAHV;AAIL,UAAA,MAJK;AAKL,UAAA,IAAI,EAAG,EAAD,IAAwB;AAC5B,mBAAO,IAAI,CAAC,EAAD,EAAK,YAAL,CAAX;AACD,WAPI;AAQL,UAAA,IAAI,EAAG,EAAD,IAAwB;AAC5B,mBAAO,IAAI,CAAC,EAAD,EAAK,YAAL,CAAX;AACD,WAVI;AAWL,UAAA,SAAS,EAAG,KAAD,IAAkB;AAC3B,mBAAO,SAAS,CAAC,KAAD,EAAQ,YAAR,CAAhB;AACD,WAbI;AAcL,UAAA,aAAa,EAAE,eAAe,CAAC,GAAhB,CAAoB,MAApB,CAdV;AAeL,UAAA,aAAa,EAAE,eAAe,CAAC,GAAhB,CAAoB,MAApB,CAfV;AAgBL,UAAA,kBAAkB,EAAE,eAAe,CAAC,GAAhB,CAAoB,YAApB,CAhBf;AAiBL,UAAA;AAjBK,SAAP;AAmBD,OA1BD,MA0BO;AACL,eAAO,SAAP;AACD;AACF,KA9BD,CA8BE,OAAA,EAAA,EAAM;AACN,aAAO,SAAP;AACD;AACF,GAlCoB,EAkClB,CAAC,OAAD,EAAU,IAAV,EAAgB,IAAhB,EAAsB,SAAtB,EAAiC,MAAjC,EAAyC,eAAzC,EAA0D,OAA1D,CAlCkB,CAArB;AAoCA,SAAO,KAAP;AACD","sourcesContent":["import { AccAddress, CreateTxOptions } from '@terra-money/terra.js';\nimport { useMemo } from 'react';\nimport {\n  ConnectType,\n  NetworkInfo,\n  SignBytesResult,\n  SignResult,\n  TxResult,\n  WalletStatus,\n} from './types';\nimport { useWallet } from './useWallet';\n\ntype HumanAddr = string & { __type: 'HumanAddr' };\n\nexport interface ConnectedWallet {\n  network: NetworkInfo;\n  walletAddress: HumanAddr;\n  /** terraAddress is same as walletAddress */\n  terraAddress: HumanAddr;\n  design?: string;\n  post: (tx: CreateTxOptions) => Promise<TxResult>;\n  sign: (tx: CreateTxOptions) => Promise<SignResult>;\n  signBytes: (bytes: Buffer) => Promise<SignBytesResult>;\n  availablePost: boolean;\n  availableSign: boolean;\n  availableSignBytes: boolean;\n  connectType: ConnectType;\n}\n\nexport function useConnectedWallet(): ConnectedWallet | undefined {\n  const { status, network, wallets, post, sign, signBytes, supportFeatures } =\n    useWallet();\n\n  const value = useMemo<ConnectedWallet | undefined>(() => {\n    try {\n      if (\n        status === WalletStatus.WALLET_CONNECTED &&\n        wallets.length > 0 &&\n        AccAddress.validate(wallets[0].terraAddress)\n      ) {\n        const { terraAddress, connectType, design } = wallets[0];\n\n        return {\n          network,\n          terraAddress: terraAddress as HumanAddr,\n          walletAddress: terraAddress as HumanAddr,\n          design,\n          post: (tx: CreateTxOptions) => {\n            return post(tx, terraAddress);\n          },\n          sign: (tx: CreateTxOptions) => {\n            return sign(tx, terraAddress);\n          },\n          signBytes: (bytes: Buffer) => {\n            return signBytes(bytes, terraAddress);\n          },\n          availablePost: supportFeatures.has('post'),\n          availableSign: supportFeatures.has('sign'),\n          availableSignBytes: supportFeatures.has('sign-bytes'),\n          connectType,\n        };\n      } else {\n        return undefined;\n      }\n    } catch {\n      return undefined;\n    }\n  }, [network, post, sign, signBytes, status, supportFeatures, wallets]);\n\n  return value;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}