{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ABCIApplicationClientImpl = exports.Snapshot = exports.Evidence = exports.VoteInfo = exports.ValidatorUpdate = exports.Validator = exports.TxResult = exports.EventAttribute = exports.Event = exports.LastCommitInfo = exports.BlockParams = exports.ConsensusParams = exports.ResponseApplySnapshotChunk = exports.ResponseLoadSnapshotChunk = exports.ResponseOfferSnapshot = exports.ResponseListSnapshots = exports.ResponseCommit = exports.ResponseEndBlock = exports.ResponseDeliverTx = exports.ResponseCheckTx = exports.ResponseBeginBlock = exports.ResponseQuery = exports.ResponseInitChain = exports.ResponseSetOption = exports.ResponseInfo = exports.ResponseFlush = exports.ResponseEcho = exports.ResponseException = exports.Response = exports.RequestApplySnapshotChunk = exports.RequestLoadSnapshotChunk = exports.RequestOfferSnapshot = exports.RequestListSnapshots = exports.RequestCommit = exports.RequestEndBlock = exports.RequestDeliverTx = exports.RequestCheckTx = exports.RequestBeginBlock = exports.RequestQuery = exports.RequestInitChain = exports.RequestSetOption = exports.RequestInfo = exports.RequestFlush = exports.RequestEcho = exports.Request = exports.responseApplySnapshotChunk_ResultToJSON = exports.responseApplySnapshotChunk_ResultFromJSON = exports.ResponseApplySnapshotChunk_Result = exports.responseOfferSnapshot_ResultToJSON = exports.responseOfferSnapshot_ResultFromJSON = exports.ResponseOfferSnapshot_Result = exports.evidenceTypeToJSON = exports.evidenceTypeFromJSON = exports.EvidenceType = exports.checkTxTypeToJSON = exports.checkTxTypeFromJSON = exports.CheckTxType = exports.protobufPackage = void 0;\n/* eslint-disable */\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\n\nconst types_1 = require(\"../../tendermint/types/types\");\n\nconst proof_1 = require(\"../../tendermint/crypto/proof\");\n\nconst params_1 = require(\"../../tendermint/types/params\");\n\nconst keys_1 = require(\"../../tendermint/crypto/keys\");\n\nconst timestamp_1 = require(\"../../google/protobuf/timestamp\");\n\nexports.protobufPackage = \"tendermint.abci\";\nvar CheckTxType;\n\n(function (CheckTxType) {\n  CheckTxType[CheckTxType[\"NEW\"] = 0] = \"NEW\";\n  CheckTxType[CheckTxType[\"RECHECK\"] = 1] = \"RECHECK\";\n  CheckTxType[CheckTxType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(CheckTxType = exports.CheckTxType || (exports.CheckTxType = {}));\n\nfunction checkTxTypeFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"NEW\":\n      return CheckTxType.NEW;\n\n    case 1:\n    case \"RECHECK\":\n      return CheckTxType.RECHECK;\n\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return CheckTxType.UNRECOGNIZED;\n  }\n}\n\nexports.checkTxTypeFromJSON = checkTxTypeFromJSON;\n\nfunction checkTxTypeToJSON(object) {\n  switch (object) {\n    case CheckTxType.NEW:\n      return \"NEW\";\n\n    case CheckTxType.RECHECK:\n      return \"RECHECK\";\n\n    default:\n      return \"UNKNOWN\";\n  }\n}\n\nexports.checkTxTypeToJSON = checkTxTypeToJSON;\nvar EvidenceType;\n\n(function (EvidenceType) {\n  EvidenceType[EvidenceType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  EvidenceType[EvidenceType[\"DUPLICATE_VOTE\"] = 1] = \"DUPLICATE_VOTE\";\n  EvidenceType[EvidenceType[\"LIGHT_CLIENT_ATTACK\"] = 2] = \"LIGHT_CLIENT_ATTACK\";\n  EvidenceType[EvidenceType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EvidenceType = exports.EvidenceType || (exports.EvidenceType = {}));\n\nfunction evidenceTypeFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"UNKNOWN\":\n      return EvidenceType.UNKNOWN;\n\n    case 1:\n    case \"DUPLICATE_VOTE\":\n      return EvidenceType.DUPLICATE_VOTE;\n\n    case 2:\n    case \"LIGHT_CLIENT_ATTACK\":\n      return EvidenceType.LIGHT_CLIENT_ATTACK;\n\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return EvidenceType.UNRECOGNIZED;\n  }\n}\n\nexports.evidenceTypeFromJSON = evidenceTypeFromJSON;\n\nfunction evidenceTypeToJSON(object) {\n  switch (object) {\n    case EvidenceType.UNKNOWN:\n      return \"UNKNOWN\";\n\n    case EvidenceType.DUPLICATE_VOTE:\n      return \"DUPLICATE_VOTE\";\n\n    case EvidenceType.LIGHT_CLIENT_ATTACK:\n      return \"LIGHT_CLIENT_ATTACK\";\n\n    default:\n      return \"UNKNOWN\";\n  }\n}\n\nexports.evidenceTypeToJSON = evidenceTypeToJSON;\nvar ResponseOfferSnapshot_Result;\n\n(function (ResponseOfferSnapshot_Result) {\n  /** UNKNOWN - Unknown result, abort all snapshot restoration */\n  ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  /** ACCEPT - Snapshot accepted, apply chunks */\n\n  ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"ACCEPT\"] = 1] = \"ACCEPT\";\n  /** ABORT - Abort all snapshot restoration */\n\n  ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"ABORT\"] = 2] = \"ABORT\";\n  /** REJECT - Reject this specific snapshot, try others */\n\n  ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"REJECT\"] = 3] = \"REJECT\";\n  /** REJECT_FORMAT - Reject all snapshots of this format, try others */\n\n  ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"REJECT_FORMAT\"] = 4] = \"REJECT_FORMAT\";\n  /** REJECT_SENDER - Reject all snapshots from the sender(s), try others */\n\n  ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"REJECT_SENDER\"] = 5] = \"REJECT_SENDER\";\n  ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ResponseOfferSnapshot_Result = exports.ResponseOfferSnapshot_Result || (exports.ResponseOfferSnapshot_Result = {}));\n\nfunction responseOfferSnapshot_ResultFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"UNKNOWN\":\n      return ResponseOfferSnapshot_Result.UNKNOWN;\n\n    case 1:\n    case \"ACCEPT\":\n      return ResponseOfferSnapshot_Result.ACCEPT;\n\n    case 2:\n    case \"ABORT\":\n      return ResponseOfferSnapshot_Result.ABORT;\n\n    case 3:\n    case \"REJECT\":\n      return ResponseOfferSnapshot_Result.REJECT;\n\n    case 4:\n    case \"REJECT_FORMAT\":\n      return ResponseOfferSnapshot_Result.REJECT_FORMAT;\n\n    case 5:\n    case \"REJECT_SENDER\":\n      return ResponseOfferSnapshot_Result.REJECT_SENDER;\n\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return ResponseOfferSnapshot_Result.UNRECOGNIZED;\n  }\n}\n\nexports.responseOfferSnapshot_ResultFromJSON = responseOfferSnapshot_ResultFromJSON;\n\nfunction responseOfferSnapshot_ResultToJSON(object) {\n  switch (object) {\n    case ResponseOfferSnapshot_Result.UNKNOWN:\n      return \"UNKNOWN\";\n\n    case ResponseOfferSnapshot_Result.ACCEPT:\n      return \"ACCEPT\";\n\n    case ResponseOfferSnapshot_Result.ABORT:\n      return \"ABORT\";\n\n    case ResponseOfferSnapshot_Result.REJECT:\n      return \"REJECT\";\n\n    case ResponseOfferSnapshot_Result.REJECT_FORMAT:\n      return \"REJECT_FORMAT\";\n\n    case ResponseOfferSnapshot_Result.REJECT_SENDER:\n      return \"REJECT_SENDER\";\n\n    default:\n      return \"UNKNOWN\";\n  }\n}\n\nexports.responseOfferSnapshot_ResultToJSON = responseOfferSnapshot_ResultToJSON;\nvar ResponseApplySnapshotChunk_Result;\n\n(function (ResponseApplySnapshotChunk_Result) {\n  /** UNKNOWN - Unknown result, abort all snapshot restoration */\n  ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  /** ACCEPT - Chunk successfully accepted */\n\n  ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"ACCEPT\"] = 1] = \"ACCEPT\";\n  /** ABORT - Abort all snapshot restoration */\n\n  ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"ABORT\"] = 2] = \"ABORT\";\n  /** RETRY - Retry chunk (combine with refetch and reject) */\n\n  ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"RETRY\"] = 3] = \"RETRY\";\n  /** RETRY_SNAPSHOT - Retry snapshot (combine with refetch and reject) */\n\n  ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"RETRY_SNAPSHOT\"] = 4] = \"RETRY_SNAPSHOT\";\n  /** REJECT_SNAPSHOT - Reject this snapshot, try others */\n\n  ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"REJECT_SNAPSHOT\"] = 5] = \"REJECT_SNAPSHOT\";\n  ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ResponseApplySnapshotChunk_Result = exports.ResponseApplySnapshotChunk_Result || (exports.ResponseApplySnapshotChunk_Result = {}));\n\nfunction responseApplySnapshotChunk_ResultFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"UNKNOWN\":\n      return ResponseApplySnapshotChunk_Result.UNKNOWN;\n\n    case 1:\n    case \"ACCEPT\":\n      return ResponseApplySnapshotChunk_Result.ACCEPT;\n\n    case 2:\n    case \"ABORT\":\n      return ResponseApplySnapshotChunk_Result.ABORT;\n\n    case 3:\n    case \"RETRY\":\n      return ResponseApplySnapshotChunk_Result.RETRY;\n\n    case 4:\n    case \"RETRY_SNAPSHOT\":\n      return ResponseApplySnapshotChunk_Result.RETRY_SNAPSHOT;\n\n    case 5:\n    case \"REJECT_SNAPSHOT\":\n      return ResponseApplySnapshotChunk_Result.REJECT_SNAPSHOT;\n\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return ResponseApplySnapshotChunk_Result.UNRECOGNIZED;\n  }\n}\n\nexports.responseApplySnapshotChunk_ResultFromJSON = responseApplySnapshotChunk_ResultFromJSON;\n\nfunction responseApplySnapshotChunk_ResultToJSON(object) {\n  switch (object) {\n    case ResponseApplySnapshotChunk_Result.UNKNOWN:\n      return \"UNKNOWN\";\n\n    case ResponseApplySnapshotChunk_Result.ACCEPT:\n      return \"ACCEPT\";\n\n    case ResponseApplySnapshotChunk_Result.ABORT:\n      return \"ABORT\";\n\n    case ResponseApplySnapshotChunk_Result.RETRY:\n      return \"RETRY\";\n\n    case ResponseApplySnapshotChunk_Result.RETRY_SNAPSHOT:\n      return \"RETRY_SNAPSHOT\";\n\n    case ResponseApplySnapshotChunk_Result.REJECT_SNAPSHOT:\n      return \"REJECT_SNAPSHOT\";\n\n    default:\n      return \"UNKNOWN\";\n  }\n}\n\nexports.responseApplySnapshotChunk_ResultToJSON = responseApplySnapshotChunk_ResultToJSON;\nconst baseRequest = {};\nexports.Request = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.echo !== undefined) {\n      exports.RequestEcho.encode(message.echo, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.flush !== undefined) {\n      exports.RequestFlush.encode(message.flush, writer.uint32(18).fork()).ldelim();\n    }\n\n    if (message.info !== undefined) {\n      exports.RequestInfo.encode(message.info, writer.uint32(26).fork()).ldelim();\n    }\n\n    if (message.setOption !== undefined) {\n      exports.RequestSetOption.encode(message.setOption, writer.uint32(34).fork()).ldelim();\n    }\n\n    if (message.initChain !== undefined) {\n      exports.RequestInitChain.encode(message.initChain, writer.uint32(42).fork()).ldelim();\n    }\n\n    if (message.query !== undefined) {\n      exports.RequestQuery.encode(message.query, writer.uint32(50).fork()).ldelim();\n    }\n\n    if (message.beginBlock !== undefined) {\n      exports.RequestBeginBlock.encode(message.beginBlock, writer.uint32(58).fork()).ldelim();\n    }\n\n    if (message.checkTx !== undefined) {\n      exports.RequestCheckTx.encode(message.checkTx, writer.uint32(66).fork()).ldelim();\n    }\n\n    if (message.deliverTx !== undefined) {\n      exports.RequestDeliverTx.encode(message.deliverTx, writer.uint32(74).fork()).ldelim();\n    }\n\n    if (message.endBlock !== undefined) {\n      exports.RequestEndBlock.encode(message.endBlock, writer.uint32(82).fork()).ldelim();\n    }\n\n    if (message.commit !== undefined) {\n      exports.RequestCommit.encode(message.commit, writer.uint32(90).fork()).ldelim();\n    }\n\n    if (message.listSnapshots !== undefined) {\n      exports.RequestListSnapshots.encode(message.listSnapshots, writer.uint32(98).fork()).ldelim();\n    }\n\n    if (message.offerSnapshot !== undefined) {\n      exports.RequestOfferSnapshot.encode(message.offerSnapshot, writer.uint32(106).fork()).ldelim();\n    }\n\n    if (message.loadSnapshotChunk !== undefined) {\n      exports.RequestLoadSnapshotChunk.encode(message.loadSnapshotChunk, writer.uint32(114).fork()).ldelim();\n    }\n\n    if (message.applySnapshotChunk !== undefined) {\n      exports.RequestApplySnapshotChunk.encode(message.applySnapshotChunk, writer.uint32(122).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.echo = exports.RequestEcho.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.flush = exports.RequestFlush.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          message.info = exports.RequestInfo.decode(reader, reader.uint32());\n          break;\n\n        case 4:\n          message.setOption = exports.RequestSetOption.decode(reader, reader.uint32());\n          break;\n\n        case 5:\n          message.initChain = exports.RequestInitChain.decode(reader, reader.uint32());\n          break;\n\n        case 6:\n          message.query = exports.RequestQuery.decode(reader, reader.uint32());\n          break;\n\n        case 7:\n          message.beginBlock = exports.RequestBeginBlock.decode(reader, reader.uint32());\n          break;\n\n        case 8:\n          message.checkTx = exports.RequestCheckTx.decode(reader, reader.uint32());\n          break;\n\n        case 9:\n          message.deliverTx = exports.RequestDeliverTx.decode(reader, reader.uint32());\n          break;\n\n        case 10:\n          message.endBlock = exports.RequestEndBlock.decode(reader, reader.uint32());\n          break;\n\n        case 11:\n          message.commit = exports.RequestCommit.decode(reader, reader.uint32());\n          break;\n\n        case 12:\n          message.listSnapshots = exports.RequestListSnapshots.decode(reader, reader.uint32());\n          break;\n\n        case 13:\n          message.offerSnapshot = exports.RequestOfferSnapshot.decode(reader, reader.uint32());\n          break;\n\n        case 14:\n          message.loadSnapshotChunk = exports.RequestLoadSnapshotChunk.decode(reader, reader.uint32());\n          break;\n\n        case 15:\n          message.applySnapshotChunk = exports.RequestApplySnapshotChunk.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseRequest);\n\n    if (object.echo !== undefined && object.echo !== null) {\n      message.echo = exports.RequestEcho.fromJSON(object.echo);\n    } else {\n      message.echo = undefined;\n    }\n\n    if (object.flush !== undefined && object.flush !== null) {\n      message.flush = exports.RequestFlush.fromJSON(object.flush);\n    } else {\n      message.flush = undefined;\n    }\n\n    if (object.info !== undefined && object.info !== null) {\n      message.info = exports.RequestInfo.fromJSON(object.info);\n    } else {\n      message.info = undefined;\n    }\n\n    if (object.setOption !== undefined && object.setOption !== null) {\n      message.setOption = exports.RequestSetOption.fromJSON(object.setOption);\n    } else {\n      message.setOption = undefined;\n    }\n\n    if (object.initChain !== undefined && object.initChain !== null) {\n      message.initChain = exports.RequestInitChain.fromJSON(object.initChain);\n    } else {\n      message.initChain = undefined;\n    }\n\n    if (object.query !== undefined && object.query !== null) {\n      message.query = exports.RequestQuery.fromJSON(object.query);\n    } else {\n      message.query = undefined;\n    }\n\n    if (object.beginBlock !== undefined && object.beginBlock !== null) {\n      message.beginBlock = exports.RequestBeginBlock.fromJSON(object.beginBlock);\n    } else {\n      message.beginBlock = undefined;\n    }\n\n    if (object.checkTx !== undefined && object.checkTx !== null) {\n      message.checkTx = exports.RequestCheckTx.fromJSON(object.checkTx);\n    } else {\n      message.checkTx = undefined;\n    }\n\n    if (object.deliverTx !== undefined && object.deliverTx !== null) {\n      message.deliverTx = exports.RequestDeliverTx.fromJSON(object.deliverTx);\n    } else {\n      message.deliverTx = undefined;\n    }\n\n    if (object.endBlock !== undefined && object.endBlock !== null) {\n      message.endBlock = exports.RequestEndBlock.fromJSON(object.endBlock);\n    } else {\n      message.endBlock = undefined;\n    }\n\n    if (object.commit !== undefined && object.commit !== null) {\n      message.commit = exports.RequestCommit.fromJSON(object.commit);\n    } else {\n      message.commit = undefined;\n    }\n\n    if (object.listSnapshots !== undefined && object.listSnapshots !== null) {\n      message.listSnapshots = exports.RequestListSnapshots.fromJSON(object.listSnapshots);\n    } else {\n      message.listSnapshots = undefined;\n    }\n\n    if (object.offerSnapshot !== undefined && object.offerSnapshot !== null) {\n      message.offerSnapshot = exports.RequestOfferSnapshot.fromJSON(object.offerSnapshot);\n    } else {\n      message.offerSnapshot = undefined;\n    }\n\n    if (object.loadSnapshotChunk !== undefined && object.loadSnapshotChunk !== null) {\n      message.loadSnapshotChunk = exports.RequestLoadSnapshotChunk.fromJSON(object.loadSnapshotChunk);\n    } else {\n      message.loadSnapshotChunk = undefined;\n    }\n\n    if (object.applySnapshotChunk !== undefined && object.applySnapshotChunk !== null) {\n      message.applySnapshotChunk = exports.RequestApplySnapshotChunk.fromJSON(object.applySnapshotChunk);\n    } else {\n      message.applySnapshotChunk = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.echo !== undefined && (obj.echo = message.echo ? exports.RequestEcho.toJSON(message.echo) : undefined);\n    message.flush !== undefined && (obj.flush = message.flush ? exports.RequestFlush.toJSON(message.flush) : undefined);\n    message.info !== undefined && (obj.info = message.info ? exports.RequestInfo.toJSON(message.info) : undefined);\n    message.setOption !== undefined && (obj.setOption = message.setOption ? exports.RequestSetOption.toJSON(message.setOption) : undefined);\n    message.initChain !== undefined && (obj.initChain = message.initChain ? exports.RequestInitChain.toJSON(message.initChain) : undefined);\n    message.query !== undefined && (obj.query = message.query ? exports.RequestQuery.toJSON(message.query) : undefined);\n    message.beginBlock !== undefined && (obj.beginBlock = message.beginBlock ? exports.RequestBeginBlock.toJSON(message.beginBlock) : undefined);\n    message.checkTx !== undefined && (obj.checkTx = message.checkTx ? exports.RequestCheckTx.toJSON(message.checkTx) : undefined);\n    message.deliverTx !== undefined && (obj.deliverTx = message.deliverTx ? exports.RequestDeliverTx.toJSON(message.deliverTx) : undefined);\n    message.endBlock !== undefined && (obj.endBlock = message.endBlock ? exports.RequestEndBlock.toJSON(message.endBlock) : undefined);\n    message.commit !== undefined && (obj.commit = message.commit ? exports.RequestCommit.toJSON(message.commit) : undefined);\n    message.listSnapshots !== undefined && (obj.listSnapshots = message.listSnapshots ? exports.RequestListSnapshots.toJSON(message.listSnapshots) : undefined);\n    message.offerSnapshot !== undefined && (obj.offerSnapshot = message.offerSnapshot ? exports.RequestOfferSnapshot.toJSON(message.offerSnapshot) : undefined);\n    message.loadSnapshotChunk !== undefined && (obj.loadSnapshotChunk = message.loadSnapshotChunk ? exports.RequestLoadSnapshotChunk.toJSON(message.loadSnapshotChunk) : undefined);\n    message.applySnapshotChunk !== undefined && (obj.applySnapshotChunk = message.applySnapshotChunk ? exports.RequestApplySnapshotChunk.toJSON(message.applySnapshotChunk) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseRequest);\n\n    if (object.echo !== undefined && object.echo !== null) {\n      message.echo = exports.RequestEcho.fromPartial(object.echo);\n    } else {\n      message.echo = undefined;\n    }\n\n    if (object.flush !== undefined && object.flush !== null) {\n      message.flush = exports.RequestFlush.fromPartial(object.flush);\n    } else {\n      message.flush = undefined;\n    }\n\n    if (object.info !== undefined && object.info !== null) {\n      message.info = exports.RequestInfo.fromPartial(object.info);\n    } else {\n      message.info = undefined;\n    }\n\n    if (object.setOption !== undefined && object.setOption !== null) {\n      message.setOption = exports.RequestSetOption.fromPartial(object.setOption);\n    } else {\n      message.setOption = undefined;\n    }\n\n    if (object.initChain !== undefined && object.initChain !== null) {\n      message.initChain = exports.RequestInitChain.fromPartial(object.initChain);\n    } else {\n      message.initChain = undefined;\n    }\n\n    if (object.query !== undefined && object.query !== null) {\n      message.query = exports.RequestQuery.fromPartial(object.query);\n    } else {\n      message.query = undefined;\n    }\n\n    if (object.beginBlock !== undefined && object.beginBlock !== null) {\n      message.beginBlock = exports.RequestBeginBlock.fromPartial(object.beginBlock);\n    } else {\n      message.beginBlock = undefined;\n    }\n\n    if (object.checkTx !== undefined && object.checkTx !== null) {\n      message.checkTx = exports.RequestCheckTx.fromPartial(object.checkTx);\n    } else {\n      message.checkTx = undefined;\n    }\n\n    if (object.deliverTx !== undefined && object.deliverTx !== null) {\n      message.deliverTx = exports.RequestDeliverTx.fromPartial(object.deliverTx);\n    } else {\n      message.deliverTx = undefined;\n    }\n\n    if (object.endBlock !== undefined && object.endBlock !== null) {\n      message.endBlock = exports.RequestEndBlock.fromPartial(object.endBlock);\n    } else {\n      message.endBlock = undefined;\n    }\n\n    if (object.commit !== undefined && object.commit !== null) {\n      message.commit = exports.RequestCommit.fromPartial(object.commit);\n    } else {\n      message.commit = undefined;\n    }\n\n    if (object.listSnapshots !== undefined && object.listSnapshots !== null) {\n      message.listSnapshots = exports.RequestListSnapshots.fromPartial(object.listSnapshots);\n    } else {\n      message.listSnapshots = undefined;\n    }\n\n    if (object.offerSnapshot !== undefined && object.offerSnapshot !== null) {\n      message.offerSnapshot = exports.RequestOfferSnapshot.fromPartial(object.offerSnapshot);\n    } else {\n      message.offerSnapshot = undefined;\n    }\n\n    if (object.loadSnapshotChunk !== undefined && object.loadSnapshotChunk !== null) {\n      message.loadSnapshotChunk = exports.RequestLoadSnapshotChunk.fromPartial(object.loadSnapshotChunk);\n    } else {\n      message.loadSnapshotChunk = undefined;\n    }\n\n    if (object.applySnapshotChunk !== undefined && object.applySnapshotChunk !== null) {\n      message.applySnapshotChunk = exports.RequestApplySnapshotChunk.fromPartial(object.applySnapshotChunk);\n    } else {\n      message.applySnapshotChunk = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseRequestEcho = {\n  message: \"\"\n};\nexports.RequestEcho = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.message !== \"\") {\n      writer.uint32(10).string(message.message);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestEcho);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.message = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseRequestEcho);\n\n    if (object.message !== undefined && object.message !== null) {\n      message.message = String(object.message);\n    } else {\n      message.message = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.message !== undefined && (obj.message = message.message);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseRequestEcho);\n\n    if (object.message !== undefined && object.message !== null) {\n      message.message = object.message;\n    } else {\n      message.message = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseRequestFlush = {};\nexports.RequestFlush = {\n  encode(_) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestFlush);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = Object.assign({}, baseRequestFlush);\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = Object.assign({}, baseRequestFlush);\n    return message;\n  }\n\n};\nconst baseRequestInfo = {\n  version: \"\",\n  blockVersion: long_1.default.UZERO,\n  p2pVersion: long_1.default.UZERO\n};\nexports.RequestInfo = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.version !== \"\") {\n      writer.uint32(10).string(message.version);\n    }\n\n    if (!message.blockVersion.isZero()) {\n      writer.uint32(16).uint64(message.blockVersion);\n    }\n\n    if (!message.p2pVersion.isZero()) {\n      writer.uint32(24).uint64(message.p2pVersion);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestInfo);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.version = reader.string();\n          break;\n\n        case 2:\n          message.blockVersion = reader.uint64();\n          break;\n\n        case 3:\n          message.p2pVersion = reader.uint64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseRequestInfo);\n\n    if (object.version !== undefined && object.version !== null) {\n      message.version = String(object.version);\n    } else {\n      message.version = \"\";\n    }\n\n    if (object.blockVersion !== undefined && object.blockVersion !== null) {\n      message.blockVersion = long_1.default.fromString(object.blockVersion);\n    } else {\n      message.blockVersion = long_1.default.UZERO;\n    }\n\n    if (object.p2pVersion !== undefined && object.p2pVersion !== null) {\n      message.p2pVersion = long_1.default.fromString(object.p2pVersion);\n    } else {\n      message.p2pVersion = long_1.default.UZERO;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.version !== undefined && (obj.version = message.version);\n    message.blockVersion !== undefined && (obj.blockVersion = (message.blockVersion || long_1.default.UZERO).toString());\n    message.p2pVersion !== undefined && (obj.p2pVersion = (message.p2pVersion || long_1.default.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseRequestInfo);\n\n    if (object.version !== undefined && object.version !== null) {\n      message.version = object.version;\n    } else {\n      message.version = \"\";\n    }\n\n    if (object.blockVersion !== undefined && object.blockVersion !== null) {\n      message.blockVersion = object.blockVersion;\n    } else {\n      message.blockVersion = long_1.default.UZERO;\n    }\n\n    if (object.p2pVersion !== undefined && object.p2pVersion !== null) {\n      message.p2pVersion = object.p2pVersion;\n    } else {\n      message.p2pVersion = long_1.default.UZERO;\n    }\n\n    return message;\n  }\n\n};\nconst baseRequestSetOption = {\n  key: \"\",\n  value: \"\"\n};\nexports.RequestSetOption = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n\n    if (message.value !== \"\") {\n      writer.uint32(18).string(message.value);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestSetOption);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.string();\n          break;\n\n        case 2:\n          message.value = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseRequestSetOption);\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = String(object.key);\n    } else {\n      message.key = \"\";\n    }\n\n    if (object.value !== undefined && object.value !== null) {\n      message.value = String(object.value);\n    } else {\n      message.value = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = message.key);\n    message.value !== undefined && (obj.value = message.value);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseRequestSetOption);\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = object.key;\n    } else {\n      message.key = \"\";\n    }\n\n    if (object.value !== undefined && object.value !== null) {\n      message.value = object.value;\n    } else {\n      message.value = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseRequestInitChain = {\n  chainId: \"\",\n  initialHeight: long_1.default.ZERO\n};\nexports.RequestInitChain = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.time !== undefined) {\n      timestamp_1.Timestamp.encode(toTimestamp(message.time), writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.chainId !== \"\") {\n      writer.uint32(18).string(message.chainId);\n    }\n\n    if (message.consensusParams !== undefined) {\n      exports.ConsensusParams.encode(message.consensusParams, writer.uint32(26).fork()).ldelim();\n    }\n\n    for (const v of message.validators) {\n      exports.ValidatorUpdate.encode(v, writer.uint32(34).fork()).ldelim();\n    }\n\n    if (message.appStateBytes.length !== 0) {\n      writer.uint32(42).bytes(message.appStateBytes);\n    }\n\n    if (!message.initialHeight.isZero()) {\n      writer.uint32(48).int64(message.initialHeight);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestInitChain);\n    message.validators = [];\n    message.appStateBytes = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n          break;\n\n        case 2:\n          message.chainId = reader.string();\n          break;\n\n        case 3:\n          message.consensusParams = exports.ConsensusParams.decode(reader, reader.uint32());\n          break;\n\n        case 4:\n          message.validators.push(exports.ValidatorUpdate.decode(reader, reader.uint32()));\n          break;\n\n        case 5:\n          message.appStateBytes = reader.bytes();\n          break;\n\n        case 6:\n          message.initialHeight = reader.int64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseRequestInitChain);\n    message.validators = [];\n    message.appStateBytes = new Uint8Array();\n\n    if (object.time !== undefined && object.time !== null) {\n      message.time = fromJsonTimestamp(object.time);\n    } else {\n      message.time = undefined;\n    }\n\n    if (object.chainId !== undefined && object.chainId !== null) {\n      message.chainId = String(object.chainId);\n    } else {\n      message.chainId = \"\";\n    }\n\n    if (object.consensusParams !== undefined && object.consensusParams !== null) {\n      message.consensusParams = exports.ConsensusParams.fromJSON(object.consensusParams);\n    } else {\n      message.consensusParams = undefined;\n    }\n\n    if (object.validators !== undefined && object.validators !== null) {\n      for (const e of object.validators) {\n        message.validators.push(exports.ValidatorUpdate.fromJSON(e));\n      }\n    }\n\n    if (object.appStateBytes !== undefined && object.appStateBytes !== null) {\n      message.appStateBytes = bytesFromBase64(object.appStateBytes);\n    }\n\n    if (object.initialHeight !== undefined && object.initialHeight !== null) {\n      message.initialHeight = long_1.default.fromString(object.initialHeight);\n    } else {\n      message.initialHeight = long_1.default.ZERO;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.time !== undefined && (obj.time = message.time.toISOString());\n    message.chainId !== undefined && (obj.chainId = message.chainId);\n    message.consensusParams !== undefined && (obj.consensusParams = message.consensusParams ? exports.ConsensusParams.toJSON(message.consensusParams) : undefined);\n\n    if (message.validators) {\n      obj.validators = message.validators.map(e => e ? exports.ValidatorUpdate.toJSON(e) : undefined);\n    } else {\n      obj.validators = [];\n    }\n\n    message.appStateBytes !== undefined && (obj.appStateBytes = base64FromBytes(message.appStateBytes !== undefined ? message.appStateBytes : new Uint8Array()));\n    message.initialHeight !== undefined && (obj.initialHeight = (message.initialHeight || long_1.default.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseRequestInitChain);\n    message.validators = [];\n\n    if (object.time !== undefined && object.time !== null) {\n      message.time = object.time;\n    } else {\n      message.time = undefined;\n    }\n\n    if (object.chainId !== undefined && object.chainId !== null) {\n      message.chainId = object.chainId;\n    } else {\n      message.chainId = \"\";\n    }\n\n    if (object.consensusParams !== undefined && object.consensusParams !== null) {\n      message.consensusParams = exports.ConsensusParams.fromPartial(object.consensusParams);\n    } else {\n      message.consensusParams = undefined;\n    }\n\n    if (object.validators !== undefined && object.validators !== null) {\n      for (const e of object.validators) {\n        message.validators.push(exports.ValidatorUpdate.fromPartial(e));\n      }\n    }\n\n    if (object.appStateBytes !== undefined && object.appStateBytes !== null) {\n      message.appStateBytes = object.appStateBytes;\n    } else {\n      message.appStateBytes = new Uint8Array();\n    }\n\n    if (object.initialHeight !== undefined && object.initialHeight !== null) {\n      message.initialHeight = object.initialHeight;\n    } else {\n      message.initialHeight = long_1.default.ZERO;\n    }\n\n    return message;\n  }\n\n};\nconst baseRequestQuery = {\n  path: \"\",\n  height: long_1.default.ZERO,\n  prove: false\n};\nexports.RequestQuery = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.data.length !== 0) {\n      writer.uint32(10).bytes(message.data);\n    }\n\n    if (message.path !== \"\") {\n      writer.uint32(18).string(message.path);\n    }\n\n    if (!message.height.isZero()) {\n      writer.uint32(24).int64(message.height);\n    }\n\n    if (message.prove === true) {\n      writer.uint32(32).bool(message.prove);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestQuery);\n    message.data = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.data = reader.bytes();\n          break;\n\n        case 2:\n          message.path = reader.string();\n          break;\n\n        case 3:\n          message.height = reader.int64();\n          break;\n\n        case 4:\n          message.prove = reader.bool();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseRequestQuery);\n    message.data = new Uint8Array();\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n\n    if (object.path !== undefined && object.path !== null) {\n      message.path = String(object.path);\n    } else {\n      message.path = \"\";\n    }\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = long_1.default.fromString(object.height);\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n\n    if (object.prove !== undefined && object.prove !== null) {\n      message.prove = Boolean(object.prove);\n    } else {\n      message.prove = false;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    message.path !== undefined && (obj.path = message.path);\n    message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n    message.prove !== undefined && (obj.prove = message.prove);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseRequestQuery);\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n\n    if (object.path !== undefined && object.path !== null) {\n      message.path = object.path;\n    } else {\n      message.path = \"\";\n    }\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n\n    if (object.prove !== undefined && object.prove !== null) {\n      message.prove = object.prove;\n    } else {\n      message.prove = false;\n    }\n\n    return message;\n  }\n\n};\nconst baseRequestBeginBlock = {};\nexports.RequestBeginBlock = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.hash.length !== 0) {\n      writer.uint32(10).bytes(message.hash);\n    }\n\n    if (message.header !== undefined) {\n      types_1.Header.encode(message.header, writer.uint32(18).fork()).ldelim();\n    }\n\n    if (message.lastCommitInfo !== undefined) {\n      exports.LastCommitInfo.encode(message.lastCommitInfo, writer.uint32(26).fork()).ldelim();\n    }\n\n    for (const v of message.byzantineValidators) {\n      exports.Evidence.encode(v, writer.uint32(34).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestBeginBlock);\n    message.byzantineValidators = [];\n    message.hash = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.hash = reader.bytes();\n          break;\n\n        case 2:\n          message.header = types_1.Header.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          message.lastCommitInfo = exports.LastCommitInfo.decode(reader, reader.uint32());\n          break;\n\n        case 4:\n          message.byzantineValidators.push(exports.Evidence.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseRequestBeginBlock);\n    message.byzantineValidators = [];\n    message.hash = new Uint8Array();\n\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = bytesFromBase64(object.hash);\n    }\n\n    if (object.header !== undefined && object.header !== null) {\n      message.header = types_1.Header.fromJSON(object.header);\n    } else {\n      message.header = undefined;\n    }\n\n    if (object.lastCommitInfo !== undefined && object.lastCommitInfo !== null) {\n      message.lastCommitInfo = exports.LastCommitInfo.fromJSON(object.lastCommitInfo);\n    } else {\n      message.lastCommitInfo = undefined;\n    }\n\n    if (object.byzantineValidators !== undefined && object.byzantineValidators !== null) {\n      for (const e of object.byzantineValidators) {\n        message.byzantineValidators.push(exports.Evidence.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.hash !== undefined && (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n    message.header !== undefined && (obj.header = message.header ? types_1.Header.toJSON(message.header) : undefined);\n    message.lastCommitInfo !== undefined && (obj.lastCommitInfo = message.lastCommitInfo ? exports.LastCommitInfo.toJSON(message.lastCommitInfo) : undefined);\n\n    if (message.byzantineValidators) {\n      obj.byzantineValidators = message.byzantineValidators.map(e => e ? exports.Evidence.toJSON(e) : undefined);\n    } else {\n      obj.byzantineValidators = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseRequestBeginBlock);\n    message.byzantineValidators = [];\n\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = object.hash;\n    } else {\n      message.hash = new Uint8Array();\n    }\n\n    if (object.header !== undefined && object.header !== null) {\n      message.header = types_1.Header.fromPartial(object.header);\n    } else {\n      message.header = undefined;\n    }\n\n    if (object.lastCommitInfo !== undefined && object.lastCommitInfo !== null) {\n      message.lastCommitInfo = exports.LastCommitInfo.fromPartial(object.lastCommitInfo);\n    } else {\n      message.lastCommitInfo = undefined;\n    }\n\n    if (object.byzantineValidators !== undefined && object.byzantineValidators !== null) {\n      for (const e of object.byzantineValidators) {\n        message.byzantineValidators.push(exports.Evidence.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseRequestCheckTx = {\n  type: 0\n};\nexports.RequestCheckTx = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.tx.length !== 0) {\n      writer.uint32(10).bytes(message.tx);\n    }\n\n    if (message.type !== 0) {\n      writer.uint32(16).int32(message.type);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestCheckTx);\n    message.tx = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.tx = reader.bytes();\n          break;\n\n        case 2:\n          message.type = reader.int32();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseRequestCheckTx);\n    message.tx = new Uint8Array();\n\n    if (object.tx !== undefined && object.tx !== null) {\n      message.tx = bytesFromBase64(object.tx);\n    }\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = checkTxTypeFromJSON(object.type);\n    } else {\n      message.type = 0;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.tx !== undefined && (obj.tx = base64FromBytes(message.tx !== undefined ? message.tx : new Uint8Array()));\n    message.type !== undefined && (obj.type = checkTxTypeToJSON(message.type));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseRequestCheckTx);\n\n    if (object.tx !== undefined && object.tx !== null) {\n      message.tx = object.tx;\n    } else {\n      message.tx = new Uint8Array();\n    }\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = object.type;\n    } else {\n      message.type = 0;\n    }\n\n    return message;\n  }\n\n};\nconst baseRequestDeliverTx = {};\nexports.RequestDeliverTx = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.tx.length !== 0) {\n      writer.uint32(10).bytes(message.tx);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestDeliverTx);\n    message.tx = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.tx = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseRequestDeliverTx);\n    message.tx = new Uint8Array();\n\n    if (object.tx !== undefined && object.tx !== null) {\n      message.tx = bytesFromBase64(object.tx);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.tx !== undefined && (obj.tx = base64FromBytes(message.tx !== undefined ? message.tx : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseRequestDeliverTx);\n\n    if (object.tx !== undefined && object.tx !== null) {\n      message.tx = object.tx;\n    } else {\n      message.tx = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseRequestEndBlock = {\n  height: long_1.default.ZERO\n};\nexports.RequestEndBlock = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (!message.height.isZero()) {\n      writer.uint32(8).int64(message.height);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestEndBlock);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.height = reader.int64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseRequestEndBlock);\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = long_1.default.fromString(object.height);\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseRequestEndBlock);\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n\n    return message;\n  }\n\n};\nconst baseRequestCommit = {};\nexports.RequestCommit = {\n  encode(_) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestCommit);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = Object.assign({}, baseRequestCommit);\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = Object.assign({}, baseRequestCommit);\n    return message;\n  }\n\n};\nconst baseRequestListSnapshots = {};\nexports.RequestListSnapshots = {\n  encode(_) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestListSnapshots);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = Object.assign({}, baseRequestListSnapshots);\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = Object.assign({}, baseRequestListSnapshots);\n    return message;\n  }\n\n};\nconst baseRequestOfferSnapshot = {};\nexports.RequestOfferSnapshot = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.snapshot !== undefined) {\n      exports.Snapshot.encode(message.snapshot, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.appHash.length !== 0) {\n      writer.uint32(18).bytes(message.appHash);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestOfferSnapshot);\n    message.appHash = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.snapshot = exports.Snapshot.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.appHash = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseRequestOfferSnapshot);\n    message.appHash = new Uint8Array();\n\n    if (object.snapshot !== undefined && object.snapshot !== null) {\n      message.snapshot = exports.Snapshot.fromJSON(object.snapshot);\n    } else {\n      message.snapshot = undefined;\n    }\n\n    if (object.appHash !== undefined && object.appHash !== null) {\n      message.appHash = bytesFromBase64(object.appHash);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.snapshot !== undefined && (obj.snapshot = message.snapshot ? exports.Snapshot.toJSON(message.snapshot) : undefined);\n    message.appHash !== undefined && (obj.appHash = base64FromBytes(message.appHash !== undefined ? message.appHash : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseRequestOfferSnapshot);\n\n    if (object.snapshot !== undefined && object.snapshot !== null) {\n      message.snapshot = exports.Snapshot.fromPartial(object.snapshot);\n    } else {\n      message.snapshot = undefined;\n    }\n\n    if (object.appHash !== undefined && object.appHash !== null) {\n      message.appHash = object.appHash;\n    } else {\n      message.appHash = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseRequestLoadSnapshotChunk = {\n  height: long_1.default.UZERO,\n  format: 0,\n  chunk: 0\n};\nexports.RequestLoadSnapshotChunk = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (!message.height.isZero()) {\n      writer.uint32(8).uint64(message.height);\n    }\n\n    if (message.format !== 0) {\n      writer.uint32(16).uint32(message.format);\n    }\n\n    if (message.chunk !== 0) {\n      writer.uint32(24).uint32(message.chunk);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestLoadSnapshotChunk);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.height = reader.uint64();\n          break;\n\n        case 2:\n          message.format = reader.uint32();\n          break;\n\n        case 3:\n          message.chunk = reader.uint32();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseRequestLoadSnapshotChunk);\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = long_1.default.fromString(object.height);\n    } else {\n      message.height = long_1.default.UZERO;\n    }\n\n    if (object.format !== undefined && object.format !== null) {\n      message.format = Number(object.format);\n    } else {\n      message.format = 0;\n    }\n\n    if (object.chunk !== undefined && object.chunk !== null) {\n      message.chunk = Number(object.chunk);\n    } else {\n      message.chunk = 0;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.height !== undefined && (obj.height = (message.height || long_1.default.UZERO).toString());\n    message.format !== undefined && (obj.format = message.format);\n    message.chunk !== undefined && (obj.chunk = message.chunk);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseRequestLoadSnapshotChunk);\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = long_1.default.UZERO;\n    }\n\n    if (object.format !== undefined && object.format !== null) {\n      message.format = object.format;\n    } else {\n      message.format = 0;\n    }\n\n    if (object.chunk !== undefined && object.chunk !== null) {\n      message.chunk = object.chunk;\n    } else {\n      message.chunk = 0;\n    }\n\n    return message;\n  }\n\n};\nconst baseRequestApplySnapshotChunk = {\n  index: 0,\n  sender: \"\"\n};\nexports.RequestApplySnapshotChunk = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.index !== 0) {\n      writer.uint32(8).uint32(message.index);\n    }\n\n    if (message.chunk.length !== 0) {\n      writer.uint32(18).bytes(message.chunk);\n    }\n\n    if (message.sender !== \"\") {\n      writer.uint32(26).string(message.sender);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseRequestApplySnapshotChunk);\n    message.chunk = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.index = reader.uint32();\n          break;\n\n        case 2:\n          message.chunk = reader.bytes();\n          break;\n\n        case 3:\n          message.sender = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseRequestApplySnapshotChunk);\n    message.chunk = new Uint8Array();\n\n    if (object.index !== undefined && object.index !== null) {\n      message.index = Number(object.index);\n    } else {\n      message.index = 0;\n    }\n\n    if (object.chunk !== undefined && object.chunk !== null) {\n      message.chunk = bytesFromBase64(object.chunk);\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = String(object.sender);\n    } else {\n      message.sender = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.index !== undefined && (obj.index = message.index);\n    message.chunk !== undefined && (obj.chunk = base64FromBytes(message.chunk !== undefined ? message.chunk : new Uint8Array()));\n    message.sender !== undefined && (obj.sender = message.sender);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseRequestApplySnapshotChunk);\n\n    if (object.index !== undefined && object.index !== null) {\n      message.index = object.index;\n    } else {\n      message.index = 0;\n    }\n\n    if (object.chunk !== undefined && object.chunk !== null) {\n      message.chunk = object.chunk;\n    } else {\n      message.chunk = new Uint8Array();\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = object.sender;\n    } else {\n      message.sender = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseResponse = {};\nexports.Response = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.exception !== undefined) {\n      exports.ResponseException.encode(message.exception, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.echo !== undefined) {\n      exports.ResponseEcho.encode(message.echo, writer.uint32(18).fork()).ldelim();\n    }\n\n    if (message.flush !== undefined) {\n      exports.ResponseFlush.encode(message.flush, writer.uint32(26).fork()).ldelim();\n    }\n\n    if (message.info !== undefined) {\n      exports.ResponseInfo.encode(message.info, writer.uint32(34).fork()).ldelim();\n    }\n\n    if (message.setOption !== undefined) {\n      exports.ResponseSetOption.encode(message.setOption, writer.uint32(42).fork()).ldelim();\n    }\n\n    if (message.initChain !== undefined) {\n      exports.ResponseInitChain.encode(message.initChain, writer.uint32(50).fork()).ldelim();\n    }\n\n    if (message.query !== undefined) {\n      exports.ResponseQuery.encode(message.query, writer.uint32(58).fork()).ldelim();\n    }\n\n    if (message.beginBlock !== undefined) {\n      exports.ResponseBeginBlock.encode(message.beginBlock, writer.uint32(66).fork()).ldelim();\n    }\n\n    if (message.checkTx !== undefined) {\n      exports.ResponseCheckTx.encode(message.checkTx, writer.uint32(74).fork()).ldelim();\n    }\n\n    if (message.deliverTx !== undefined) {\n      exports.ResponseDeliverTx.encode(message.deliverTx, writer.uint32(82).fork()).ldelim();\n    }\n\n    if (message.endBlock !== undefined) {\n      exports.ResponseEndBlock.encode(message.endBlock, writer.uint32(90).fork()).ldelim();\n    }\n\n    if (message.commit !== undefined) {\n      exports.ResponseCommit.encode(message.commit, writer.uint32(98).fork()).ldelim();\n    }\n\n    if (message.listSnapshots !== undefined) {\n      exports.ResponseListSnapshots.encode(message.listSnapshots, writer.uint32(106).fork()).ldelim();\n    }\n\n    if (message.offerSnapshot !== undefined) {\n      exports.ResponseOfferSnapshot.encode(message.offerSnapshot, writer.uint32(114).fork()).ldelim();\n    }\n\n    if (message.loadSnapshotChunk !== undefined) {\n      exports.ResponseLoadSnapshotChunk.encode(message.loadSnapshotChunk, writer.uint32(122).fork()).ldelim();\n    }\n\n    if (message.applySnapshotChunk !== undefined) {\n      exports.ResponseApplySnapshotChunk.encode(message.applySnapshotChunk, writer.uint32(130).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.exception = exports.ResponseException.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.echo = exports.ResponseEcho.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          message.flush = exports.ResponseFlush.decode(reader, reader.uint32());\n          break;\n\n        case 4:\n          message.info = exports.ResponseInfo.decode(reader, reader.uint32());\n          break;\n\n        case 5:\n          message.setOption = exports.ResponseSetOption.decode(reader, reader.uint32());\n          break;\n\n        case 6:\n          message.initChain = exports.ResponseInitChain.decode(reader, reader.uint32());\n          break;\n\n        case 7:\n          message.query = exports.ResponseQuery.decode(reader, reader.uint32());\n          break;\n\n        case 8:\n          message.beginBlock = exports.ResponseBeginBlock.decode(reader, reader.uint32());\n          break;\n\n        case 9:\n          message.checkTx = exports.ResponseCheckTx.decode(reader, reader.uint32());\n          break;\n\n        case 10:\n          message.deliverTx = exports.ResponseDeliverTx.decode(reader, reader.uint32());\n          break;\n\n        case 11:\n          message.endBlock = exports.ResponseEndBlock.decode(reader, reader.uint32());\n          break;\n\n        case 12:\n          message.commit = exports.ResponseCommit.decode(reader, reader.uint32());\n          break;\n\n        case 13:\n          message.listSnapshots = exports.ResponseListSnapshots.decode(reader, reader.uint32());\n          break;\n\n        case 14:\n          message.offerSnapshot = exports.ResponseOfferSnapshot.decode(reader, reader.uint32());\n          break;\n\n        case 15:\n          message.loadSnapshotChunk = exports.ResponseLoadSnapshotChunk.decode(reader, reader.uint32());\n          break;\n\n        case 16:\n          message.applySnapshotChunk = exports.ResponseApplySnapshotChunk.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponse);\n\n    if (object.exception !== undefined && object.exception !== null) {\n      message.exception = exports.ResponseException.fromJSON(object.exception);\n    } else {\n      message.exception = undefined;\n    }\n\n    if (object.echo !== undefined && object.echo !== null) {\n      message.echo = exports.ResponseEcho.fromJSON(object.echo);\n    } else {\n      message.echo = undefined;\n    }\n\n    if (object.flush !== undefined && object.flush !== null) {\n      message.flush = exports.ResponseFlush.fromJSON(object.flush);\n    } else {\n      message.flush = undefined;\n    }\n\n    if (object.info !== undefined && object.info !== null) {\n      message.info = exports.ResponseInfo.fromJSON(object.info);\n    } else {\n      message.info = undefined;\n    }\n\n    if (object.setOption !== undefined && object.setOption !== null) {\n      message.setOption = exports.ResponseSetOption.fromJSON(object.setOption);\n    } else {\n      message.setOption = undefined;\n    }\n\n    if (object.initChain !== undefined && object.initChain !== null) {\n      message.initChain = exports.ResponseInitChain.fromJSON(object.initChain);\n    } else {\n      message.initChain = undefined;\n    }\n\n    if (object.query !== undefined && object.query !== null) {\n      message.query = exports.ResponseQuery.fromJSON(object.query);\n    } else {\n      message.query = undefined;\n    }\n\n    if (object.beginBlock !== undefined && object.beginBlock !== null) {\n      message.beginBlock = exports.ResponseBeginBlock.fromJSON(object.beginBlock);\n    } else {\n      message.beginBlock = undefined;\n    }\n\n    if (object.checkTx !== undefined && object.checkTx !== null) {\n      message.checkTx = exports.ResponseCheckTx.fromJSON(object.checkTx);\n    } else {\n      message.checkTx = undefined;\n    }\n\n    if (object.deliverTx !== undefined && object.deliverTx !== null) {\n      message.deliverTx = exports.ResponseDeliverTx.fromJSON(object.deliverTx);\n    } else {\n      message.deliverTx = undefined;\n    }\n\n    if (object.endBlock !== undefined && object.endBlock !== null) {\n      message.endBlock = exports.ResponseEndBlock.fromJSON(object.endBlock);\n    } else {\n      message.endBlock = undefined;\n    }\n\n    if (object.commit !== undefined && object.commit !== null) {\n      message.commit = exports.ResponseCommit.fromJSON(object.commit);\n    } else {\n      message.commit = undefined;\n    }\n\n    if (object.listSnapshots !== undefined && object.listSnapshots !== null) {\n      message.listSnapshots = exports.ResponseListSnapshots.fromJSON(object.listSnapshots);\n    } else {\n      message.listSnapshots = undefined;\n    }\n\n    if (object.offerSnapshot !== undefined && object.offerSnapshot !== null) {\n      message.offerSnapshot = exports.ResponseOfferSnapshot.fromJSON(object.offerSnapshot);\n    } else {\n      message.offerSnapshot = undefined;\n    }\n\n    if (object.loadSnapshotChunk !== undefined && object.loadSnapshotChunk !== null) {\n      message.loadSnapshotChunk = exports.ResponseLoadSnapshotChunk.fromJSON(object.loadSnapshotChunk);\n    } else {\n      message.loadSnapshotChunk = undefined;\n    }\n\n    if (object.applySnapshotChunk !== undefined && object.applySnapshotChunk !== null) {\n      message.applySnapshotChunk = exports.ResponseApplySnapshotChunk.fromJSON(object.applySnapshotChunk);\n    } else {\n      message.applySnapshotChunk = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.exception !== undefined && (obj.exception = message.exception ? exports.ResponseException.toJSON(message.exception) : undefined);\n    message.echo !== undefined && (obj.echo = message.echo ? exports.ResponseEcho.toJSON(message.echo) : undefined);\n    message.flush !== undefined && (obj.flush = message.flush ? exports.ResponseFlush.toJSON(message.flush) : undefined);\n    message.info !== undefined && (obj.info = message.info ? exports.ResponseInfo.toJSON(message.info) : undefined);\n    message.setOption !== undefined && (obj.setOption = message.setOption ? exports.ResponseSetOption.toJSON(message.setOption) : undefined);\n    message.initChain !== undefined && (obj.initChain = message.initChain ? exports.ResponseInitChain.toJSON(message.initChain) : undefined);\n    message.query !== undefined && (obj.query = message.query ? exports.ResponseQuery.toJSON(message.query) : undefined);\n    message.beginBlock !== undefined && (obj.beginBlock = message.beginBlock ? exports.ResponseBeginBlock.toJSON(message.beginBlock) : undefined);\n    message.checkTx !== undefined && (obj.checkTx = message.checkTx ? exports.ResponseCheckTx.toJSON(message.checkTx) : undefined);\n    message.deliverTx !== undefined && (obj.deliverTx = message.deliverTx ? exports.ResponseDeliverTx.toJSON(message.deliverTx) : undefined);\n    message.endBlock !== undefined && (obj.endBlock = message.endBlock ? exports.ResponseEndBlock.toJSON(message.endBlock) : undefined);\n    message.commit !== undefined && (obj.commit = message.commit ? exports.ResponseCommit.toJSON(message.commit) : undefined);\n    message.listSnapshots !== undefined && (obj.listSnapshots = message.listSnapshots ? exports.ResponseListSnapshots.toJSON(message.listSnapshots) : undefined);\n    message.offerSnapshot !== undefined && (obj.offerSnapshot = message.offerSnapshot ? exports.ResponseOfferSnapshot.toJSON(message.offerSnapshot) : undefined);\n    message.loadSnapshotChunk !== undefined && (obj.loadSnapshotChunk = message.loadSnapshotChunk ? exports.ResponseLoadSnapshotChunk.toJSON(message.loadSnapshotChunk) : undefined);\n    message.applySnapshotChunk !== undefined && (obj.applySnapshotChunk = message.applySnapshotChunk ? exports.ResponseApplySnapshotChunk.toJSON(message.applySnapshotChunk) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponse);\n\n    if (object.exception !== undefined && object.exception !== null) {\n      message.exception = exports.ResponseException.fromPartial(object.exception);\n    } else {\n      message.exception = undefined;\n    }\n\n    if (object.echo !== undefined && object.echo !== null) {\n      message.echo = exports.ResponseEcho.fromPartial(object.echo);\n    } else {\n      message.echo = undefined;\n    }\n\n    if (object.flush !== undefined && object.flush !== null) {\n      message.flush = exports.ResponseFlush.fromPartial(object.flush);\n    } else {\n      message.flush = undefined;\n    }\n\n    if (object.info !== undefined && object.info !== null) {\n      message.info = exports.ResponseInfo.fromPartial(object.info);\n    } else {\n      message.info = undefined;\n    }\n\n    if (object.setOption !== undefined && object.setOption !== null) {\n      message.setOption = exports.ResponseSetOption.fromPartial(object.setOption);\n    } else {\n      message.setOption = undefined;\n    }\n\n    if (object.initChain !== undefined && object.initChain !== null) {\n      message.initChain = exports.ResponseInitChain.fromPartial(object.initChain);\n    } else {\n      message.initChain = undefined;\n    }\n\n    if (object.query !== undefined && object.query !== null) {\n      message.query = exports.ResponseQuery.fromPartial(object.query);\n    } else {\n      message.query = undefined;\n    }\n\n    if (object.beginBlock !== undefined && object.beginBlock !== null) {\n      message.beginBlock = exports.ResponseBeginBlock.fromPartial(object.beginBlock);\n    } else {\n      message.beginBlock = undefined;\n    }\n\n    if (object.checkTx !== undefined && object.checkTx !== null) {\n      message.checkTx = exports.ResponseCheckTx.fromPartial(object.checkTx);\n    } else {\n      message.checkTx = undefined;\n    }\n\n    if (object.deliverTx !== undefined && object.deliverTx !== null) {\n      message.deliverTx = exports.ResponseDeliverTx.fromPartial(object.deliverTx);\n    } else {\n      message.deliverTx = undefined;\n    }\n\n    if (object.endBlock !== undefined && object.endBlock !== null) {\n      message.endBlock = exports.ResponseEndBlock.fromPartial(object.endBlock);\n    } else {\n      message.endBlock = undefined;\n    }\n\n    if (object.commit !== undefined && object.commit !== null) {\n      message.commit = exports.ResponseCommit.fromPartial(object.commit);\n    } else {\n      message.commit = undefined;\n    }\n\n    if (object.listSnapshots !== undefined && object.listSnapshots !== null) {\n      message.listSnapshots = exports.ResponseListSnapshots.fromPartial(object.listSnapshots);\n    } else {\n      message.listSnapshots = undefined;\n    }\n\n    if (object.offerSnapshot !== undefined && object.offerSnapshot !== null) {\n      message.offerSnapshot = exports.ResponseOfferSnapshot.fromPartial(object.offerSnapshot);\n    } else {\n      message.offerSnapshot = undefined;\n    }\n\n    if (object.loadSnapshotChunk !== undefined && object.loadSnapshotChunk !== null) {\n      message.loadSnapshotChunk = exports.ResponseLoadSnapshotChunk.fromPartial(object.loadSnapshotChunk);\n    } else {\n      message.loadSnapshotChunk = undefined;\n    }\n\n    if (object.applySnapshotChunk !== undefined && object.applySnapshotChunk !== null) {\n      message.applySnapshotChunk = exports.ResponseApplySnapshotChunk.fromPartial(object.applySnapshotChunk);\n    } else {\n      message.applySnapshotChunk = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseException = {\n  error: \"\"\n};\nexports.ResponseException = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.error !== \"\") {\n      writer.uint32(10).string(message.error);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseException);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.error = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseException);\n\n    if (object.error !== undefined && object.error !== null) {\n      message.error = String(object.error);\n    } else {\n      message.error = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.error !== undefined && (obj.error = message.error);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseException);\n\n    if (object.error !== undefined && object.error !== null) {\n      message.error = object.error;\n    } else {\n      message.error = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseEcho = {\n  message: \"\"\n};\nexports.ResponseEcho = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.message !== \"\") {\n      writer.uint32(10).string(message.message);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseEcho);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.message = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseEcho);\n\n    if (object.message !== undefined && object.message !== null) {\n      message.message = String(object.message);\n    } else {\n      message.message = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.message !== undefined && (obj.message = message.message);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseEcho);\n\n    if (object.message !== undefined && object.message !== null) {\n      message.message = object.message;\n    } else {\n      message.message = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseFlush = {};\nexports.ResponseFlush = {\n  encode(_) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseFlush);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = Object.assign({}, baseResponseFlush);\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = Object.assign({}, baseResponseFlush);\n    return message;\n  }\n\n};\nconst baseResponseInfo = {\n  data: \"\",\n  version: \"\",\n  appVersion: long_1.default.UZERO,\n  lastBlockHeight: long_1.default.ZERO\n};\nexports.ResponseInfo = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.data !== \"\") {\n      writer.uint32(10).string(message.data);\n    }\n\n    if (message.version !== \"\") {\n      writer.uint32(18).string(message.version);\n    }\n\n    if (!message.appVersion.isZero()) {\n      writer.uint32(24).uint64(message.appVersion);\n    }\n\n    if (!message.lastBlockHeight.isZero()) {\n      writer.uint32(32).int64(message.lastBlockHeight);\n    }\n\n    if (message.lastBlockAppHash.length !== 0) {\n      writer.uint32(42).bytes(message.lastBlockAppHash);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseInfo);\n    message.lastBlockAppHash = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.data = reader.string();\n          break;\n\n        case 2:\n          message.version = reader.string();\n          break;\n\n        case 3:\n          message.appVersion = reader.uint64();\n          break;\n\n        case 4:\n          message.lastBlockHeight = reader.int64();\n          break;\n\n        case 5:\n          message.lastBlockAppHash = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseInfo);\n    message.lastBlockAppHash = new Uint8Array();\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = String(object.data);\n    } else {\n      message.data = \"\";\n    }\n\n    if (object.version !== undefined && object.version !== null) {\n      message.version = String(object.version);\n    } else {\n      message.version = \"\";\n    }\n\n    if (object.appVersion !== undefined && object.appVersion !== null) {\n      message.appVersion = long_1.default.fromString(object.appVersion);\n    } else {\n      message.appVersion = long_1.default.UZERO;\n    }\n\n    if (object.lastBlockHeight !== undefined && object.lastBlockHeight !== null) {\n      message.lastBlockHeight = long_1.default.fromString(object.lastBlockHeight);\n    } else {\n      message.lastBlockHeight = long_1.default.ZERO;\n    }\n\n    if (object.lastBlockAppHash !== undefined && object.lastBlockAppHash !== null) {\n      message.lastBlockAppHash = bytesFromBase64(object.lastBlockAppHash);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.data !== undefined && (obj.data = message.data);\n    message.version !== undefined && (obj.version = message.version);\n    message.appVersion !== undefined && (obj.appVersion = (message.appVersion || long_1.default.UZERO).toString());\n    message.lastBlockHeight !== undefined && (obj.lastBlockHeight = (message.lastBlockHeight || long_1.default.ZERO).toString());\n    message.lastBlockAppHash !== undefined && (obj.lastBlockAppHash = base64FromBytes(message.lastBlockAppHash !== undefined ? message.lastBlockAppHash : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseInfo);\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = \"\";\n    }\n\n    if (object.version !== undefined && object.version !== null) {\n      message.version = object.version;\n    } else {\n      message.version = \"\";\n    }\n\n    if (object.appVersion !== undefined && object.appVersion !== null) {\n      message.appVersion = object.appVersion;\n    } else {\n      message.appVersion = long_1.default.UZERO;\n    }\n\n    if (object.lastBlockHeight !== undefined && object.lastBlockHeight !== null) {\n      message.lastBlockHeight = object.lastBlockHeight;\n    } else {\n      message.lastBlockHeight = long_1.default.ZERO;\n    }\n\n    if (object.lastBlockAppHash !== undefined && object.lastBlockAppHash !== null) {\n      message.lastBlockAppHash = object.lastBlockAppHash;\n    } else {\n      message.lastBlockAppHash = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseSetOption = {\n  code: 0,\n  log: \"\",\n  info: \"\"\n};\nexports.ResponseSetOption = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.code !== 0) {\n      writer.uint32(8).uint32(message.code);\n    }\n\n    if (message.log !== \"\") {\n      writer.uint32(26).string(message.log);\n    }\n\n    if (message.info !== \"\") {\n      writer.uint32(34).string(message.info);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseSetOption);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.code = reader.uint32();\n          break;\n\n        case 3:\n          message.log = reader.string();\n          break;\n\n        case 4:\n          message.info = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseSetOption);\n\n    if (object.code !== undefined && object.code !== null) {\n      message.code = Number(object.code);\n    } else {\n      message.code = 0;\n    }\n\n    if (object.log !== undefined && object.log !== null) {\n      message.log = String(object.log);\n    } else {\n      message.log = \"\";\n    }\n\n    if (object.info !== undefined && object.info !== null) {\n      message.info = String(object.info);\n    } else {\n      message.info = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.code !== undefined && (obj.code = message.code);\n    message.log !== undefined && (obj.log = message.log);\n    message.info !== undefined && (obj.info = message.info);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseSetOption);\n\n    if (object.code !== undefined && object.code !== null) {\n      message.code = object.code;\n    } else {\n      message.code = 0;\n    }\n\n    if (object.log !== undefined && object.log !== null) {\n      message.log = object.log;\n    } else {\n      message.log = \"\";\n    }\n\n    if (object.info !== undefined && object.info !== null) {\n      message.info = object.info;\n    } else {\n      message.info = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseInitChain = {};\nexports.ResponseInitChain = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.consensusParams !== undefined) {\n      exports.ConsensusParams.encode(message.consensusParams, writer.uint32(10).fork()).ldelim();\n    }\n\n    for (const v of message.validators) {\n      exports.ValidatorUpdate.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n\n    if (message.appHash.length !== 0) {\n      writer.uint32(26).bytes(message.appHash);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseInitChain);\n    message.validators = [];\n    message.appHash = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.consensusParams = exports.ConsensusParams.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.validators.push(exports.ValidatorUpdate.decode(reader, reader.uint32()));\n          break;\n\n        case 3:\n          message.appHash = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseInitChain);\n    message.validators = [];\n    message.appHash = new Uint8Array();\n\n    if (object.consensusParams !== undefined && object.consensusParams !== null) {\n      message.consensusParams = exports.ConsensusParams.fromJSON(object.consensusParams);\n    } else {\n      message.consensusParams = undefined;\n    }\n\n    if (object.validators !== undefined && object.validators !== null) {\n      for (const e of object.validators) {\n        message.validators.push(exports.ValidatorUpdate.fromJSON(e));\n      }\n    }\n\n    if (object.appHash !== undefined && object.appHash !== null) {\n      message.appHash = bytesFromBase64(object.appHash);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.consensusParams !== undefined && (obj.consensusParams = message.consensusParams ? exports.ConsensusParams.toJSON(message.consensusParams) : undefined);\n\n    if (message.validators) {\n      obj.validators = message.validators.map(e => e ? exports.ValidatorUpdate.toJSON(e) : undefined);\n    } else {\n      obj.validators = [];\n    }\n\n    message.appHash !== undefined && (obj.appHash = base64FromBytes(message.appHash !== undefined ? message.appHash : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseInitChain);\n    message.validators = [];\n\n    if (object.consensusParams !== undefined && object.consensusParams !== null) {\n      message.consensusParams = exports.ConsensusParams.fromPartial(object.consensusParams);\n    } else {\n      message.consensusParams = undefined;\n    }\n\n    if (object.validators !== undefined && object.validators !== null) {\n      for (const e of object.validators) {\n        message.validators.push(exports.ValidatorUpdate.fromPartial(e));\n      }\n    }\n\n    if (object.appHash !== undefined && object.appHash !== null) {\n      message.appHash = object.appHash;\n    } else {\n      message.appHash = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseQuery = {\n  code: 0,\n  log: \"\",\n  info: \"\",\n  index: long_1.default.ZERO,\n  height: long_1.default.ZERO,\n  codespace: \"\"\n};\nexports.ResponseQuery = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.code !== 0) {\n      writer.uint32(8).uint32(message.code);\n    }\n\n    if (message.log !== \"\") {\n      writer.uint32(26).string(message.log);\n    }\n\n    if (message.info !== \"\") {\n      writer.uint32(34).string(message.info);\n    }\n\n    if (!message.index.isZero()) {\n      writer.uint32(40).int64(message.index);\n    }\n\n    if (message.key.length !== 0) {\n      writer.uint32(50).bytes(message.key);\n    }\n\n    if (message.value.length !== 0) {\n      writer.uint32(58).bytes(message.value);\n    }\n\n    if (message.proofOps !== undefined) {\n      proof_1.ProofOps.encode(message.proofOps, writer.uint32(66).fork()).ldelim();\n    }\n\n    if (!message.height.isZero()) {\n      writer.uint32(72).int64(message.height);\n    }\n\n    if (message.codespace !== \"\") {\n      writer.uint32(82).string(message.codespace);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseQuery);\n    message.key = new Uint8Array();\n    message.value = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.code = reader.uint32();\n          break;\n\n        case 3:\n          message.log = reader.string();\n          break;\n\n        case 4:\n          message.info = reader.string();\n          break;\n\n        case 5:\n          message.index = reader.int64();\n          break;\n\n        case 6:\n          message.key = reader.bytes();\n          break;\n\n        case 7:\n          message.value = reader.bytes();\n          break;\n\n        case 8:\n          message.proofOps = proof_1.ProofOps.decode(reader, reader.uint32());\n          break;\n\n        case 9:\n          message.height = reader.int64();\n          break;\n\n        case 10:\n          message.codespace = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseQuery);\n    message.key = new Uint8Array();\n    message.value = new Uint8Array();\n\n    if (object.code !== undefined && object.code !== null) {\n      message.code = Number(object.code);\n    } else {\n      message.code = 0;\n    }\n\n    if (object.log !== undefined && object.log !== null) {\n      message.log = String(object.log);\n    } else {\n      message.log = \"\";\n    }\n\n    if (object.info !== undefined && object.info !== null) {\n      message.info = String(object.info);\n    } else {\n      message.info = \"\";\n    }\n\n    if (object.index !== undefined && object.index !== null) {\n      message.index = long_1.default.fromString(object.index);\n    } else {\n      message.index = long_1.default.ZERO;\n    }\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = bytesFromBase64(object.key);\n    }\n\n    if (object.value !== undefined && object.value !== null) {\n      message.value = bytesFromBase64(object.value);\n    }\n\n    if (object.proofOps !== undefined && object.proofOps !== null) {\n      message.proofOps = proof_1.ProofOps.fromJSON(object.proofOps);\n    } else {\n      message.proofOps = undefined;\n    }\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = long_1.default.fromString(object.height);\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n\n    if (object.codespace !== undefined && object.codespace !== null) {\n      message.codespace = String(object.codespace);\n    } else {\n      message.codespace = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.code !== undefined && (obj.code = message.code);\n    message.log !== undefined && (obj.log = message.log);\n    message.info !== undefined && (obj.info = message.info);\n    message.index !== undefined && (obj.index = (message.index || long_1.default.ZERO).toString());\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.value !== undefined && (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));\n    message.proofOps !== undefined && (obj.proofOps = message.proofOps ? proof_1.ProofOps.toJSON(message.proofOps) : undefined);\n    message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n    message.codespace !== undefined && (obj.codespace = message.codespace);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseQuery);\n\n    if (object.code !== undefined && object.code !== null) {\n      message.code = object.code;\n    } else {\n      message.code = 0;\n    }\n\n    if (object.log !== undefined && object.log !== null) {\n      message.log = object.log;\n    } else {\n      message.log = \"\";\n    }\n\n    if (object.info !== undefined && object.info !== null) {\n      message.info = object.info;\n    } else {\n      message.info = \"\";\n    }\n\n    if (object.index !== undefined && object.index !== null) {\n      message.index = object.index;\n    } else {\n      message.index = long_1.default.ZERO;\n    }\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = object.key;\n    } else {\n      message.key = new Uint8Array();\n    }\n\n    if (object.value !== undefined && object.value !== null) {\n      message.value = object.value;\n    } else {\n      message.value = new Uint8Array();\n    }\n\n    if (object.proofOps !== undefined && object.proofOps !== null) {\n      message.proofOps = proof_1.ProofOps.fromPartial(object.proofOps);\n    } else {\n      message.proofOps = undefined;\n    }\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n\n    if (object.codespace !== undefined && object.codespace !== null) {\n      message.codespace = object.codespace;\n    } else {\n      message.codespace = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseBeginBlock = {};\nexports.ResponseBeginBlock = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    for (const v of message.events) {\n      exports.Event.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseBeginBlock);\n    message.events = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.events.push(exports.Event.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseBeginBlock);\n    message.events = [];\n\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(exports.Event.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.events) {\n      obj.events = message.events.map(e => e ? exports.Event.toJSON(e) : undefined);\n    } else {\n      obj.events = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseBeginBlock);\n    message.events = [];\n\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(exports.Event.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseCheckTx = {\n  code: 0,\n  log: \"\",\n  info: \"\",\n  gasWanted: long_1.default.ZERO,\n  gasUsed: long_1.default.ZERO,\n  codespace: \"\"\n};\nexports.ResponseCheckTx = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.code !== 0) {\n      writer.uint32(8).uint32(message.code);\n    }\n\n    if (message.data.length !== 0) {\n      writer.uint32(18).bytes(message.data);\n    }\n\n    if (message.log !== \"\") {\n      writer.uint32(26).string(message.log);\n    }\n\n    if (message.info !== \"\") {\n      writer.uint32(34).string(message.info);\n    }\n\n    if (!message.gasWanted.isZero()) {\n      writer.uint32(40).int64(message.gasWanted);\n    }\n\n    if (!message.gasUsed.isZero()) {\n      writer.uint32(48).int64(message.gasUsed);\n    }\n\n    for (const v of message.events) {\n      exports.Event.encode(v, writer.uint32(58).fork()).ldelim();\n    }\n\n    if (message.codespace !== \"\") {\n      writer.uint32(66).string(message.codespace);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseCheckTx);\n    message.events = [];\n    message.data = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.code = reader.uint32();\n          break;\n\n        case 2:\n          message.data = reader.bytes();\n          break;\n\n        case 3:\n          message.log = reader.string();\n          break;\n\n        case 4:\n          message.info = reader.string();\n          break;\n\n        case 5:\n          message.gasWanted = reader.int64();\n          break;\n\n        case 6:\n          message.gasUsed = reader.int64();\n          break;\n\n        case 7:\n          message.events.push(exports.Event.decode(reader, reader.uint32()));\n          break;\n\n        case 8:\n          message.codespace = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseCheckTx);\n    message.events = [];\n    message.data = new Uint8Array();\n\n    if (object.code !== undefined && object.code !== null) {\n      message.code = Number(object.code);\n    } else {\n      message.code = 0;\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n\n    if (object.log !== undefined && object.log !== null) {\n      message.log = String(object.log);\n    } else {\n      message.log = \"\";\n    }\n\n    if (object.info !== undefined && object.info !== null) {\n      message.info = String(object.info);\n    } else {\n      message.info = \"\";\n    }\n\n    if (object.gasWanted !== undefined && object.gasWanted !== null) {\n      message.gasWanted = long_1.default.fromString(object.gasWanted);\n    } else {\n      message.gasWanted = long_1.default.ZERO;\n    }\n\n    if (object.gasUsed !== undefined && object.gasUsed !== null) {\n      message.gasUsed = long_1.default.fromString(object.gasUsed);\n    } else {\n      message.gasUsed = long_1.default.ZERO;\n    }\n\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(exports.Event.fromJSON(e));\n      }\n    }\n\n    if (object.codespace !== undefined && object.codespace !== null) {\n      message.codespace = String(object.codespace);\n    } else {\n      message.codespace = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.code !== undefined && (obj.code = message.code);\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    message.log !== undefined && (obj.log = message.log);\n    message.info !== undefined && (obj.info = message.info);\n    message.gasWanted !== undefined && (obj.gasWanted = (message.gasWanted || long_1.default.ZERO).toString());\n    message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || long_1.default.ZERO).toString());\n\n    if (message.events) {\n      obj.events = message.events.map(e => e ? exports.Event.toJSON(e) : undefined);\n    } else {\n      obj.events = [];\n    }\n\n    message.codespace !== undefined && (obj.codespace = message.codespace);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseCheckTx);\n    message.events = [];\n\n    if (object.code !== undefined && object.code !== null) {\n      message.code = object.code;\n    } else {\n      message.code = 0;\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n\n    if (object.log !== undefined && object.log !== null) {\n      message.log = object.log;\n    } else {\n      message.log = \"\";\n    }\n\n    if (object.info !== undefined && object.info !== null) {\n      message.info = object.info;\n    } else {\n      message.info = \"\";\n    }\n\n    if (object.gasWanted !== undefined && object.gasWanted !== null) {\n      message.gasWanted = object.gasWanted;\n    } else {\n      message.gasWanted = long_1.default.ZERO;\n    }\n\n    if (object.gasUsed !== undefined && object.gasUsed !== null) {\n      message.gasUsed = object.gasUsed;\n    } else {\n      message.gasUsed = long_1.default.ZERO;\n    }\n\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(exports.Event.fromPartial(e));\n      }\n    }\n\n    if (object.codespace !== undefined && object.codespace !== null) {\n      message.codespace = object.codespace;\n    } else {\n      message.codespace = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseDeliverTx = {\n  code: 0,\n  log: \"\",\n  info: \"\",\n  gasWanted: long_1.default.ZERO,\n  gasUsed: long_1.default.ZERO,\n  codespace: \"\"\n};\nexports.ResponseDeliverTx = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.code !== 0) {\n      writer.uint32(8).uint32(message.code);\n    }\n\n    if (message.data.length !== 0) {\n      writer.uint32(18).bytes(message.data);\n    }\n\n    if (message.log !== \"\") {\n      writer.uint32(26).string(message.log);\n    }\n\n    if (message.info !== \"\") {\n      writer.uint32(34).string(message.info);\n    }\n\n    if (!message.gasWanted.isZero()) {\n      writer.uint32(40).int64(message.gasWanted);\n    }\n\n    if (!message.gasUsed.isZero()) {\n      writer.uint32(48).int64(message.gasUsed);\n    }\n\n    for (const v of message.events) {\n      exports.Event.encode(v, writer.uint32(58).fork()).ldelim();\n    }\n\n    if (message.codespace !== \"\") {\n      writer.uint32(66).string(message.codespace);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseDeliverTx);\n    message.events = [];\n    message.data = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.code = reader.uint32();\n          break;\n\n        case 2:\n          message.data = reader.bytes();\n          break;\n\n        case 3:\n          message.log = reader.string();\n          break;\n\n        case 4:\n          message.info = reader.string();\n          break;\n\n        case 5:\n          message.gasWanted = reader.int64();\n          break;\n\n        case 6:\n          message.gasUsed = reader.int64();\n          break;\n\n        case 7:\n          message.events.push(exports.Event.decode(reader, reader.uint32()));\n          break;\n\n        case 8:\n          message.codespace = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseDeliverTx);\n    message.events = [];\n    message.data = new Uint8Array();\n\n    if (object.code !== undefined && object.code !== null) {\n      message.code = Number(object.code);\n    } else {\n      message.code = 0;\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n\n    if (object.log !== undefined && object.log !== null) {\n      message.log = String(object.log);\n    } else {\n      message.log = \"\";\n    }\n\n    if (object.info !== undefined && object.info !== null) {\n      message.info = String(object.info);\n    } else {\n      message.info = \"\";\n    }\n\n    if (object.gasWanted !== undefined && object.gasWanted !== null) {\n      message.gasWanted = long_1.default.fromString(object.gasWanted);\n    } else {\n      message.gasWanted = long_1.default.ZERO;\n    }\n\n    if (object.gasUsed !== undefined && object.gasUsed !== null) {\n      message.gasUsed = long_1.default.fromString(object.gasUsed);\n    } else {\n      message.gasUsed = long_1.default.ZERO;\n    }\n\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(exports.Event.fromJSON(e));\n      }\n    }\n\n    if (object.codespace !== undefined && object.codespace !== null) {\n      message.codespace = String(object.codespace);\n    } else {\n      message.codespace = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.code !== undefined && (obj.code = message.code);\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    message.log !== undefined && (obj.log = message.log);\n    message.info !== undefined && (obj.info = message.info);\n    message.gasWanted !== undefined && (obj.gasWanted = (message.gasWanted || long_1.default.ZERO).toString());\n    message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || long_1.default.ZERO).toString());\n\n    if (message.events) {\n      obj.events = message.events.map(e => e ? exports.Event.toJSON(e) : undefined);\n    } else {\n      obj.events = [];\n    }\n\n    message.codespace !== undefined && (obj.codespace = message.codespace);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseDeliverTx);\n    message.events = [];\n\n    if (object.code !== undefined && object.code !== null) {\n      message.code = object.code;\n    } else {\n      message.code = 0;\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n\n    if (object.log !== undefined && object.log !== null) {\n      message.log = object.log;\n    } else {\n      message.log = \"\";\n    }\n\n    if (object.info !== undefined && object.info !== null) {\n      message.info = object.info;\n    } else {\n      message.info = \"\";\n    }\n\n    if (object.gasWanted !== undefined && object.gasWanted !== null) {\n      message.gasWanted = object.gasWanted;\n    } else {\n      message.gasWanted = long_1.default.ZERO;\n    }\n\n    if (object.gasUsed !== undefined && object.gasUsed !== null) {\n      message.gasUsed = object.gasUsed;\n    } else {\n      message.gasUsed = long_1.default.ZERO;\n    }\n\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(exports.Event.fromPartial(e));\n      }\n    }\n\n    if (object.codespace !== undefined && object.codespace !== null) {\n      message.codespace = object.codespace;\n    } else {\n      message.codespace = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseEndBlock = {};\nexports.ResponseEndBlock = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    for (const v of message.validatorUpdates) {\n      exports.ValidatorUpdate.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.consensusParamUpdates !== undefined) {\n      exports.ConsensusParams.encode(message.consensusParamUpdates, writer.uint32(18).fork()).ldelim();\n    }\n\n    for (const v of message.events) {\n      exports.Event.encode(v, writer.uint32(26).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseEndBlock);\n    message.validatorUpdates = [];\n    message.events = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.validatorUpdates.push(exports.ValidatorUpdate.decode(reader, reader.uint32()));\n          break;\n\n        case 2:\n          message.consensusParamUpdates = exports.ConsensusParams.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          message.events.push(exports.Event.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseEndBlock);\n    message.validatorUpdates = [];\n    message.events = [];\n\n    if (object.validatorUpdates !== undefined && object.validatorUpdates !== null) {\n      for (const e of object.validatorUpdates) {\n        message.validatorUpdates.push(exports.ValidatorUpdate.fromJSON(e));\n      }\n    }\n\n    if (object.consensusParamUpdates !== undefined && object.consensusParamUpdates !== null) {\n      message.consensusParamUpdates = exports.ConsensusParams.fromJSON(object.consensusParamUpdates);\n    } else {\n      message.consensusParamUpdates = undefined;\n    }\n\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(exports.Event.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.validatorUpdates) {\n      obj.validatorUpdates = message.validatorUpdates.map(e => e ? exports.ValidatorUpdate.toJSON(e) : undefined);\n    } else {\n      obj.validatorUpdates = [];\n    }\n\n    message.consensusParamUpdates !== undefined && (obj.consensusParamUpdates = message.consensusParamUpdates ? exports.ConsensusParams.toJSON(message.consensusParamUpdates) : undefined);\n\n    if (message.events) {\n      obj.events = message.events.map(e => e ? exports.Event.toJSON(e) : undefined);\n    } else {\n      obj.events = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseEndBlock);\n    message.validatorUpdates = [];\n    message.events = [];\n\n    if (object.validatorUpdates !== undefined && object.validatorUpdates !== null) {\n      for (const e of object.validatorUpdates) {\n        message.validatorUpdates.push(exports.ValidatorUpdate.fromPartial(e));\n      }\n    }\n\n    if (object.consensusParamUpdates !== undefined && object.consensusParamUpdates !== null) {\n      message.consensusParamUpdates = exports.ConsensusParams.fromPartial(object.consensusParamUpdates);\n    } else {\n      message.consensusParamUpdates = undefined;\n    }\n\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(exports.Event.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseCommit = {\n  retainHeight: long_1.default.ZERO\n};\nexports.ResponseCommit = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.data.length !== 0) {\n      writer.uint32(18).bytes(message.data);\n    }\n\n    if (!message.retainHeight.isZero()) {\n      writer.uint32(24).int64(message.retainHeight);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseCommit);\n    message.data = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 2:\n          message.data = reader.bytes();\n          break;\n\n        case 3:\n          message.retainHeight = reader.int64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseCommit);\n    message.data = new Uint8Array();\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n\n    if (object.retainHeight !== undefined && object.retainHeight !== null) {\n      message.retainHeight = long_1.default.fromString(object.retainHeight);\n    } else {\n      message.retainHeight = long_1.default.ZERO;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    message.retainHeight !== undefined && (obj.retainHeight = (message.retainHeight || long_1.default.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseCommit);\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n\n    if (object.retainHeight !== undefined && object.retainHeight !== null) {\n      message.retainHeight = object.retainHeight;\n    } else {\n      message.retainHeight = long_1.default.ZERO;\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseListSnapshots = {};\nexports.ResponseListSnapshots = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    for (const v of message.snapshots) {\n      exports.Snapshot.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseListSnapshots);\n    message.snapshots = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.snapshots.push(exports.Snapshot.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseListSnapshots);\n    message.snapshots = [];\n\n    if (object.snapshots !== undefined && object.snapshots !== null) {\n      for (const e of object.snapshots) {\n        message.snapshots.push(exports.Snapshot.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.snapshots) {\n      obj.snapshots = message.snapshots.map(e => e ? exports.Snapshot.toJSON(e) : undefined);\n    } else {\n      obj.snapshots = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseListSnapshots);\n    message.snapshots = [];\n\n    if (object.snapshots !== undefined && object.snapshots !== null) {\n      for (const e of object.snapshots) {\n        message.snapshots.push(exports.Snapshot.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseOfferSnapshot = {\n  result: 0\n};\nexports.ResponseOfferSnapshot = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.result !== 0) {\n      writer.uint32(8).int32(message.result);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseOfferSnapshot);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.result = reader.int32();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseOfferSnapshot);\n\n    if (object.result !== undefined && object.result !== null) {\n      message.result = responseOfferSnapshot_ResultFromJSON(object.result);\n    } else {\n      message.result = 0;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.result !== undefined && (obj.result = responseOfferSnapshot_ResultToJSON(message.result));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseOfferSnapshot);\n\n    if (object.result !== undefined && object.result !== null) {\n      message.result = object.result;\n    } else {\n      message.result = 0;\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseLoadSnapshotChunk = {};\nexports.ResponseLoadSnapshotChunk = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.chunk.length !== 0) {\n      writer.uint32(10).bytes(message.chunk);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseLoadSnapshotChunk);\n    message.chunk = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.chunk = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseLoadSnapshotChunk);\n    message.chunk = new Uint8Array();\n\n    if (object.chunk !== undefined && object.chunk !== null) {\n      message.chunk = bytesFromBase64(object.chunk);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.chunk !== undefined && (obj.chunk = base64FromBytes(message.chunk !== undefined ? message.chunk : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseLoadSnapshotChunk);\n\n    if (object.chunk !== undefined && object.chunk !== null) {\n      message.chunk = object.chunk;\n    } else {\n      message.chunk = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseResponseApplySnapshotChunk = {\n  result: 0,\n  refetchChunks: 0,\n  rejectSenders: \"\"\n};\nexports.ResponseApplySnapshotChunk = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.result !== 0) {\n      writer.uint32(8).int32(message.result);\n    }\n\n    writer.uint32(18).fork();\n\n    for (const v of message.refetchChunks) {\n      writer.uint32(v);\n    }\n\n    writer.ldelim();\n\n    for (const v of message.rejectSenders) {\n      writer.uint32(26).string(v);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResponseApplySnapshotChunk);\n    message.refetchChunks = [];\n    message.rejectSenders = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.result = reader.int32();\n          break;\n\n        case 2:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) {\n              message.refetchChunks.push(reader.uint32());\n            }\n          } else {\n            message.refetchChunks.push(reader.uint32());\n          }\n\n          break;\n\n        case 3:\n          message.rejectSenders.push(reader.string());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResponseApplySnapshotChunk);\n    message.refetchChunks = [];\n    message.rejectSenders = [];\n\n    if (object.result !== undefined && object.result !== null) {\n      message.result = responseApplySnapshotChunk_ResultFromJSON(object.result);\n    } else {\n      message.result = 0;\n    }\n\n    if (object.refetchChunks !== undefined && object.refetchChunks !== null) {\n      for (const e of object.refetchChunks) {\n        message.refetchChunks.push(Number(e));\n      }\n    }\n\n    if (object.rejectSenders !== undefined && object.rejectSenders !== null) {\n      for (const e of object.rejectSenders) {\n        message.rejectSenders.push(String(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.result !== undefined && (obj.result = responseApplySnapshotChunk_ResultToJSON(message.result));\n\n    if (message.refetchChunks) {\n      obj.refetchChunks = message.refetchChunks.map(e => e);\n    } else {\n      obj.refetchChunks = [];\n    }\n\n    if (message.rejectSenders) {\n      obj.rejectSenders = message.rejectSenders.map(e => e);\n    } else {\n      obj.rejectSenders = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResponseApplySnapshotChunk);\n    message.refetchChunks = [];\n    message.rejectSenders = [];\n\n    if (object.result !== undefined && object.result !== null) {\n      message.result = object.result;\n    } else {\n      message.result = 0;\n    }\n\n    if (object.refetchChunks !== undefined && object.refetchChunks !== null) {\n      for (const e of object.refetchChunks) {\n        message.refetchChunks.push(e);\n      }\n    }\n\n    if (object.rejectSenders !== undefined && object.rejectSenders !== null) {\n      for (const e of object.rejectSenders) {\n        message.rejectSenders.push(e);\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseConsensusParams = {};\nexports.ConsensusParams = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.block !== undefined) {\n      exports.BlockParams.encode(message.block, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.evidence !== undefined) {\n      params_1.EvidenceParams.encode(message.evidence, writer.uint32(18).fork()).ldelim();\n    }\n\n    if (message.validator !== undefined) {\n      params_1.ValidatorParams.encode(message.validator, writer.uint32(26).fork()).ldelim();\n    }\n\n    if (message.version !== undefined) {\n      params_1.VersionParams.encode(message.version, writer.uint32(34).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseConsensusParams);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.block = exports.BlockParams.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.evidence = params_1.EvidenceParams.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          message.validator = params_1.ValidatorParams.decode(reader, reader.uint32());\n          break;\n\n        case 4:\n          message.version = params_1.VersionParams.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseConsensusParams);\n\n    if (object.block !== undefined && object.block !== null) {\n      message.block = exports.BlockParams.fromJSON(object.block);\n    } else {\n      message.block = undefined;\n    }\n\n    if (object.evidence !== undefined && object.evidence !== null) {\n      message.evidence = params_1.EvidenceParams.fromJSON(object.evidence);\n    } else {\n      message.evidence = undefined;\n    }\n\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = params_1.ValidatorParams.fromJSON(object.validator);\n    } else {\n      message.validator = undefined;\n    }\n\n    if (object.version !== undefined && object.version !== null) {\n      message.version = params_1.VersionParams.fromJSON(object.version);\n    } else {\n      message.version = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.block !== undefined && (obj.block = message.block ? exports.BlockParams.toJSON(message.block) : undefined);\n    message.evidence !== undefined && (obj.evidence = message.evidence ? params_1.EvidenceParams.toJSON(message.evidence) : undefined);\n    message.validator !== undefined && (obj.validator = message.validator ? params_1.ValidatorParams.toJSON(message.validator) : undefined);\n    message.version !== undefined && (obj.version = message.version ? params_1.VersionParams.toJSON(message.version) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseConsensusParams);\n\n    if (object.block !== undefined && object.block !== null) {\n      message.block = exports.BlockParams.fromPartial(object.block);\n    } else {\n      message.block = undefined;\n    }\n\n    if (object.evidence !== undefined && object.evidence !== null) {\n      message.evidence = params_1.EvidenceParams.fromPartial(object.evidence);\n    } else {\n      message.evidence = undefined;\n    }\n\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = params_1.ValidatorParams.fromPartial(object.validator);\n    } else {\n      message.validator = undefined;\n    }\n\n    if (object.version !== undefined && object.version !== null) {\n      message.version = params_1.VersionParams.fromPartial(object.version);\n    } else {\n      message.version = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseBlockParams = {\n  maxBytes: long_1.default.ZERO,\n  maxGas: long_1.default.ZERO\n};\nexports.BlockParams = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (!message.maxBytes.isZero()) {\n      writer.uint32(8).int64(message.maxBytes);\n    }\n\n    if (!message.maxGas.isZero()) {\n      writer.uint32(16).int64(message.maxGas);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseBlockParams);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.maxBytes = reader.int64();\n          break;\n\n        case 2:\n          message.maxGas = reader.int64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseBlockParams);\n\n    if (object.maxBytes !== undefined && object.maxBytes !== null) {\n      message.maxBytes = long_1.default.fromString(object.maxBytes);\n    } else {\n      message.maxBytes = long_1.default.ZERO;\n    }\n\n    if (object.maxGas !== undefined && object.maxGas !== null) {\n      message.maxGas = long_1.default.fromString(object.maxGas);\n    } else {\n      message.maxGas = long_1.default.ZERO;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.maxBytes !== undefined && (obj.maxBytes = (message.maxBytes || long_1.default.ZERO).toString());\n    message.maxGas !== undefined && (obj.maxGas = (message.maxGas || long_1.default.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseBlockParams);\n\n    if (object.maxBytes !== undefined && object.maxBytes !== null) {\n      message.maxBytes = object.maxBytes;\n    } else {\n      message.maxBytes = long_1.default.ZERO;\n    }\n\n    if (object.maxGas !== undefined && object.maxGas !== null) {\n      message.maxGas = object.maxGas;\n    } else {\n      message.maxGas = long_1.default.ZERO;\n    }\n\n    return message;\n  }\n\n};\nconst baseLastCommitInfo = {\n  round: 0\n};\nexports.LastCommitInfo = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.round !== 0) {\n      writer.uint32(8).int32(message.round);\n    }\n\n    for (const v of message.votes) {\n      exports.VoteInfo.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseLastCommitInfo);\n    message.votes = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.round = reader.int32();\n          break;\n\n        case 2:\n          message.votes.push(exports.VoteInfo.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseLastCommitInfo);\n    message.votes = [];\n\n    if (object.round !== undefined && object.round !== null) {\n      message.round = Number(object.round);\n    } else {\n      message.round = 0;\n    }\n\n    if (object.votes !== undefined && object.votes !== null) {\n      for (const e of object.votes) {\n        message.votes.push(exports.VoteInfo.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.round !== undefined && (obj.round = message.round);\n\n    if (message.votes) {\n      obj.votes = message.votes.map(e => e ? exports.VoteInfo.toJSON(e) : undefined);\n    } else {\n      obj.votes = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseLastCommitInfo);\n    message.votes = [];\n\n    if (object.round !== undefined && object.round !== null) {\n      message.round = object.round;\n    } else {\n      message.round = 0;\n    }\n\n    if (object.votes !== undefined && object.votes !== null) {\n      for (const e of object.votes) {\n        message.votes.push(exports.VoteInfo.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseEvent = {\n  type: \"\"\n};\nexports.Event = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.type !== \"\") {\n      writer.uint32(10).string(message.type);\n    }\n\n    for (const v of message.attributes) {\n      exports.EventAttribute.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseEvent);\n    message.attributes = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.string();\n          break;\n\n        case 2:\n          message.attributes.push(exports.EventAttribute.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseEvent);\n    message.attributes = [];\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = String(object.type);\n    } else {\n      message.type = \"\";\n    }\n\n    if (object.attributes !== undefined && object.attributes !== null) {\n      for (const e of object.attributes) {\n        message.attributes.push(exports.EventAttribute.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.type !== undefined && (obj.type = message.type);\n\n    if (message.attributes) {\n      obj.attributes = message.attributes.map(e => e ? exports.EventAttribute.toJSON(e) : undefined);\n    } else {\n      obj.attributes = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseEvent);\n    message.attributes = [];\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = object.type;\n    } else {\n      message.type = \"\";\n    }\n\n    if (object.attributes !== undefined && object.attributes !== null) {\n      for (const e of object.attributes) {\n        message.attributes.push(exports.EventAttribute.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseEventAttribute = {\n  index: false\n};\nexports.EventAttribute = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n\n    if (message.value.length !== 0) {\n      writer.uint32(18).bytes(message.value);\n    }\n\n    if (message.index === true) {\n      writer.uint32(24).bool(message.index);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseEventAttribute);\n    message.key = new Uint8Array();\n    message.value = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n\n        case 2:\n          message.value = reader.bytes();\n          break;\n\n        case 3:\n          message.index = reader.bool();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseEventAttribute);\n    message.key = new Uint8Array();\n    message.value = new Uint8Array();\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = bytesFromBase64(object.key);\n    }\n\n    if (object.value !== undefined && object.value !== null) {\n      message.value = bytesFromBase64(object.value);\n    }\n\n    if (object.index !== undefined && object.index !== null) {\n      message.index = Boolean(object.index);\n    } else {\n      message.index = false;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.value !== undefined && (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));\n    message.index !== undefined && (obj.index = message.index);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseEventAttribute);\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = object.key;\n    } else {\n      message.key = new Uint8Array();\n    }\n\n    if (object.value !== undefined && object.value !== null) {\n      message.value = object.value;\n    } else {\n      message.value = new Uint8Array();\n    }\n\n    if (object.index !== undefined && object.index !== null) {\n      message.index = object.index;\n    } else {\n      message.index = false;\n    }\n\n    return message;\n  }\n\n};\nconst baseTxResult = {\n  height: long_1.default.ZERO,\n  index: 0\n};\nexports.TxResult = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (!message.height.isZero()) {\n      writer.uint32(8).int64(message.height);\n    }\n\n    if (message.index !== 0) {\n      writer.uint32(16).uint32(message.index);\n    }\n\n    if (message.tx.length !== 0) {\n      writer.uint32(26).bytes(message.tx);\n    }\n\n    if (message.result !== undefined) {\n      exports.ResponseDeliverTx.encode(message.result, writer.uint32(34).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseTxResult);\n    message.tx = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.height = reader.int64();\n          break;\n\n        case 2:\n          message.index = reader.uint32();\n          break;\n\n        case 3:\n          message.tx = reader.bytes();\n          break;\n\n        case 4:\n          message.result = exports.ResponseDeliverTx.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseTxResult);\n    message.tx = new Uint8Array();\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = long_1.default.fromString(object.height);\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n\n    if (object.index !== undefined && object.index !== null) {\n      message.index = Number(object.index);\n    } else {\n      message.index = 0;\n    }\n\n    if (object.tx !== undefined && object.tx !== null) {\n      message.tx = bytesFromBase64(object.tx);\n    }\n\n    if (object.result !== undefined && object.result !== null) {\n      message.result = exports.ResponseDeliverTx.fromJSON(object.result);\n    } else {\n      message.result = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n    message.index !== undefined && (obj.index = message.index);\n    message.tx !== undefined && (obj.tx = base64FromBytes(message.tx !== undefined ? message.tx : new Uint8Array()));\n    message.result !== undefined && (obj.result = message.result ? exports.ResponseDeliverTx.toJSON(message.result) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseTxResult);\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n\n    if (object.index !== undefined && object.index !== null) {\n      message.index = object.index;\n    } else {\n      message.index = 0;\n    }\n\n    if (object.tx !== undefined && object.tx !== null) {\n      message.tx = object.tx;\n    } else {\n      message.tx = new Uint8Array();\n    }\n\n    if (object.result !== undefined && object.result !== null) {\n      message.result = exports.ResponseDeliverTx.fromPartial(object.result);\n    } else {\n      message.result = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseValidator = {\n  power: long_1.default.ZERO\n};\nexports.Validator = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.address.length !== 0) {\n      writer.uint32(10).bytes(message.address);\n    }\n\n    if (!message.power.isZero()) {\n      writer.uint32(24).int64(message.power);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseValidator);\n    message.address = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.bytes();\n          break;\n\n        case 3:\n          message.power = reader.int64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseValidator);\n    message.address = new Uint8Array();\n\n    if (object.address !== undefined && object.address !== null) {\n      message.address = bytesFromBase64(object.address);\n    }\n\n    if (object.power !== undefined && object.power !== null) {\n      message.power = long_1.default.fromString(object.power);\n    } else {\n      message.power = long_1.default.ZERO;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.address !== undefined && (obj.address = base64FromBytes(message.address !== undefined ? message.address : new Uint8Array()));\n    message.power !== undefined && (obj.power = (message.power || long_1.default.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseValidator);\n\n    if (object.address !== undefined && object.address !== null) {\n      message.address = object.address;\n    } else {\n      message.address = new Uint8Array();\n    }\n\n    if (object.power !== undefined && object.power !== null) {\n      message.power = object.power;\n    } else {\n      message.power = long_1.default.ZERO;\n    }\n\n    return message;\n  }\n\n};\nconst baseValidatorUpdate = {\n  power: long_1.default.ZERO\n};\nexports.ValidatorUpdate = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.pubKey !== undefined) {\n      keys_1.PublicKey.encode(message.pubKey, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (!message.power.isZero()) {\n      writer.uint32(16).int64(message.power);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseValidatorUpdate);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.pubKey = keys_1.PublicKey.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.power = reader.int64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseValidatorUpdate);\n\n    if (object.pubKey !== undefined && object.pubKey !== null) {\n      message.pubKey = keys_1.PublicKey.fromJSON(object.pubKey);\n    } else {\n      message.pubKey = undefined;\n    }\n\n    if (object.power !== undefined && object.power !== null) {\n      message.power = long_1.default.fromString(object.power);\n    } else {\n      message.power = long_1.default.ZERO;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.pubKey !== undefined && (obj.pubKey = message.pubKey ? keys_1.PublicKey.toJSON(message.pubKey) : undefined);\n    message.power !== undefined && (obj.power = (message.power || long_1.default.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseValidatorUpdate);\n\n    if (object.pubKey !== undefined && object.pubKey !== null) {\n      message.pubKey = keys_1.PublicKey.fromPartial(object.pubKey);\n    } else {\n      message.pubKey = undefined;\n    }\n\n    if (object.power !== undefined && object.power !== null) {\n      message.power = object.power;\n    } else {\n      message.power = long_1.default.ZERO;\n    }\n\n    return message;\n  }\n\n};\nconst baseVoteInfo = {\n  signedLastBlock: false\n};\nexports.VoteInfo = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.validator !== undefined) {\n      exports.Validator.encode(message.validator, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.signedLastBlock === true) {\n      writer.uint32(16).bool(message.signedLastBlock);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseVoteInfo);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.validator = exports.Validator.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.signedLastBlock = reader.bool();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseVoteInfo);\n\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = exports.Validator.fromJSON(object.validator);\n    } else {\n      message.validator = undefined;\n    }\n\n    if (object.signedLastBlock !== undefined && object.signedLastBlock !== null) {\n      message.signedLastBlock = Boolean(object.signedLastBlock);\n    } else {\n      message.signedLastBlock = false;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.validator !== undefined && (obj.validator = message.validator ? exports.Validator.toJSON(message.validator) : undefined);\n    message.signedLastBlock !== undefined && (obj.signedLastBlock = message.signedLastBlock);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseVoteInfo);\n\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = exports.Validator.fromPartial(object.validator);\n    } else {\n      message.validator = undefined;\n    }\n\n    if (object.signedLastBlock !== undefined && object.signedLastBlock !== null) {\n      message.signedLastBlock = object.signedLastBlock;\n    } else {\n      message.signedLastBlock = false;\n    }\n\n    return message;\n  }\n\n};\nconst baseEvidence = {\n  type: 0,\n  height: long_1.default.ZERO,\n  totalVotingPower: long_1.default.ZERO\n};\nexports.Evidence = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.type !== 0) {\n      writer.uint32(8).int32(message.type);\n    }\n\n    if (message.validator !== undefined) {\n      exports.Validator.encode(message.validator, writer.uint32(18).fork()).ldelim();\n    }\n\n    if (!message.height.isZero()) {\n      writer.uint32(24).int64(message.height);\n    }\n\n    if (message.time !== undefined) {\n      timestamp_1.Timestamp.encode(toTimestamp(message.time), writer.uint32(34).fork()).ldelim();\n    }\n\n    if (!message.totalVotingPower.isZero()) {\n      writer.uint32(40).int64(message.totalVotingPower);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseEvidence);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32();\n          break;\n\n        case 2:\n          message.validator = exports.Validator.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          message.height = reader.int64();\n          break;\n\n        case 4:\n          message.time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n          break;\n\n        case 5:\n          message.totalVotingPower = reader.int64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseEvidence);\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = evidenceTypeFromJSON(object.type);\n    } else {\n      message.type = 0;\n    }\n\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = exports.Validator.fromJSON(object.validator);\n    } else {\n      message.validator = undefined;\n    }\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = long_1.default.fromString(object.height);\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n\n    if (object.time !== undefined && object.time !== null) {\n      message.time = fromJsonTimestamp(object.time);\n    } else {\n      message.time = undefined;\n    }\n\n    if (object.totalVotingPower !== undefined && object.totalVotingPower !== null) {\n      message.totalVotingPower = long_1.default.fromString(object.totalVotingPower);\n    } else {\n      message.totalVotingPower = long_1.default.ZERO;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.type !== undefined && (obj.type = evidenceTypeToJSON(message.type));\n    message.validator !== undefined && (obj.validator = message.validator ? exports.Validator.toJSON(message.validator) : undefined);\n    message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n    message.time !== undefined && (obj.time = message.time.toISOString());\n    message.totalVotingPower !== undefined && (obj.totalVotingPower = (message.totalVotingPower || long_1.default.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseEvidence);\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = object.type;\n    } else {\n      message.type = 0;\n    }\n\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = exports.Validator.fromPartial(object.validator);\n    } else {\n      message.validator = undefined;\n    }\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n\n    if (object.time !== undefined && object.time !== null) {\n      message.time = object.time;\n    } else {\n      message.time = undefined;\n    }\n\n    if (object.totalVotingPower !== undefined && object.totalVotingPower !== null) {\n      message.totalVotingPower = object.totalVotingPower;\n    } else {\n      message.totalVotingPower = long_1.default.ZERO;\n    }\n\n    return message;\n  }\n\n};\nconst baseSnapshot = {\n  height: long_1.default.UZERO,\n  format: 0,\n  chunks: 0\n};\nexports.Snapshot = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (!message.height.isZero()) {\n      writer.uint32(8).uint64(message.height);\n    }\n\n    if (message.format !== 0) {\n      writer.uint32(16).uint32(message.format);\n    }\n\n    if (message.chunks !== 0) {\n      writer.uint32(24).uint32(message.chunks);\n    }\n\n    if (message.hash.length !== 0) {\n      writer.uint32(34).bytes(message.hash);\n    }\n\n    if (message.metadata.length !== 0) {\n      writer.uint32(42).bytes(message.metadata);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseSnapshot);\n    message.hash = new Uint8Array();\n    message.metadata = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.height = reader.uint64();\n          break;\n\n        case 2:\n          message.format = reader.uint32();\n          break;\n\n        case 3:\n          message.chunks = reader.uint32();\n          break;\n\n        case 4:\n          message.hash = reader.bytes();\n          break;\n\n        case 5:\n          message.metadata = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseSnapshot);\n    message.hash = new Uint8Array();\n    message.metadata = new Uint8Array();\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = long_1.default.fromString(object.height);\n    } else {\n      message.height = long_1.default.UZERO;\n    }\n\n    if (object.format !== undefined && object.format !== null) {\n      message.format = Number(object.format);\n    } else {\n      message.format = 0;\n    }\n\n    if (object.chunks !== undefined && object.chunks !== null) {\n      message.chunks = Number(object.chunks);\n    } else {\n      message.chunks = 0;\n    }\n\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = bytesFromBase64(object.hash);\n    }\n\n    if (object.metadata !== undefined && object.metadata !== null) {\n      message.metadata = bytesFromBase64(object.metadata);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.height !== undefined && (obj.height = (message.height || long_1.default.UZERO).toString());\n    message.format !== undefined && (obj.format = message.format);\n    message.chunks !== undefined && (obj.chunks = message.chunks);\n    message.hash !== undefined && (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n    message.metadata !== undefined && (obj.metadata = base64FromBytes(message.metadata !== undefined ? message.metadata : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseSnapshot);\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = long_1.default.UZERO;\n    }\n\n    if (object.format !== undefined && object.format !== null) {\n      message.format = object.format;\n    } else {\n      message.format = 0;\n    }\n\n    if (object.chunks !== undefined && object.chunks !== null) {\n      message.chunks = object.chunks;\n    } else {\n      message.chunks = 0;\n    }\n\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = object.hash;\n    } else {\n      message.hash = new Uint8Array();\n    }\n\n    if (object.metadata !== undefined && object.metadata !== null) {\n      message.metadata = object.metadata;\n    } else {\n      message.metadata = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\n\nclass ABCIApplicationClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n    this.Echo = this.Echo.bind(this);\n    this.Flush = this.Flush.bind(this);\n    this.Info = this.Info.bind(this);\n    this.SetOption = this.SetOption.bind(this);\n    this.DeliverTx = this.DeliverTx.bind(this);\n    this.CheckTx = this.CheckTx.bind(this);\n    this.Query = this.Query.bind(this);\n    this.Commit = this.Commit.bind(this);\n    this.InitChain = this.InitChain.bind(this);\n    this.BeginBlock = this.BeginBlock.bind(this);\n    this.EndBlock = this.EndBlock.bind(this);\n    this.ListSnapshots = this.ListSnapshots.bind(this);\n    this.OfferSnapshot = this.OfferSnapshot.bind(this);\n    this.LoadSnapshotChunk = this.LoadSnapshotChunk.bind(this);\n    this.ApplySnapshotChunk = this.ApplySnapshotChunk.bind(this);\n  }\n\n  Echo(request) {\n    const data = exports.RequestEcho.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Echo\", data);\n    return promise.then(data => exports.ResponseEcho.decode(new minimal_1.default.Reader(data)));\n  }\n\n  Flush(request) {\n    const data = exports.RequestFlush.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Flush\", data);\n    return promise.then(data => exports.ResponseFlush.decode(new minimal_1.default.Reader(data)));\n  }\n\n  Info(request) {\n    const data = exports.RequestInfo.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Info\", data);\n    return promise.then(data => exports.ResponseInfo.decode(new minimal_1.default.Reader(data)));\n  }\n\n  SetOption(request) {\n    const data = exports.RequestSetOption.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"SetOption\", data);\n    return promise.then(data => exports.ResponseSetOption.decode(new minimal_1.default.Reader(data)));\n  }\n\n  DeliverTx(request) {\n    const data = exports.RequestDeliverTx.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"DeliverTx\", data);\n    return promise.then(data => exports.ResponseDeliverTx.decode(new minimal_1.default.Reader(data)));\n  }\n\n  CheckTx(request) {\n    const data = exports.RequestCheckTx.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"CheckTx\", data);\n    return promise.then(data => exports.ResponseCheckTx.decode(new minimal_1.default.Reader(data)));\n  }\n\n  Query(request) {\n    const data = exports.RequestQuery.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Query\", data);\n    return promise.then(data => exports.ResponseQuery.decode(new minimal_1.default.Reader(data)));\n  }\n\n  Commit(request) {\n    const data = exports.RequestCommit.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Commit\", data);\n    return promise.then(data => exports.ResponseCommit.decode(new minimal_1.default.Reader(data)));\n  }\n\n  InitChain(request) {\n    const data = exports.RequestInitChain.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"InitChain\", data);\n    return promise.then(data => exports.ResponseInitChain.decode(new minimal_1.default.Reader(data)));\n  }\n\n  BeginBlock(request) {\n    const data = exports.RequestBeginBlock.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"BeginBlock\", data);\n    return promise.then(data => exports.ResponseBeginBlock.decode(new minimal_1.default.Reader(data)));\n  }\n\n  EndBlock(request) {\n    const data = exports.RequestEndBlock.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"EndBlock\", data);\n    return promise.then(data => exports.ResponseEndBlock.decode(new minimal_1.default.Reader(data)));\n  }\n\n  ListSnapshots(request) {\n    const data = exports.RequestListSnapshots.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"ListSnapshots\", data);\n    return promise.then(data => exports.ResponseListSnapshots.decode(new minimal_1.default.Reader(data)));\n  }\n\n  OfferSnapshot(request) {\n    const data = exports.RequestOfferSnapshot.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"OfferSnapshot\", data);\n    return promise.then(data => exports.ResponseOfferSnapshot.decode(new minimal_1.default.Reader(data)));\n  }\n\n  LoadSnapshotChunk(request) {\n    const data = exports.RequestLoadSnapshotChunk.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"LoadSnapshotChunk\", data);\n    return promise.then(data => exports.ResponseLoadSnapshotChunk.decode(new minimal_1.default.Reader(data)));\n  }\n\n  ApplySnapshotChunk(request) {\n    const data = exports.RequestApplySnapshotChunk.encode(request).finish();\n    const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"ApplySnapshotChunk\", data);\n    return promise.then(data => exports.ResponseApplySnapshotChunk.decode(new minimal_1.default.Reader(data)));\n  }\n\n}\n\nexports.ABCIApplicationClientImpl = ABCIApplicationClientImpl;\n\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\n\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n\n  return arr;\n}\n\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\n\nfunction base64FromBytes(arr) {\n  const bin = [];\n\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n\n  return btoa(bin.join(\"\"));\n}\n\nfunction toTimestamp(date) {\n  const seconds = numberToLong(date.getTime() / 1000);\n  const nanos = date.getTime() % 1000 * 1000000;\n  return {\n    seconds,\n    nanos\n  };\n}\n\nfunction fromTimestamp(t) {\n  let millis = t.seconds.toNumber() * 1000;\n  millis += t.nanos / 1000000;\n  return new Date(millis);\n}\n\nfunction fromJsonTimestamp(o) {\n  if (o instanceof Date) {\n    return o;\n  } else if (typeof o === \"string\") {\n    return new Date(o);\n  } else {\n    return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n  }\n}\n\nfunction numberToLong(number) {\n  return long_1.default.fromNumber(number);\n}\n\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":{"version":3,"sources":["../../../src/tendermint/abci/types.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ABCIApplicationClientImpl = exports.Snapshot = exports.Evidence = exports.VoteInfo = exports.ValidatorUpdate = exports.Validator = exports.TxResult = exports.EventAttribute = exports.Event = exports.LastCommitInfo = exports.BlockParams = exports.ConsensusParams = exports.ResponseApplySnapshotChunk = exports.ResponseLoadSnapshotChunk = exports.ResponseOfferSnapshot = exports.ResponseListSnapshots = exports.ResponseCommit = exports.ResponseEndBlock = exports.ResponseDeliverTx = exports.ResponseCheckTx = exports.ResponseBeginBlock = exports.ResponseQuery = exports.ResponseInitChain = exports.ResponseSetOption = exports.ResponseInfo = exports.ResponseFlush = exports.ResponseEcho = exports.ResponseException = exports.Response = exports.RequestApplySnapshotChunk = exports.RequestLoadSnapshotChunk = exports.RequestOfferSnapshot = exports.RequestListSnapshots = exports.RequestCommit = exports.RequestEndBlock = exports.RequestDeliverTx = exports.RequestCheckTx = exports.RequestBeginBlock = exports.RequestQuery = exports.RequestInitChain = exports.RequestSetOption = exports.RequestInfo = exports.RequestFlush = exports.RequestEcho = exports.Request = exports.responseApplySnapshotChunk_ResultToJSON = exports.responseApplySnapshotChunk_ResultFromJSON = exports.ResponseApplySnapshotChunk_Result = exports.responseOfferSnapshot_ResultToJSON = exports.responseOfferSnapshot_ResultFromJSON = exports.ResponseOfferSnapshot_Result = exports.evidenceTypeToJSON = exports.evidenceTypeFromJSON = exports.EvidenceType = exports.checkTxTypeToJSON = exports.checkTxTypeFromJSON = exports.CheckTxType = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst types_1 = require(\"../../tendermint/types/types\");\nconst proof_1 = require(\"../../tendermint/crypto/proof\");\nconst params_1 = require(\"../../tendermint/types/params\");\nconst keys_1 = require(\"../../tendermint/crypto/keys\");\nconst timestamp_1 = require(\"../../google/protobuf/timestamp\");\nexports.protobufPackage = \"tendermint.abci\";\nvar CheckTxType;\n(function (CheckTxType) {\n    CheckTxType[CheckTxType[\"NEW\"] = 0] = \"NEW\";\n    CheckTxType[CheckTxType[\"RECHECK\"] = 1] = \"RECHECK\";\n    CheckTxType[CheckTxType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(CheckTxType = exports.CheckTxType || (exports.CheckTxType = {}));\nfunction checkTxTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"NEW\":\n            return CheckTxType.NEW;\n        case 1:\n        case \"RECHECK\":\n            return CheckTxType.RECHECK;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return CheckTxType.UNRECOGNIZED;\n    }\n}\nexports.checkTxTypeFromJSON = checkTxTypeFromJSON;\nfunction checkTxTypeToJSON(object) {\n    switch (object) {\n        case CheckTxType.NEW:\n            return \"NEW\";\n        case CheckTxType.RECHECK:\n            return \"RECHECK\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.checkTxTypeToJSON = checkTxTypeToJSON;\nvar EvidenceType;\n(function (EvidenceType) {\n    EvidenceType[EvidenceType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    EvidenceType[EvidenceType[\"DUPLICATE_VOTE\"] = 1] = \"DUPLICATE_VOTE\";\n    EvidenceType[EvidenceType[\"LIGHT_CLIENT_ATTACK\"] = 2] = \"LIGHT_CLIENT_ATTACK\";\n    EvidenceType[EvidenceType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EvidenceType = exports.EvidenceType || (exports.EvidenceType = {}));\nfunction evidenceTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"UNKNOWN\":\n            return EvidenceType.UNKNOWN;\n        case 1:\n        case \"DUPLICATE_VOTE\":\n            return EvidenceType.DUPLICATE_VOTE;\n        case 2:\n        case \"LIGHT_CLIENT_ATTACK\":\n            return EvidenceType.LIGHT_CLIENT_ATTACK;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return EvidenceType.UNRECOGNIZED;\n    }\n}\nexports.evidenceTypeFromJSON = evidenceTypeFromJSON;\nfunction evidenceTypeToJSON(object) {\n    switch (object) {\n        case EvidenceType.UNKNOWN:\n            return \"UNKNOWN\";\n        case EvidenceType.DUPLICATE_VOTE:\n            return \"DUPLICATE_VOTE\";\n        case EvidenceType.LIGHT_CLIENT_ATTACK:\n            return \"LIGHT_CLIENT_ATTACK\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.evidenceTypeToJSON = evidenceTypeToJSON;\nvar ResponseOfferSnapshot_Result;\n(function (ResponseOfferSnapshot_Result) {\n    /** UNKNOWN - Unknown result, abort all snapshot restoration */\n    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    /** ACCEPT - Snapshot accepted, apply chunks */\n    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"ACCEPT\"] = 1] = \"ACCEPT\";\n    /** ABORT - Abort all snapshot restoration */\n    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"ABORT\"] = 2] = \"ABORT\";\n    /** REJECT - Reject this specific snapshot, try others */\n    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"REJECT\"] = 3] = \"REJECT\";\n    /** REJECT_FORMAT - Reject all snapshots of this format, try others */\n    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"REJECT_FORMAT\"] = 4] = \"REJECT_FORMAT\";\n    /** REJECT_SENDER - Reject all snapshots from the sender(s), try others */\n    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"REJECT_SENDER\"] = 5] = \"REJECT_SENDER\";\n    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ResponseOfferSnapshot_Result = exports.ResponseOfferSnapshot_Result || (exports.ResponseOfferSnapshot_Result = {}));\nfunction responseOfferSnapshot_ResultFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"UNKNOWN\":\n            return ResponseOfferSnapshot_Result.UNKNOWN;\n        case 1:\n        case \"ACCEPT\":\n            return ResponseOfferSnapshot_Result.ACCEPT;\n        case 2:\n        case \"ABORT\":\n            return ResponseOfferSnapshot_Result.ABORT;\n        case 3:\n        case \"REJECT\":\n            return ResponseOfferSnapshot_Result.REJECT;\n        case 4:\n        case \"REJECT_FORMAT\":\n            return ResponseOfferSnapshot_Result.REJECT_FORMAT;\n        case 5:\n        case \"REJECT_SENDER\":\n            return ResponseOfferSnapshot_Result.REJECT_SENDER;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ResponseOfferSnapshot_Result.UNRECOGNIZED;\n    }\n}\nexports.responseOfferSnapshot_ResultFromJSON = responseOfferSnapshot_ResultFromJSON;\nfunction responseOfferSnapshot_ResultToJSON(object) {\n    switch (object) {\n        case ResponseOfferSnapshot_Result.UNKNOWN:\n            return \"UNKNOWN\";\n        case ResponseOfferSnapshot_Result.ACCEPT:\n            return \"ACCEPT\";\n        case ResponseOfferSnapshot_Result.ABORT:\n            return \"ABORT\";\n        case ResponseOfferSnapshot_Result.REJECT:\n            return \"REJECT\";\n        case ResponseOfferSnapshot_Result.REJECT_FORMAT:\n            return \"REJECT_FORMAT\";\n        case ResponseOfferSnapshot_Result.REJECT_SENDER:\n            return \"REJECT_SENDER\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.responseOfferSnapshot_ResultToJSON = responseOfferSnapshot_ResultToJSON;\nvar ResponseApplySnapshotChunk_Result;\n(function (ResponseApplySnapshotChunk_Result) {\n    /** UNKNOWN - Unknown result, abort all snapshot restoration */\n    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    /** ACCEPT - Chunk successfully accepted */\n    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"ACCEPT\"] = 1] = \"ACCEPT\";\n    /** ABORT - Abort all snapshot restoration */\n    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"ABORT\"] = 2] = \"ABORT\";\n    /** RETRY - Retry chunk (combine with refetch and reject) */\n    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"RETRY\"] = 3] = \"RETRY\";\n    /** RETRY_SNAPSHOT - Retry snapshot (combine with refetch and reject) */\n    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"RETRY_SNAPSHOT\"] = 4] = \"RETRY_SNAPSHOT\";\n    /** REJECT_SNAPSHOT - Reject this snapshot, try others */\n    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"REJECT_SNAPSHOT\"] = 5] = \"REJECT_SNAPSHOT\";\n    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ResponseApplySnapshotChunk_Result = exports.ResponseApplySnapshotChunk_Result || (exports.ResponseApplySnapshotChunk_Result = {}));\nfunction responseApplySnapshotChunk_ResultFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"UNKNOWN\":\n            return ResponseApplySnapshotChunk_Result.UNKNOWN;\n        case 1:\n        case \"ACCEPT\":\n            return ResponseApplySnapshotChunk_Result.ACCEPT;\n        case 2:\n        case \"ABORT\":\n            return ResponseApplySnapshotChunk_Result.ABORT;\n        case 3:\n        case \"RETRY\":\n            return ResponseApplySnapshotChunk_Result.RETRY;\n        case 4:\n        case \"RETRY_SNAPSHOT\":\n            return ResponseApplySnapshotChunk_Result.RETRY_SNAPSHOT;\n        case 5:\n        case \"REJECT_SNAPSHOT\":\n            return ResponseApplySnapshotChunk_Result.REJECT_SNAPSHOT;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ResponseApplySnapshotChunk_Result.UNRECOGNIZED;\n    }\n}\nexports.responseApplySnapshotChunk_ResultFromJSON = responseApplySnapshotChunk_ResultFromJSON;\nfunction responseApplySnapshotChunk_ResultToJSON(object) {\n    switch (object) {\n        case ResponseApplySnapshotChunk_Result.UNKNOWN:\n            return \"UNKNOWN\";\n        case ResponseApplySnapshotChunk_Result.ACCEPT:\n            return \"ACCEPT\";\n        case ResponseApplySnapshotChunk_Result.ABORT:\n            return \"ABORT\";\n        case ResponseApplySnapshotChunk_Result.RETRY:\n            return \"RETRY\";\n        case ResponseApplySnapshotChunk_Result.RETRY_SNAPSHOT:\n            return \"RETRY_SNAPSHOT\";\n        case ResponseApplySnapshotChunk_Result.REJECT_SNAPSHOT:\n            return \"REJECT_SNAPSHOT\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.responseApplySnapshotChunk_ResultToJSON = responseApplySnapshotChunk_ResultToJSON;\nconst baseRequest = {};\nexports.Request = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.echo !== undefined) {\n            exports.RequestEcho.encode(message.echo, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.flush !== undefined) {\n            exports.RequestFlush.encode(message.flush, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.info !== undefined) {\n            exports.RequestInfo.encode(message.info, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.setOption !== undefined) {\n            exports.RequestSetOption.encode(message.setOption, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.initChain !== undefined) {\n            exports.RequestInitChain.encode(message.initChain, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.query !== undefined) {\n            exports.RequestQuery.encode(message.query, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.beginBlock !== undefined) {\n            exports.RequestBeginBlock.encode(message.beginBlock, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.checkTx !== undefined) {\n            exports.RequestCheckTx.encode(message.checkTx, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.deliverTx !== undefined) {\n            exports.RequestDeliverTx.encode(message.deliverTx, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.endBlock !== undefined) {\n            exports.RequestEndBlock.encode(message.endBlock, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.commit !== undefined) {\n            exports.RequestCommit.encode(message.commit, writer.uint32(90).fork()).ldelim();\n        }\n        if (message.listSnapshots !== undefined) {\n            exports.RequestListSnapshots.encode(message.listSnapshots, writer.uint32(98).fork()).ldelim();\n        }\n        if (message.offerSnapshot !== undefined) {\n            exports.RequestOfferSnapshot.encode(message.offerSnapshot, writer.uint32(106).fork()).ldelim();\n        }\n        if (message.loadSnapshotChunk !== undefined) {\n            exports.RequestLoadSnapshotChunk.encode(message.loadSnapshotChunk, writer.uint32(114).fork()).ldelim();\n        }\n        if (message.applySnapshotChunk !== undefined) {\n            exports.RequestApplySnapshotChunk.encode(message.applySnapshotChunk, writer.uint32(122).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.echo = exports.RequestEcho.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.flush = exports.RequestFlush.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.info = exports.RequestInfo.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.setOption = exports.RequestSetOption.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.initChain = exports.RequestInitChain.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.query = exports.RequestQuery.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.beginBlock = exports.RequestBeginBlock.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.checkTx = exports.RequestCheckTx.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.deliverTx = exports.RequestDeliverTx.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.endBlock = exports.RequestEndBlock.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.commit = exports.RequestCommit.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.listSnapshots = exports.RequestListSnapshots.decode(reader, reader.uint32());\n                    break;\n                case 13:\n                    message.offerSnapshot = exports.RequestOfferSnapshot.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    message.loadSnapshotChunk = exports.RequestLoadSnapshotChunk.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.applySnapshotChunk = exports.RequestApplySnapshotChunk.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseRequest);\n        if (object.echo !== undefined && object.echo !== null) {\n            message.echo = exports.RequestEcho.fromJSON(object.echo);\n        }\n        else {\n            message.echo = undefined;\n        }\n        if (object.flush !== undefined && object.flush !== null) {\n            message.flush = exports.RequestFlush.fromJSON(object.flush);\n        }\n        else {\n            message.flush = undefined;\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = exports.RequestInfo.fromJSON(object.info);\n        }\n        else {\n            message.info = undefined;\n        }\n        if (object.setOption !== undefined && object.setOption !== null) {\n            message.setOption = exports.RequestSetOption.fromJSON(object.setOption);\n        }\n        else {\n            message.setOption = undefined;\n        }\n        if (object.initChain !== undefined && object.initChain !== null) {\n            message.initChain = exports.RequestInitChain.fromJSON(object.initChain);\n        }\n        else {\n            message.initChain = undefined;\n        }\n        if (object.query !== undefined && object.query !== null) {\n            message.query = exports.RequestQuery.fromJSON(object.query);\n        }\n        else {\n            message.query = undefined;\n        }\n        if (object.beginBlock !== undefined && object.beginBlock !== null) {\n            message.beginBlock = exports.RequestBeginBlock.fromJSON(object.beginBlock);\n        }\n        else {\n            message.beginBlock = undefined;\n        }\n        if (object.checkTx !== undefined && object.checkTx !== null) {\n            message.checkTx = exports.RequestCheckTx.fromJSON(object.checkTx);\n        }\n        else {\n            message.checkTx = undefined;\n        }\n        if (object.deliverTx !== undefined && object.deliverTx !== null) {\n            message.deliverTx = exports.RequestDeliverTx.fromJSON(object.deliverTx);\n        }\n        else {\n            message.deliverTx = undefined;\n        }\n        if (object.endBlock !== undefined && object.endBlock !== null) {\n            message.endBlock = exports.RequestEndBlock.fromJSON(object.endBlock);\n        }\n        else {\n            message.endBlock = undefined;\n        }\n        if (object.commit !== undefined && object.commit !== null) {\n            message.commit = exports.RequestCommit.fromJSON(object.commit);\n        }\n        else {\n            message.commit = undefined;\n        }\n        if (object.listSnapshots !== undefined && object.listSnapshots !== null) {\n            message.listSnapshots = exports.RequestListSnapshots.fromJSON(object.listSnapshots);\n        }\n        else {\n            message.listSnapshots = undefined;\n        }\n        if (object.offerSnapshot !== undefined && object.offerSnapshot !== null) {\n            message.offerSnapshot = exports.RequestOfferSnapshot.fromJSON(object.offerSnapshot);\n        }\n        else {\n            message.offerSnapshot = undefined;\n        }\n        if (object.loadSnapshotChunk !== undefined && object.loadSnapshotChunk !== null) {\n            message.loadSnapshotChunk = exports.RequestLoadSnapshotChunk.fromJSON(object.loadSnapshotChunk);\n        }\n        else {\n            message.loadSnapshotChunk = undefined;\n        }\n        if (object.applySnapshotChunk !== undefined && object.applySnapshotChunk !== null) {\n            message.applySnapshotChunk = exports.RequestApplySnapshotChunk.fromJSON(object.applySnapshotChunk);\n        }\n        else {\n            message.applySnapshotChunk = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.echo !== undefined && (obj.echo = message.echo ? exports.RequestEcho.toJSON(message.echo) : undefined);\n        message.flush !== undefined &&\n            (obj.flush = message.flush ? exports.RequestFlush.toJSON(message.flush) : undefined);\n        message.info !== undefined && (obj.info = message.info ? exports.RequestInfo.toJSON(message.info) : undefined);\n        message.setOption !== undefined &&\n            (obj.setOption = message.setOption ? exports.RequestSetOption.toJSON(message.setOption) : undefined);\n        message.initChain !== undefined &&\n            (obj.initChain = message.initChain ? exports.RequestInitChain.toJSON(message.initChain) : undefined);\n        message.query !== undefined &&\n            (obj.query = message.query ? exports.RequestQuery.toJSON(message.query) : undefined);\n        message.beginBlock !== undefined &&\n            (obj.beginBlock = message.beginBlock ? exports.RequestBeginBlock.toJSON(message.beginBlock) : undefined);\n        message.checkTx !== undefined &&\n            (obj.checkTx = message.checkTx ? exports.RequestCheckTx.toJSON(message.checkTx) : undefined);\n        message.deliverTx !== undefined &&\n            (obj.deliverTx = message.deliverTx ? exports.RequestDeliverTx.toJSON(message.deliverTx) : undefined);\n        message.endBlock !== undefined &&\n            (obj.endBlock = message.endBlock ? exports.RequestEndBlock.toJSON(message.endBlock) : undefined);\n        message.commit !== undefined &&\n            (obj.commit = message.commit ? exports.RequestCommit.toJSON(message.commit) : undefined);\n        message.listSnapshots !== undefined &&\n            (obj.listSnapshots = message.listSnapshots\n                ? exports.RequestListSnapshots.toJSON(message.listSnapshots)\n                : undefined);\n        message.offerSnapshot !== undefined &&\n            (obj.offerSnapshot = message.offerSnapshot\n                ? exports.RequestOfferSnapshot.toJSON(message.offerSnapshot)\n                : undefined);\n        message.loadSnapshotChunk !== undefined &&\n            (obj.loadSnapshotChunk = message.loadSnapshotChunk\n                ? exports.RequestLoadSnapshotChunk.toJSON(message.loadSnapshotChunk)\n                : undefined);\n        message.applySnapshotChunk !== undefined &&\n            (obj.applySnapshotChunk = message.applySnapshotChunk\n                ? exports.RequestApplySnapshotChunk.toJSON(message.applySnapshotChunk)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseRequest);\n        if (object.echo !== undefined && object.echo !== null) {\n            message.echo = exports.RequestEcho.fromPartial(object.echo);\n        }\n        else {\n            message.echo = undefined;\n        }\n        if (object.flush !== undefined && object.flush !== null) {\n            message.flush = exports.RequestFlush.fromPartial(object.flush);\n        }\n        else {\n            message.flush = undefined;\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = exports.RequestInfo.fromPartial(object.info);\n        }\n        else {\n            message.info = undefined;\n        }\n        if (object.setOption !== undefined && object.setOption !== null) {\n            message.setOption = exports.RequestSetOption.fromPartial(object.setOption);\n        }\n        else {\n            message.setOption = undefined;\n        }\n        if (object.initChain !== undefined && object.initChain !== null) {\n            message.initChain = exports.RequestInitChain.fromPartial(object.initChain);\n        }\n        else {\n            message.initChain = undefined;\n        }\n        if (object.query !== undefined && object.query !== null) {\n            message.query = exports.RequestQuery.fromPartial(object.query);\n        }\n        else {\n            message.query = undefined;\n        }\n        if (object.beginBlock !== undefined && object.beginBlock !== null) {\n            message.beginBlock = exports.RequestBeginBlock.fromPartial(object.beginBlock);\n        }\n        else {\n            message.beginBlock = undefined;\n        }\n        if (object.checkTx !== undefined && object.checkTx !== null) {\n            message.checkTx = exports.RequestCheckTx.fromPartial(object.checkTx);\n        }\n        else {\n            message.checkTx = undefined;\n        }\n        if (object.deliverTx !== undefined && object.deliverTx !== null) {\n            message.deliverTx = exports.RequestDeliverTx.fromPartial(object.deliverTx);\n        }\n        else {\n            message.deliverTx = undefined;\n        }\n        if (object.endBlock !== undefined && object.endBlock !== null) {\n            message.endBlock = exports.RequestEndBlock.fromPartial(object.endBlock);\n        }\n        else {\n            message.endBlock = undefined;\n        }\n        if (object.commit !== undefined && object.commit !== null) {\n            message.commit = exports.RequestCommit.fromPartial(object.commit);\n        }\n        else {\n            message.commit = undefined;\n        }\n        if (object.listSnapshots !== undefined && object.listSnapshots !== null) {\n            message.listSnapshots = exports.RequestListSnapshots.fromPartial(object.listSnapshots);\n        }\n        else {\n            message.listSnapshots = undefined;\n        }\n        if (object.offerSnapshot !== undefined && object.offerSnapshot !== null) {\n            message.offerSnapshot = exports.RequestOfferSnapshot.fromPartial(object.offerSnapshot);\n        }\n        else {\n            message.offerSnapshot = undefined;\n        }\n        if (object.loadSnapshotChunk !== undefined && object.loadSnapshotChunk !== null) {\n            message.loadSnapshotChunk = exports.RequestLoadSnapshotChunk.fromPartial(object.loadSnapshotChunk);\n        }\n        else {\n            message.loadSnapshotChunk = undefined;\n        }\n        if (object.applySnapshotChunk !== undefined && object.applySnapshotChunk !== null) {\n            message.applySnapshotChunk = exports.RequestApplySnapshotChunk.fromPartial(object.applySnapshotChunk);\n        }\n        else {\n            message.applySnapshotChunk = undefined;\n        }\n        return message;\n    },\n};\nconst baseRequestEcho = { message: \"\" };\nexports.RequestEcho = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.message !== \"\") {\n            writer.uint32(10).string(message.message);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestEcho);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.message = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseRequestEcho);\n        if (object.message !== undefined && object.message !== null) {\n            message.message = String(object.message);\n        }\n        else {\n            message.message = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.message !== undefined && (obj.message = message.message);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseRequestEcho);\n        if (object.message !== undefined && object.message !== null) {\n            message.message = object.message;\n        }\n        else {\n            message.message = \"\";\n        }\n        return message;\n    },\n};\nconst baseRequestFlush = {};\nexports.RequestFlush = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestFlush);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseRequestFlush);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseRequestFlush);\n        return message;\n    },\n};\nconst baseRequestInfo = { version: \"\", blockVersion: long_1.default.UZERO, p2pVersion: long_1.default.UZERO };\nexports.RequestInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.version !== \"\") {\n            writer.uint32(10).string(message.version);\n        }\n        if (!message.blockVersion.isZero()) {\n            writer.uint32(16).uint64(message.blockVersion);\n        }\n        if (!message.p2pVersion.isZero()) {\n            writer.uint32(24).uint64(message.p2pVersion);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestInfo);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.version = reader.string();\n                    break;\n                case 2:\n                    message.blockVersion = reader.uint64();\n                    break;\n                case 3:\n                    message.p2pVersion = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseRequestInfo);\n        if (object.version !== undefined && object.version !== null) {\n            message.version = String(object.version);\n        }\n        else {\n            message.version = \"\";\n        }\n        if (object.blockVersion !== undefined && object.blockVersion !== null) {\n            message.blockVersion = long_1.default.fromString(object.blockVersion);\n        }\n        else {\n            message.blockVersion = long_1.default.UZERO;\n        }\n        if (object.p2pVersion !== undefined && object.p2pVersion !== null) {\n            message.p2pVersion = long_1.default.fromString(object.p2pVersion);\n        }\n        else {\n            message.p2pVersion = long_1.default.UZERO;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.version !== undefined && (obj.version = message.version);\n        message.blockVersion !== undefined &&\n            (obj.blockVersion = (message.blockVersion || long_1.default.UZERO).toString());\n        message.p2pVersion !== undefined && (obj.p2pVersion = (message.p2pVersion || long_1.default.UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseRequestInfo);\n        if (object.version !== undefined && object.version !== null) {\n            message.version = object.version;\n        }\n        else {\n            message.version = \"\";\n        }\n        if (object.blockVersion !== undefined && object.blockVersion !== null) {\n            message.blockVersion = object.blockVersion;\n        }\n        else {\n            message.blockVersion = long_1.default.UZERO;\n        }\n        if (object.p2pVersion !== undefined && object.p2pVersion !== null) {\n            message.p2pVersion = object.p2pVersion;\n        }\n        else {\n            message.p2pVersion = long_1.default.UZERO;\n        }\n        return message;\n    },\n};\nconst baseRequestSetOption = { key: \"\", value: \"\" };\nexports.RequestSetOption = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== \"\") {\n            writer.uint32(18).string(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestSetOption);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseRequestSetOption);\n        if (object.key !== undefined && object.key !== null) {\n            message.key = String(object.key);\n        }\n        else {\n            message.key = \"\";\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = String(object.value);\n        }\n        else {\n            message.value = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined && (obj.value = message.value);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseRequestSetOption);\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = \"\";\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = object.value;\n        }\n        else {\n            message.value = \"\";\n        }\n        return message;\n    },\n};\nconst baseRequestInitChain = { chainId: \"\", initialHeight: long_1.default.ZERO };\nexports.RequestInitChain = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.time !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.time), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.chainId !== \"\") {\n            writer.uint32(18).string(message.chainId);\n        }\n        if (message.consensusParams !== undefined) {\n            exports.ConsensusParams.encode(message.consensusParams, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.validators) {\n            exports.ValidatorUpdate.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.appStateBytes.length !== 0) {\n            writer.uint32(42).bytes(message.appStateBytes);\n        }\n        if (!message.initialHeight.isZero()) {\n            writer.uint32(48).int64(message.initialHeight);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestInitChain);\n        message.validators = [];\n        message.appStateBytes = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.chainId = reader.string();\n                    break;\n                case 3:\n                    message.consensusParams = exports.ConsensusParams.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.validators.push(exports.ValidatorUpdate.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.appStateBytes = reader.bytes();\n                    break;\n                case 6:\n                    message.initialHeight = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseRequestInitChain);\n        message.validators = [];\n        message.appStateBytes = new Uint8Array();\n        if (object.time !== undefined && object.time !== null) {\n            message.time = fromJsonTimestamp(object.time);\n        }\n        else {\n            message.time = undefined;\n        }\n        if (object.chainId !== undefined && object.chainId !== null) {\n            message.chainId = String(object.chainId);\n        }\n        else {\n            message.chainId = \"\";\n        }\n        if (object.consensusParams !== undefined && object.consensusParams !== null) {\n            message.consensusParams = exports.ConsensusParams.fromJSON(object.consensusParams);\n        }\n        else {\n            message.consensusParams = undefined;\n        }\n        if (object.validators !== undefined && object.validators !== null) {\n            for (const e of object.validators) {\n                message.validators.push(exports.ValidatorUpdate.fromJSON(e));\n            }\n        }\n        if (object.appStateBytes !== undefined && object.appStateBytes !== null) {\n            message.appStateBytes = bytesFromBase64(object.appStateBytes);\n        }\n        if (object.initialHeight !== undefined && object.initialHeight !== null) {\n            message.initialHeight = long_1.default.fromString(object.initialHeight);\n        }\n        else {\n            message.initialHeight = long_1.default.ZERO;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.time !== undefined && (obj.time = message.time.toISOString());\n        message.chainId !== undefined && (obj.chainId = message.chainId);\n        message.consensusParams !== undefined &&\n            (obj.consensusParams = message.consensusParams\n                ? exports.ConsensusParams.toJSON(message.consensusParams)\n                : undefined);\n        if (message.validators) {\n            obj.validators = message.validators.map((e) => (e ? exports.ValidatorUpdate.toJSON(e) : undefined));\n        }\n        else {\n            obj.validators = [];\n        }\n        message.appStateBytes !== undefined &&\n            (obj.appStateBytes = base64FromBytes(message.appStateBytes !== undefined ? message.appStateBytes : new Uint8Array()));\n        message.initialHeight !== undefined &&\n            (obj.initialHeight = (message.initialHeight || long_1.default.ZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseRequestInitChain);\n        message.validators = [];\n        if (object.time !== undefined && object.time !== null) {\n            message.time = object.time;\n        }\n        else {\n            message.time = undefined;\n        }\n        if (object.chainId !== undefined && object.chainId !== null) {\n            message.chainId = object.chainId;\n        }\n        else {\n            message.chainId = \"\";\n        }\n        if (object.consensusParams !== undefined && object.consensusParams !== null) {\n            message.consensusParams = exports.ConsensusParams.fromPartial(object.consensusParams);\n        }\n        else {\n            message.consensusParams = undefined;\n        }\n        if (object.validators !== undefined && object.validators !== null) {\n            for (const e of object.validators) {\n                message.validators.push(exports.ValidatorUpdate.fromPartial(e));\n            }\n        }\n        if (object.appStateBytes !== undefined && object.appStateBytes !== null) {\n            message.appStateBytes = object.appStateBytes;\n        }\n        else {\n            message.appStateBytes = new Uint8Array();\n        }\n        if (object.initialHeight !== undefined && object.initialHeight !== null) {\n            message.initialHeight = object.initialHeight;\n        }\n        else {\n            message.initialHeight = long_1.default.ZERO;\n        }\n        return message;\n    },\n};\nconst baseRequestQuery = { path: \"\", height: long_1.default.ZERO, prove: false };\nexports.RequestQuery = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        if (message.path !== \"\") {\n            writer.uint32(18).string(message.path);\n        }\n        if (!message.height.isZero()) {\n            writer.uint32(24).int64(message.height);\n        }\n        if (message.prove === true) {\n            writer.uint32(32).bool(message.prove);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestQuery);\n        message.data = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                case 2:\n                    message.path = reader.string();\n                    break;\n                case 3:\n                    message.height = reader.int64();\n                    break;\n                case 4:\n                    message.prove = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseRequestQuery);\n        message.data = new Uint8Array();\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        if (object.path !== undefined && object.path !== null) {\n            message.path = String(object.path);\n        }\n        else {\n            message.path = \"\";\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = long_1.default.fromString(object.height);\n        }\n        else {\n            message.height = long_1.default.ZERO;\n        }\n        if (object.prove !== undefined && object.prove !== null) {\n            message.prove = Boolean(object.prove);\n        }\n        else {\n            message.prove = false;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.path !== undefined && (obj.path = message.path);\n        message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n        message.prove !== undefined && (obj.prove = message.prove);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseRequestQuery);\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        if (object.path !== undefined && object.path !== null) {\n            message.path = object.path;\n        }\n        else {\n            message.path = \"\";\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = long_1.default.ZERO;\n        }\n        if (object.prove !== undefined && object.prove !== null) {\n            message.prove = object.prove;\n        }\n        else {\n            message.prove = false;\n        }\n        return message;\n    },\n};\nconst baseRequestBeginBlock = {};\nexports.RequestBeginBlock = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.hash.length !== 0) {\n            writer.uint32(10).bytes(message.hash);\n        }\n        if (message.header !== undefined) {\n            types_1.Header.encode(message.header, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.lastCommitInfo !== undefined) {\n            exports.LastCommitInfo.encode(message.lastCommitInfo, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.byzantineValidators) {\n            exports.Evidence.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestBeginBlock);\n        message.byzantineValidators = [];\n        message.hash = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.bytes();\n                    break;\n                case 2:\n                    message.header = types_1.Header.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.lastCommitInfo = exports.LastCommitInfo.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.byzantineValidators.push(exports.Evidence.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseRequestBeginBlock);\n        message.byzantineValidators = [];\n        message.hash = new Uint8Array();\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = bytesFromBase64(object.hash);\n        }\n        if (object.header !== undefined && object.header !== null) {\n            message.header = types_1.Header.fromJSON(object.header);\n        }\n        else {\n            message.header = undefined;\n        }\n        if (object.lastCommitInfo !== undefined && object.lastCommitInfo !== null) {\n            message.lastCommitInfo = exports.LastCommitInfo.fromJSON(object.lastCommitInfo);\n        }\n        else {\n            message.lastCommitInfo = undefined;\n        }\n        if (object.byzantineValidators !== undefined && object.byzantineValidators !== null) {\n            for (const e of object.byzantineValidators) {\n                message.byzantineValidators.push(exports.Evidence.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.hash !== undefined &&\n            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n        message.header !== undefined && (obj.header = message.header ? types_1.Header.toJSON(message.header) : undefined);\n        message.lastCommitInfo !== undefined &&\n            (obj.lastCommitInfo = message.lastCommitInfo\n                ? exports.LastCommitInfo.toJSON(message.lastCommitInfo)\n                : undefined);\n        if (message.byzantineValidators) {\n            obj.byzantineValidators = message.byzantineValidators.map((e) => (e ? exports.Evidence.toJSON(e) : undefined));\n        }\n        else {\n            obj.byzantineValidators = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseRequestBeginBlock);\n        message.byzantineValidators = [];\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = object.hash;\n        }\n        else {\n            message.hash = new Uint8Array();\n        }\n        if (object.header !== undefined && object.header !== null) {\n            message.header = types_1.Header.fromPartial(object.header);\n        }\n        else {\n            message.header = undefined;\n        }\n        if (object.lastCommitInfo !== undefined && object.lastCommitInfo !== null) {\n            message.lastCommitInfo = exports.LastCommitInfo.fromPartial(object.lastCommitInfo);\n        }\n        else {\n            message.lastCommitInfo = undefined;\n        }\n        if (object.byzantineValidators !== undefined && object.byzantineValidators !== null) {\n            for (const e of object.byzantineValidators) {\n                message.byzantineValidators.push(exports.Evidence.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseRequestCheckTx = { type: 0 };\nexports.RequestCheckTx = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.tx.length !== 0) {\n            writer.uint32(10).bytes(message.tx);\n        }\n        if (message.type !== 0) {\n            writer.uint32(16).int32(message.type);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestCheckTx);\n        message.tx = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.tx = reader.bytes();\n                    break;\n                case 2:\n                    message.type = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseRequestCheckTx);\n        message.tx = new Uint8Array();\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = bytesFromBase64(object.tx);\n        }\n        if (object.type !== undefined && object.type !== null) {\n            message.type = checkTxTypeFromJSON(object.type);\n        }\n        else {\n            message.type = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.tx !== undefined &&\n            (obj.tx = base64FromBytes(message.tx !== undefined ? message.tx : new Uint8Array()));\n        message.type !== undefined && (obj.type = checkTxTypeToJSON(message.type));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseRequestCheckTx);\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = object.tx;\n        }\n        else {\n            message.tx = new Uint8Array();\n        }\n        if (object.type !== undefined && object.type !== null) {\n            message.type = object.type;\n        }\n        else {\n            message.type = 0;\n        }\n        return message;\n    },\n};\nconst baseRequestDeliverTx = {};\nexports.RequestDeliverTx = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.tx.length !== 0) {\n            writer.uint32(10).bytes(message.tx);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestDeliverTx);\n        message.tx = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.tx = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseRequestDeliverTx);\n        message.tx = new Uint8Array();\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = bytesFromBase64(object.tx);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.tx !== undefined &&\n            (obj.tx = base64FromBytes(message.tx !== undefined ? message.tx : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseRequestDeliverTx);\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = object.tx;\n        }\n        else {\n            message.tx = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseRequestEndBlock = { height: long_1.default.ZERO };\nexports.RequestEndBlock = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (!message.height.isZero()) {\n            writer.uint32(8).int64(message.height);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestEndBlock);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseRequestEndBlock);\n        if (object.height !== undefined && object.height !== null) {\n            message.height = long_1.default.fromString(object.height);\n        }\n        else {\n            message.height = long_1.default.ZERO;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseRequestEndBlock);\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = long_1.default.ZERO;\n        }\n        return message;\n    },\n};\nconst baseRequestCommit = {};\nexports.RequestCommit = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestCommit);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseRequestCommit);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseRequestCommit);\n        return message;\n    },\n};\nconst baseRequestListSnapshots = {};\nexports.RequestListSnapshots = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestListSnapshots);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseRequestListSnapshots);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseRequestListSnapshots);\n        return message;\n    },\n};\nconst baseRequestOfferSnapshot = {};\nexports.RequestOfferSnapshot = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.snapshot !== undefined) {\n            exports.Snapshot.encode(message.snapshot, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.appHash.length !== 0) {\n            writer.uint32(18).bytes(message.appHash);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestOfferSnapshot);\n        message.appHash = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.snapshot = exports.Snapshot.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.appHash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseRequestOfferSnapshot);\n        message.appHash = new Uint8Array();\n        if (object.snapshot !== undefined && object.snapshot !== null) {\n            message.snapshot = exports.Snapshot.fromJSON(object.snapshot);\n        }\n        else {\n            message.snapshot = undefined;\n        }\n        if (object.appHash !== undefined && object.appHash !== null) {\n            message.appHash = bytesFromBase64(object.appHash);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.snapshot !== undefined &&\n            (obj.snapshot = message.snapshot ? exports.Snapshot.toJSON(message.snapshot) : undefined);\n        message.appHash !== undefined &&\n            (obj.appHash = base64FromBytes(message.appHash !== undefined ? message.appHash : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseRequestOfferSnapshot);\n        if (object.snapshot !== undefined && object.snapshot !== null) {\n            message.snapshot = exports.Snapshot.fromPartial(object.snapshot);\n        }\n        else {\n            message.snapshot = undefined;\n        }\n        if (object.appHash !== undefined && object.appHash !== null) {\n            message.appHash = object.appHash;\n        }\n        else {\n            message.appHash = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseRequestLoadSnapshotChunk = { height: long_1.default.UZERO, format: 0, chunk: 0 };\nexports.RequestLoadSnapshotChunk = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (!message.height.isZero()) {\n            writer.uint32(8).uint64(message.height);\n        }\n        if (message.format !== 0) {\n            writer.uint32(16).uint32(message.format);\n        }\n        if (message.chunk !== 0) {\n            writer.uint32(24).uint32(message.chunk);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestLoadSnapshotChunk);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = reader.uint64();\n                    break;\n                case 2:\n                    message.format = reader.uint32();\n                    break;\n                case 3:\n                    message.chunk = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseRequestLoadSnapshotChunk);\n        if (object.height !== undefined && object.height !== null) {\n            message.height = long_1.default.fromString(object.height);\n        }\n        else {\n            message.height = long_1.default.UZERO;\n        }\n        if (object.format !== undefined && object.format !== null) {\n            message.format = Number(object.format);\n        }\n        else {\n            message.format = 0;\n        }\n        if (object.chunk !== undefined && object.chunk !== null) {\n            message.chunk = Number(object.chunk);\n        }\n        else {\n            message.chunk = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined && (obj.height = (message.height || long_1.default.UZERO).toString());\n        message.format !== undefined && (obj.format = message.format);\n        message.chunk !== undefined && (obj.chunk = message.chunk);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseRequestLoadSnapshotChunk);\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = long_1.default.UZERO;\n        }\n        if (object.format !== undefined && object.format !== null) {\n            message.format = object.format;\n        }\n        else {\n            message.format = 0;\n        }\n        if (object.chunk !== undefined && object.chunk !== null) {\n            message.chunk = object.chunk;\n        }\n        else {\n            message.chunk = 0;\n        }\n        return message;\n    },\n};\nconst baseRequestApplySnapshotChunk = { index: 0, sender: \"\" };\nexports.RequestApplySnapshotChunk = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.index !== 0) {\n            writer.uint32(8).uint32(message.index);\n        }\n        if (message.chunk.length !== 0) {\n            writer.uint32(18).bytes(message.chunk);\n        }\n        if (message.sender !== \"\") {\n            writer.uint32(26).string(message.sender);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseRequestApplySnapshotChunk);\n        message.chunk = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.index = reader.uint32();\n                    break;\n                case 2:\n                    message.chunk = reader.bytes();\n                    break;\n                case 3:\n                    message.sender = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseRequestApplySnapshotChunk);\n        message.chunk = new Uint8Array();\n        if (object.index !== undefined && object.index !== null) {\n            message.index = Number(object.index);\n        }\n        else {\n            message.index = 0;\n        }\n        if (object.chunk !== undefined && object.chunk !== null) {\n            message.chunk = bytesFromBase64(object.chunk);\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = String(object.sender);\n        }\n        else {\n            message.sender = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.index !== undefined && (obj.index = message.index);\n        message.chunk !== undefined &&\n            (obj.chunk = base64FromBytes(message.chunk !== undefined ? message.chunk : new Uint8Array()));\n        message.sender !== undefined && (obj.sender = message.sender);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseRequestApplySnapshotChunk);\n        if (object.index !== undefined && object.index !== null) {\n            message.index = object.index;\n        }\n        else {\n            message.index = 0;\n        }\n        if (object.chunk !== undefined && object.chunk !== null) {\n            message.chunk = object.chunk;\n        }\n        else {\n            message.chunk = new Uint8Array();\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = object.sender;\n        }\n        else {\n            message.sender = \"\";\n        }\n        return message;\n    },\n};\nconst baseResponse = {};\nexports.Response = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.exception !== undefined) {\n            exports.ResponseException.encode(message.exception, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.echo !== undefined) {\n            exports.ResponseEcho.encode(message.echo, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.flush !== undefined) {\n            exports.ResponseFlush.encode(message.flush, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.info !== undefined) {\n            exports.ResponseInfo.encode(message.info, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.setOption !== undefined) {\n            exports.ResponseSetOption.encode(message.setOption, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.initChain !== undefined) {\n            exports.ResponseInitChain.encode(message.initChain, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.query !== undefined) {\n            exports.ResponseQuery.encode(message.query, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.beginBlock !== undefined) {\n            exports.ResponseBeginBlock.encode(message.beginBlock, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.checkTx !== undefined) {\n            exports.ResponseCheckTx.encode(message.checkTx, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.deliverTx !== undefined) {\n            exports.ResponseDeliverTx.encode(message.deliverTx, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.endBlock !== undefined) {\n            exports.ResponseEndBlock.encode(message.endBlock, writer.uint32(90).fork()).ldelim();\n        }\n        if (message.commit !== undefined) {\n            exports.ResponseCommit.encode(message.commit, writer.uint32(98).fork()).ldelim();\n        }\n        if (message.listSnapshots !== undefined) {\n            exports.ResponseListSnapshots.encode(message.listSnapshots, writer.uint32(106).fork()).ldelim();\n        }\n        if (message.offerSnapshot !== undefined) {\n            exports.ResponseOfferSnapshot.encode(message.offerSnapshot, writer.uint32(114).fork()).ldelim();\n        }\n        if (message.loadSnapshotChunk !== undefined) {\n            exports.ResponseLoadSnapshotChunk.encode(message.loadSnapshotChunk, writer.uint32(122).fork()).ldelim();\n        }\n        if (message.applySnapshotChunk !== undefined) {\n            exports.ResponseApplySnapshotChunk.encode(message.applySnapshotChunk, writer.uint32(130).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.exception = exports.ResponseException.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.echo = exports.ResponseEcho.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.flush = exports.ResponseFlush.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.info = exports.ResponseInfo.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.setOption = exports.ResponseSetOption.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.initChain = exports.ResponseInitChain.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.query = exports.ResponseQuery.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.beginBlock = exports.ResponseBeginBlock.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.checkTx = exports.ResponseCheckTx.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.deliverTx = exports.ResponseDeliverTx.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.endBlock = exports.ResponseEndBlock.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.commit = exports.ResponseCommit.decode(reader, reader.uint32());\n                    break;\n                case 13:\n                    message.listSnapshots = exports.ResponseListSnapshots.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    message.offerSnapshot = exports.ResponseOfferSnapshot.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.loadSnapshotChunk = exports.ResponseLoadSnapshotChunk.decode(reader, reader.uint32());\n                    break;\n                case 16:\n                    message.applySnapshotChunk = exports.ResponseApplySnapshotChunk.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponse);\n        if (object.exception !== undefined && object.exception !== null) {\n            message.exception = exports.ResponseException.fromJSON(object.exception);\n        }\n        else {\n            message.exception = undefined;\n        }\n        if (object.echo !== undefined && object.echo !== null) {\n            message.echo = exports.ResponseEcho.fromJSON(object.echo);\n        }\n        else {\n            message.echo = undefined;\n        }\n        if (object.flush !== undefined && object.flush !== null) {\n            message.flush = exports.ResponseFlush.fromJSON(object.flush);\n        }\n        else {\n            message.flush = undefined;\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = exports.ResponseInfo.fromJSON(object.info);\n        }\n        else {\n            message.info = undefined;\n        }\n        if (object.setOption !== undefined && object.setOption !== null) {\n            message.setOption = exports.ResponseSetOption.fromJSON(object.setOption);\n        }\n        else {\n            message.setOption = undefined;\n        }\n        if (object.initChain !== undefined && object.initChain !== null) {\n            message.initChain = exports.ResponseInitChain.fromJSON(object.initChain);\n        }\n        else {\n            message.initChain = undefined;\n        }\n        if (object.query !== undefined && object.query !== null) {\n            message.query = exports.ResponseQuery.fromJSON(object.query);\n        }\n        else {\n            message.query = undefined;\n        }\n        if (object.beginBlock !== undefined && object.beginBlock !== null) {\n            message.beginBlock = exports.ResponseBeginBlock.fromJSON(object.beginBlock);\n        }\n        else {\n            message.beginBlock = undefined;\n        }\n        if (object.checkTx !== undefined && object.checkTx !== null) {\n            message.checkTx = exports.ResponseCheckTx.fromJSON(object.checkTx);\n        }\n        else {\n            message.checkTx = undefined;\n        }\n        if (object.deliverTx !== undefined && object.deliverTx !== null) {\n            message.deliverTx = exports.ResponseDeliverTx.fromJSON(object.deliverTx);\n        }\n        else {\n            message.deliverTx = undefined;\n        }\n        if (object.endBlock !== undefined && object.endBlock !== null) {\n            message.endBlock = exports.ResponseEndBlock.fromJSON(object.endBlock);\n        }\n        else {\n            message.endBlock = undefined;\n        }\n        if (object.commit !== undefined && object.commit !== null) {\n            message.commit = exports.ResponseCommit.fromJSON(object.commit);\n        }\n        else {\n            message.commit = undefined;\n        }\n        if (object.listSnapshots !== undefined && object.listSnapshots !== null) {\n            message.listSnapshots = exports.ResponseListSnapshots.fromJSON(object.listSnapshots);\n        }\n        else {\n            message.listSnapshots = undefined;\n        }\n        if (object.offerSnapshot !== undefined && object.offerSnapshot !== null) {\n            message.offerSnapshot = exports.ResponseOfferSnapshot.fromJSON(object.offerSnapshot);\n        }\n        else {\n            message.offerSnapshot = undefined;\n        }\n        if (object.loadSnapshotChunk !== undefined && object.loadSnapshotChunk !== null) {\n            message.loadSnapshotChunk = exports.ResponseLoadSnapshotChunk.fromJSON(object.loadSnapshotChunk);\n        }\n        else {\n            message.loadSnapshotChunk = undefined;\n        }\n        if (object.applySnapshotChunk !== undefined && object.applySnapshotChunk !== null) {\n            message.applySnapshotChunk = exports.ResponseApplySnapshotChunk.fromJSON(object.applySnapshotChunk);\n        }\n        else {\n            message.applySnapshotChunk = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.exception !== undefined &&\n            (obj.exception = message.exception ? exports.ResponseException.toJSON(message.exception) : undefined);\n        message.echo !== undefined && (obj.echo = message.echo ? exports.ResponseEcho.toJSON(message.echo) : undefined);\n        message.flush !== undefined &&\n            (obj.flush = message.flush ? exports.ResponseFlush.toJSON(message.flush) : undefined);\n        message.info !== undefined && (obj.info = message.info ? exports.ResponseInfo.toJSON(message.info) : undefined);\n        message.setOption !== undefined &&\n            (obj.setOption = message.setOption ? exports.ResponseSetOption.toJSON(message.setOption) : undefined);\n        message.initChain !== undefined &&\n            (obj.initChain = message.initChain ? exports.ResponseInitChain.toJSON(message.initChain) : undefined);\n        message.query !== undefined &&\n            (obj.query = message.query ? exports.ResponseQuery.toJSON(message.query) : undefined);\n        message.beginBlock !== undefined &&\n            (obj.beginBlock = message.beginBlock ? exports.ResponseBeginBlock.toJSON(message.beginBlock) : undefined);\n        message.checkTx !== undefined &&\n            (obj.checkTx = message.checkTx ? exports.ResponseCheckTx.toJSON(message.checkTx) : undefined);\n        message.deliverTx !== undefined &&\n            (obj.deliverTx = message.deliverTx ? exports.ResponseDeliverTx.toJSON(message.deliverTx) : undefined);\n        message.endBlock !== undefined &&\n            (obj.endBlock = message.endBlock ? exports.ResponseEndBlock.toJSON(message.endBlock) : undefined);\n        message.commit !== undefined &&\n            (obj.commit = message.commit ? exports.ResponseCommit.toJSON(message.commit) : undefined);\n        message.listSnapshots !== undefined &&\n            (obj.listSnapshots = message.listSnapshots\n                ? exports.ResponseListSnapshots.toJSON(message.listSnapshots)\n                : undefined);\n        message.offerSnapshot !== undefined &&\n            (obj.offerSnapshot = message.offerSnapshot\n                ? exports.ResponseOfferSnapshot.toJSON(message.offerSnapshot)\n                : undefined);\n        message.loadSnapshotChunk !== undefined &&\n            (obj.loadSnapshotChunk = message.loadSnapshotChunk\n                ? exports.ResponseLoadSnapshotChunk.toJSON(message.loadSnapshotChunk)\n                : undefined);\n        message.applySnapshotChunk !== undefined &&\n            (obj.applySnapshotChunk = message.applySnapshotChunk\n                ? exports.ResponseApplySnapshotChunk.toJSON(message.applySnapshotChunk)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponse);\n        if (object.exception !== undefined && object.exception !== null) {\n            message.exception = exports.ResponseException.fromPartial(object.exception);\n        }\n        else {\n            message.exception = undefined;\n        }\n        if (object.echo !== undefined && object.echo !== null) {\n            message.echo = exports.ResponseEcho.fromPartial(object.echo);\n        }\n        else {\n            message.echo = undefined;\n        }\n        if (object.flush !== undefined && object.flush !== null) {\n            message.flush = exports.ResponseFlush.fromPartial(object.flush);\n        }\n        else {\n            message.flush = undefined;\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = exports.ResponseInfo.fromPartial(object.info);\n        }\n        else {\n            message.info = undefined;\n        }\n        if (object.setOption !== undefined && object.setOption !== null) {\n            message.setOption = exports.ResponseSetOption.fromPartial(object.setOption);\n        }\n        else {\n            message.setOption = undefined;\n        }\n        if (object.initChain !== undefined && object.initChain !== null) {\n            message.initChain = exports.ResponseInitChain.fromPartial(object.initChain);\n        }\n        else {\n            message.initChain = undefined;\n        }\n        if (object.query !== undefined && object.query !== null) {\n            message.query = exports.ResponseQuery.fromPartial(object.query);\n        }\n        else {\n            message.query = undefined;\n        }\n        if (object.beginBlock !== undefined && object.beginBlock !== null) {\n            message.beginBlock = exports.ResponseBeginBlock.fromPartial(object.beginBlock);\n        }\n        else {\n            message.beginBlock = undefined;\n        }\n        if (object.checkTx !== undefined && object.checkTx !== null) {\n            message.checkTx = exports.ResponseCheckTx.fromPartial(object.checkTx);\n        }\n        else {\n            message.checkTx = undefined;\n        }\n        if (object.deliverTx !== undefined && object.deliverTx !== null) {\n            message.deliverTx = exports.ResponseDeliverTx.fromPartial(object.deliverTx);\n        }\n        else {\n            message.deliverTx = undefined;\n        }\n        if (object.endBlock !== undefined && object.endBlock !== null) {\n            message.endBlock = exports.ResponseEndBlock.fromPartial(object.endBlock);\n        }\n        else {\n            message.endBlock = undefined;\n        }\n        if (object.commit !== undefined && object.commit !== null) {\n            message.commit = exports.ResponseCommit.fromPartial(object.commit);\n        }\n        else {\n            message.commit = undefined;\n        }\n        if (object.listSnapshots !== undefined && object.listSnapshots !== null) {\n            message.listSnapshots = exports.ResponseListSnapshots.fromPartial(object.listSnapshots);\n        }\n        else {\n            message.listSnapshots = undefined;\n        }\n        if (object.offerSnapshot !== undefined && object.offerSnapshot !== null) {\n            message.offerSnapshot = exports.ResponseOfferSnapshot.fromPartial(object.offerSnapshot);\n        }\n        else {\n            message.offerSnapshot = undefined;\n        }\n        if (object.loadSnapshotChunk !== undefined && object.loadSnapshotChunk !== null) {\n            message.loadSnapshotChunk = exports.ResponseLoadSnapshotChunk.fromPartial(object.loadSnapshotChunk);\n        }\n        else {\n            message.loadSnapshotChunk = undefined;\n        }\n        if (object.applySnapshotChunk !== undefined && object.applySnapshotChunk !== null) {\n            message.applySnapshotChunk = exports.ResponseApplySnapshotChunk.fromPartial(object.applySnapshotChunk);\n        }\n        else {\n            message.applySnapshotChunk = undefined;\n        }\n        return message;\n    },\n};\nconst baseResponseException = { error: \"\" };\nexports.ResponseException = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.error !== \"\") {\n            writer.uint32(10).string(message.error);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseException);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.error = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseException);\n        if (object.error !== undefined && object.error !== null) {\n            message.error = String(object.error);\n        }\n        else {\n            message.error = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.error !== undefined && (obj.error = message.error);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseException);\n        if (object.error !== undefined && object.error !== null) {\n            message.error = object.error;\n        }\n        else {\n            message.error = \"\";\n        }\n        return message;\n    },\n};\nconst baseResponseEcho = { message: \"\" };\nexports.ResponseEcho = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.message !== \"\") {\n            writer.uint32(10).string(message.message);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseEcho);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.message = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseEcho);\n        if (object.message !== undefined && object.message !== null) {\n            message.message = String(object.message);\n        }\n        else {\n            message.message = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.message !== undefined && (obj.message = message.message);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseEcho);\n        if (object.message !== undefined && object.message !== null) {\n            message.message = object.message;\n        }\n        else {\n            message.message = \"\";\n        }\n        return message;\n    },\n};\nconst baseResponseFlush = {};\nexports.ResponseFlush = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseFlush);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseResponseFlush);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseResponseFlush);\n        return message;\n    },\n};\nconst baseResponseInfo = {\n    data: \"\",\n    version: \"\",\n    appVersion: long_1.default.UZERO,\n    lastBlockHeight: long_1.default.ZERO,\n};\nexports.ResponseInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.data !== \"\") {\n            writer.uint32(10).string(message.data);\n        }\n        if (message.version !== \"\") {\n            writer.uint32(18).string(message.version);\n        }\n        if (!message.appVersion.isZero()) {\n            writer.uint32(24).uint64(message.appVersion);\n        }\n        if (!message.lastBlockHeight.isZero()) {\n            writer.uint32(32).int64(message.lastBlockHeight);\n        }\n        if (message.lastBlockAppHash.length !== 0) {\n            writer.uint32(42).bytes(message.lastBlockAppHash);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseInfo);\n        message.lastBlockAppHash = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.string();\n                    break;\n                case 3:\n                    message.appVersion = reader.uint64();\n                    break;\n                case 4:\n                    message.lastBlockHeight = reader.int64();\n                    break;\n                case 5:\n                    message.lastBlockAppHash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseInfo);\n        message.lastBlockAppHash = new Uint8Array();\n        if (object.data !== undefined && object.data !== null) {\n            message.data = String(object.data);\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.version !== undefined && object.version !== null) {\n            message.version = String(object.version);\n        }\n        else {\n            message.version = \"\";\n        }\n        if (object.appVersion !== undefined && object.appVersion !== null) {\n            message.appVersion = long_1.default.fromString(object.appVersion);\n        }\n        else {\n            message.appVersion = long_1.default.UZERO;\n        }\n        if (object.lastBlockHeight !== undefined && object.lastBlockHeight !== null) {\n            message.lastBlockHeight = long_1.default.fromString(object.lastBlockHeight);\n        }\n        else {\n            message.lastBlockHeight = long_1.default.ZERO;\n        }\n        if (object.lastBlockAppHash !== undefined && object.lastBlockAppHash !== null) {\n            message.lastBlockAppHash = bytesFromBase64(object.lastBlockAppHash);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined && (obj.data = message.data);\n        message.version !== undefined && (obj.version = message.version);\n        message.appVersion !== undefined && (obj.appVersion = (message.appVersion || long_1.default.UZERO).toString());\n        message.lastBlockHeight !== undefined &&\n            (obj.lastBlockHeight = (message.lastBlockHeight || long_1.default.ZERO).toString());\n        message.lastBlockAppHash !== undefined &&\n            (obj.lastBlockAppHash = base64FromBytes(message.lastBlockAppHash !== undefined ? message.lastBlockAppHash : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseInfo);\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.version !== undefined && object.version !== null) {\n            message.version = object.version;\n        }\n        else {\n            message.version = \"\";\n        }\n        if (object.appVersion !== undefined && object.appVersion !== null) {\n            message.appVersion = object.appVersion;\n        }\n        else {\n            message.appVersion = long_1.default.UZERO;\n        }\n        if (object.lastBlockHeight !== undefined && object.lastBlockHeight !== null) {\n            message.lastBlockHeight = object.lastBlockHeight;\n        }\n        else {\n            message.lastBlockHeight = long_1.default.ZERO;\n        }\n        if (object.lastBlockAppHash !== undefined && object.lastBlockAppHash !== null) {\n            message.lastBlockAppHash = object.lastBlockAppHash;\n        }\n        else {\n            message.lastBlockAppHash = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseResponseSetOption = { code: 0, log: \"\", info: \"\" };\nexports.ResponseSetOption = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.code !== 0) {\n            writer.uint32(8).uint32(message.code);\n        }\n        if (message.log !== \"\") {\n            writer.uint32(26).string(message.log);\n        }\n        if (message.info !== \"\") {\n            writer.uint32(34).string(message.info);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseSetOption);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.code = reader.uint32();\n                    break;\n                case 3:\n                    message.log = reader.string();\n                    break;\n                case 4:\n                    message.info = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseSetOption);\n        if (object.code !== undefined && object.code !== null) {\n            message.code = Number(object.code);\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = String(object.log);\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = String(object.info);\n        }\n        else {\n            message.info = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.code !== undefined && (obj.code = message.code);\n        message.log !== undefined && (obj.log = message.log);\n        message.info !== undefined && (obj.info = message.info);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseSetOption);\n        if (object.code !== undefined && object.code !== null) {\n            message.code = object.code;\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = object.log;\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = object.info;\n        }\n        else {\n            message.info = \"\";\n        }\n        return message;\n    },\n};\nconst baseResponseInitChain = {};\nexports.ResponseInitChain = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.consensusParams !== undefined) {\n            exports.ConsensusParams.encode(message.consensusParams, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.validators) {\n            exports.ValidatorUpdate.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.appHash.length !== 0) {\n            writer.uint32(26).bytes(message.appHash);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseInitChain);\n        message.validators = [];\n        message.appHash = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.consensusParams = exports.ConsensusParams.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.validators.push(exports.ValidatorUpdate.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.appHash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseInitChain);\n        message.validators = [];\n        message.appHash = new Uint8Array();\n        if (object.consensusParams !== undefined && object.consensusParams !== null) {\n            message.consensusParams = exports.ConsensusParams.fromJSON(object.consensusParams);\n        }\n        else {\n            message.consensusParams = undefined;\n        }\n        if (object.validators !== undefined && object.validators !== null) {\n            for (const e of object.validators) {\n                message.validators.push(exports.ValidatorUpdate.fromJSON(e));\n            }\n        }\n        if (object.appHash !== undefined && object.appHash !== null) {\n            message.appHash = bytesFromBase64(object.appHash);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.consensusParams !== undefined &&\n            (obj.consensusParams = message.consensusParams\n                ? exports.ConsensusParams.toJSON(message.consensusParams)\n                : undefined);\n        if (message.validators) {\n            obj.validators = message.validators.map((e) => (e ? exports.ValidatorUpdate.toJSON(e) : undefined));\n        }\n        else {\n            obj.validators = [];\n        }\n        message.appHash !== undefined &&\n            (obj.appHash = base64FromBytes(message.appHash !== undefined ? message.appHash : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseInitChain);\n        message.validators = [];\n        if (object.consensusParams !== undefined && object.consensusParams !== null) {\n            message.consensusParams = exports.ConsensusParams.fromPartial(object.consensusParams);\n        }\n        else {\n            message.consensusParams = undefined;\n        }\n        if (object.validators !== undefined && object.validators !== null) {\n            for (const e of object.validators) {\n                message.validators.push(exports.ValidatorUpdate.fromPartial(e));\n            }\n        }\n        if (object.appHash !== undefined && object.appHash !== null) {\n            message.appHash = object.appHash;\n        }\n        else {\n            message.appHash = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseResponseQuery = {\n    code: 0,\n    log: \"\",\n    info: \"\",\n    index: long_1.default.ZERO,\n    height: long_1.default.ZERO,\n    codespace: \"\",\n};\nexports.ResponseQuery = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.code !== 0) {\n            writer.uint32(8).uint32(message.code);\n        }\n        if (message.log !== \"\") {\n            writer.uint32(26).string(message.log);\n        }\n        if (message.info !== \"\") {\n            writer.uint32(34).string(message.info);\n        }\n        if (!message.index.isZero()) {\n            writer.uint32(40).int64(message.index);\n        }\n        if (message.key.length !== 0) {\n            writer.uint32(50).bytes(message.key);\n        }\n        if (message.value.length !== 0) {\n            writer.uint32(58).bytes(message.value);\n        }\n        if (message.proofOps !== undefined) {\n            proof_1.ProofOps.encode(message.proofOps, writer.uint32(66).fork()).ldelim();\n        }\n        if (!message.height.isZero()) {\n            writer.uint32(72).int64(message.height);\n        }\n        if (message.codespace !== \"\") {\n            writer.uint32(82).string(message.codespace);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseQuery);\n        message.key = new Uint8Array();\n        message.value = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.code = reader.uint32();\n                    break;\n                case 3:\n                    message.log = reader.string();\n                    break;\n                case 4:\n                    message.info = reader.string();\n                    break;\n                case 5:\n                    message.index = reader.int64();\n                    break;\n                case 6:\n                    message.key = reader.bytes();\n                    break;\n                case 7:\n                    message.value = reader.bytes();\n                    break;\n                case 8:\n                    message.proofOps = proof_1.ProofOps.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.height = reader.int64();\n                    break;\n                case 10:\n                    message.codespace = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseQuery);\n        message.key = new Uint8Array();\n        message.value = new Uint8Array();\n        if (object.code !== undefined && object.code !== null) {\n            message.code = Number(object.code);\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = String(object.log);\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = String(object.info);\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.index !== undefined && object.index !== null) {\n            message.index = long_1.default.fromString(object.index);\n        }\n        else {\n            message.index = long_1.default.ZERO;\n        }\n        if (object.key !== undefined && object.key !== null) {\n            message.key = bytesFromBase64(object.key);\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = bytesFromBase64(object.value);\n        }\n        if (object.proofOps !== undefined && object.proofOps !== null) {\n            message.proofOps = proof_1.ProofOps.fromJSON(object.proofOps);\n        }\n        else {\n            message.proofOps = undefined;\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = long_1.default.fromString(object.height);\n        }\n        else {\n            message.height = long_1.default.ZERO;\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = String(object.codespace);\n        }\n        else {\n            message.codespace = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.code !== undefined && (obj.code = message.code);\n        message.log !== undefined && (obj.log = message.log);\n        message.info !== undefined && (obj.info = message.info);\n        message.index !== undefined && (obj.index = (message.index || long_1.default.ZERO).toString());\n        message.key !== undefined &&\n            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n        message.value !== undefined &&\n            (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));\n        message.proofOps !== undefined &&\n            (obj.proofOps = message.proofOps ? proof_1.ProofOps.toJSON(message.proofOps) : undefined);\n        message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n        message.codespace !== undefined && (obj.codespace = message.codespace);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseQuery);\n        if (object.code !== undefined && object.code !== null) {\n            message.code = object.code;\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = object.log;\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = object.info;\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.index !== undefined && object.index !== null) {\n            message.index = object.index;\n        }\n        else {\n            message.index = long_1.default.ZERO;\n        }\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = new Uint8Array();\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = object.value;\n        }\n        else {\n            message.value = new Uint8Array();\n        }\n        if (object.proofOps !== undefined && object.proofOps !== null) {\n            message.proofOps = proof_1.ProofOps.fromPartial(object.proofOps);\n        }\n        else {\n            message.proofOps = undefined;\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = long_1.default.ZERO;\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = object.codespace;\n        }\n        else {\n            message.codespace = \"\";\n        }\n        return message;\n    },\n};\nconst baseResponseBeginBlock = {};\nexports.ResponseBeginBlock = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.events) {\n            exports.Event.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseBeginBlock);\n        message.events = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.events.push(exports.Event.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseBeginBlock);\n        message.events = [];\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(exports.Event.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.events) {\n            obj.events = message.events.map((e) => (e ? exports.Event.toJSON(e) : undefined));\n        }\n        else {\n            obj.events = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseBeginBlock);\n        message.events = [];\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(exports.Event.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseResponseCheckTx = {\n    code: 0,\n    log: \"\",\n    info: \"\",\n    gasWanted: long_1.default.ZERO,\n    gasUsed: long_1.default.ZERO,\n    codespace: \"\",\n};\nexports.ResponseCheckTx = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.code !== 0) {\n            writer.uint32(8).uint32(message.code);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        if (message.log !== \"\") {\n            writer.uint32(26).string(message.log);\n        }\n        if (message.info !== \"\") {\n            writer.uint32(34).string(message.info);\n        }\n        if (!message.gasWanted.isZero()) {\n            writer.uint32(40).int64(message.gasWanted);\n        }\n        if (!message.gasUsed.isZero()) {\n            writer.uint32(48).int64(message.gasUsed);\n        }\n        for (const v of message.events) {\n            exports.Event.encode(v, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.codespace !== \"\") {\n            writer.uint32(66).string(message.codespace);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseCheckTx);\n        message.events = [];\n        message.data = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.code = reader.uint32();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                case 3:\n                    message.log = reader.string();\n                    break;\n                case 4:\n                    message.info = reader.string();\n                    break;\n                case 5:\n                    message.gasWanted = reader.int64();\n                    break;\n                case 6:\n                    message.gasUsed = reader.int64();\n                    break;\n                case 7:\n                    message.events.push(exports.Event.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.codespace = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseCheckTx);\n        message.events = [];\n        message.data = new Uint8Array();\n        if (object.code !== undefined && object.code !== null) {\n            message.code = Number(object.code);\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = String(object.log);\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = String(object.info);\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = long_1.default.fromString(object.gasWanted);\n        }\n        else {\n            message.gasWanted = long_1.default.ZERO;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = long_1.default.fromString(object.gasUsed);\n        }\n        else {\n            message.gasUsed = long_1.default.ZERO;\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(exports.Event.fromJSON(e));\n            }\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = String(object.codespace);\n        }\n        else {\n            message.codespace = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.code !== undefined && (obj.code = message.code);\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.log !== undefined && (obj.log = message.log);\n        message.info !== undefined && (obj.info = message.info);\n        message.gasWanted !== undefined && (obj.gasWanted = (message.gasWanted || long_1.default.ZERO).toString());\n        message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || long_1.default.ZERO).toString());\n        if (message.events) {\n            obj.events = message.events.map((e) => (e ? exports.Event.toJSON(e) : undefined));\n        }\n        else {\n            obj.events = [];\n        }\n        message.codespace !== undefined && (obj.codespace = message.codespace);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseCheckTx);\n        message.events = [];\n        if (object.code !== undefined && object.code !== null) {\n            message.code = object.code;\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = object.log;\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = object.info;\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = object.gasWanted;\n        }\n        else {\n            message.gasWanted = long_1.default.ZERO;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = object.gasUsed;\n        }\n        else {\n            message.gasUsed = long_1.default.ZERO;\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(exports.Event.fromPartial(e));\n            }\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = object.codespace;\n        }\n        else {\n            message.codespace = \"\";\n        }\n        return message;\n    },\n};\nconst baseResponseDeliverTx = {\n    code: 0,\n    log: \"\",\n    info: \"\",\n    gasWanted: long_1.default.ZERO,\n    gasUsed: long_1.default.ZERO,\n    codespace: \"\",\n};\nexports.ResponseDeliverTx = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.code !== 0) {\n            writer.uint32(8).uint32(message.code);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        if (message.log !== \"\") {\n            writer.uint32(26).string(message.log);\n        }\n        if (message.info !== \"\") {\n            writer.uint32(34).string(message.info);\n        }\n        if (!message.gasWanted.isZero()) {\n            writer.uint32(40).int64(message.gasWanted);\n        }\n        if (!message.gasUsed.isZero()) {\n            writer.uint32(48).int64(message.gasUsed);\n        }\n        for (const v of message.events) {\n            exports.Event.encode(v, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.codespace !== \"\") {\n            writer.uint32(66).string(message.codespace);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseDeliverTx);\n        message.events = [];\n        message.data = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.code = reader.uint32();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                case 3:\n                    message.log = reader.string();\n                    break;\n                case 4:\n                    message.info = reader.string();\n                    break;\n                case 5:\n                    message.gasWanted = reader.int64();\n                    break;\n                case 6:\n                    message.gasUsed = reader.int64();\n                    break;\n                case 7:\n                    message.events.push(exports.Event.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.codespace = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseDeliverTx);\n        message.events = [];\n        message.data = new Uint8Array();\n        if (object.code !== undefined && object.code !== null) {\n            message.code = Number(object.code);\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = String(object.log);\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = String(object.info);\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = long_1.default.fromString(object.gasWanted);\n        }\n        else {\n            message.gasWanted = long_1.default.ZERO;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = long_1.default.fromString(object.gasUsed);\n        }\n        else {\n            message.gasUsed = long_1.default.ZERO;\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(exports.Event.fromJSON(e));\n            }\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = String(object.codespace);\n        }\n        else {\n            message.codespace = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.code !== undefined && (obj.code = message.code);\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.log !== undefined && (obj.log = message.log);\n        message.info !== undefined && (obj.info = message.info);\n        message.gasWanted !== undefined && (obj.gasWanted = (message.gasWanted || long_1.default.ZERO).toString());\n        message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || long_1.default.ZERO).toString());\n        if (message.events) {\n            obj.events = message.events.map((e) => (e ? exports.Event.toJSON(e) : undefined));\n        }\n        else {\n            obj.events = [];\n        }\n        message.codespace !== undefined && (obj.codespace = message.codespace);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseDeliverTx);\n        message.events = [];\n        if (object.code !== undefined && object.code !== null) {\n            message.code = object.code;\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = object.log;\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = object.info;\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = object.gasWanted;\n        }\n        else {\n            message.gasWanted = long_1.default.ZERO;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = object.gasUsed;\n        }\n        else {\n            message.gasUsed = long_1.default.ZERO;\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(exports.Event.fromPartial(e));\n            }\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = object.codespace;\n        }\n        else {\n            message.codespace = \"\";\n        }\n        return message;\n    },\n};\nconst baseResponseEndBlock = {};\nexports.ResponseEndBlock = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.validatorUpdates) {\n            exports.ValidatorUpdate.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.consensusParamUpdates !== undefined) {\n            exports.ConsensusParams.encode(message.consensusParamUpdates, writer.uint32(18).fork()).ldelim();\n        }\n        for (const v of message.events) {\n            exports.Event.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseEndBlock);\n        message.validatorUpdates = [];\n        message.events = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.validatorUpdates.push(exports.ValidatorUpdate.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.consensusParamUpdates = exports.ConsensusParams.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.events.push(exports.Event.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseEndBlock);\n        message.validatorUpdates = [];\n        message.events = [];\n        if (object.validatorUpdates !== undefined && object.validatorUpdates !== null) {\n            for (const e of object.validatorUpdates) {\n                message.validatorUpdates.push(exports.ValidatorUpdate.fromJSON(e));\n            }\n        }\n        if (object.consensusParamUpdates !== undefined && object.consensusParamUpdates !== null) {\n            message.consensusParamUpdates = exports.ConsensusParams.fromJSON(object.consensusParamUpdates);\n        }\n        else {\n            message.consensusParamUpdates = undefined;\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(exports.Event.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.validatorUpdates) {\n            obj.validatorUpdates = message.validatorUpdates.map((e) => (e ? exports.ValidatorUpdate.toJSON(e) : undefined));\n        }\n        else {\n            obj.validatorUpdates = [];\n        }\n        message.consensusParamUpdates !== undefined &&\n            (obj.consensusParamUpdates = message.consensusParamUpdates\n                ? exports.ConsensusParams.toJSON(message.consensusParamUpdates)\n                : undefined);\n        if (message.events) {\n            obj.events = message.events.map((e) => (e ? exports.Event.toJSON(e) : undefined));\n        }\n        else {\n            obj.events = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseEndBlock);\n        message.validatorUpdates = [];\n        message.events = [];\n        if (object.validatorUpdates !== undefined && object.validatorUpdates !== null) {\n            for (const e of object.validatorUpdates) {\n                message.validatorUpdates.push(exports.ValidatorUpdate.fromPartial(e));\n            }\n        }\n        if (object.consensusParamUpdates !== undefined && object.consensusParamUpdates !== null) {\n            message.consensusParamUpdates = exports.ConsensusParams.fromPartial(object.consensusParamUpdates);\n        }\n        else {\n            message.consensusParamUpdates = undefined;\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(exports.Event.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseResponseCommit = { retainHeight: long_1.default.ZERO };\nexports.ResponseCommit = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        if (!message.retainHeight.isZero()) {\n            writer.uint32(24).int64(message.retainHeight);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseCommit);\n        message.data = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                case 3:\n                    message.retainHeight = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseCommit);\n        message.data = new Uint8Array();\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        if (object.retainHeight !== undefined && object.retainHeight !== null) {\n            message.retainHeight = long_1.default.fromString(object.retainHeight);\n        }\n        else {\n            message.retainHeight = long_1.default.ZERO;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.retainHeight !== undefined && (obj.retainHeight = (message.retainHeight || long_1.default.ZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseCommit);\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        if (object.retainHeight !== undefined && object.retainHeight !== null) {\n            message.retainHeight = object.retainHeight;\n        }\n        else {\n            message.retainHeight = long_1.default.ZERO;\n        }\n        return message;\n    },\n};\nconst baseResponseListSnapshots = {};\nexports.ResponseListSnapshots = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.snapshots) {\n            exports.Snapshot.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseListSnapshots);\n        message.snapshots = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.snapshots.push(exports.Snapshot.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseListSnapshots);\n        message.snapshots = [];\n        if (object.snapshots !== undefined && object.snapshots !== null) {\n            for (const e of object.snapshots) {\n                message.snapshots.push(exports.Snapshot.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.snapshots) {\n            obj.snapshots = message.snapshots.map((e) => (e ? exports.Snapshot.toJSON(e) : undefined));\n        }\n        else {\n            obj.snapshots = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseListSnapshots);\n        message.snapshots = [];\n        if (object.snapshots !== undefined && object.snapshots !== null) {\n            for (const e of object.snapshots) {\n                message.snapshots.push(exports.Snapshot.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseResponseOfferSnapshot = { result: 0 };\nexports.ResponseOfferSnapshot = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.result !== 0) {\n            writer.uint32(8).int32(message.result);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseOfferSnapshot);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseOfferSnapshot);\n        if (object.result !== undefined && object.result !== null) {\n            message.result = responseOfferSnapshot_ResultFromJSON(object.result);\n        }\n        else {\n            message.result = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.result !== undefined && (obj.result = responseOfferSnapshot_ResultToJSON(message.result));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseOfferSnapshot);\n        if (object.result !== undefined && object.result !== null) {\n            message.result = object.result;\n        }\n        else {\n            message.result = 0;\n        }\n        return message;\n    },\n};\nconst baseResponseLoadSnapshotChunk = {};\nexports.ResponseLoadSnapshotChunk = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.chunk.length !== 0) {\n            writer.uint32(10).bytes(message.chunk);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseLoadSnapshotChunk);\n        message.chunk = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.chunk = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseLoadSnapshotChunk);\n        message.chunk = new Uint8Array();\n        if (object.chunk !== undefined && object.chunk !== null) {\n            message.chunk = bytesFromBase64(object.chunk);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.chunk !== undefined &&\n            (obj.chunk = base64FromBytes(message.chunk !== undefined ? message.chunk : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseLoadSnapshotChunk);\n        if (object.chunk !== undefined && object.chunk !== null) {\n            message.chunk = object.chunk;\n        }\n        else {\n            message.chunk = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseResponseApplySnapshotChunk = { result: 0, refetchChunks: 0, rejectSenders: \"\" };\nexports.ResponseApplySnapshotChunk = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.result !== 0) {\n            writer.uint32(8).int32(message.result);\n        }\n        writer.uint32(18).fork();\n        for (const v of message.refetchChunks) {\n            writer.uint32(v);\n        }\n        writer.ldelim();\n        for (const v of message.rejectSenders) {\n            writer.uint32(26).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResponseApplySnapshotChunk);\n        message.refetchChunks = [];\n        message.rejectSenders = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.refetchChunks.push(reader.uint32());\n                        }\n                    }\n                    else {\n                        message.refetchChunks.push(reader.uint32());\n                    }\n                    break;\n                case 3:\n                    message.rejectSenders.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResponseApplySnapshotChunk);\n        message.refetchChunks = [];\n        message.rejectSenders = [];\n        if (object.result !== undefined && object.result !== null) {\n            message.result = responseApplySnapshotChunk_ResultFromJSON(object.result);\n        }\n        else {\n            message.result = 0;\n        }\n        if (object.refetchChunks !== undefined && object.refetchChunks !== null) {\n            for (const e of object.refetchChunks) {\n                message.refetchChunks.push(Number(e));\n            }\n        }\n        if (object.rejectSenders !== undefined && object.rejectSenders !== null) {\n            for (const e of object.rejectSenders) {\n                message.rejectSenders.push(String(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.result !== undefined && (obj.result = responseApplySnapshotChunk_ResultToJSON(message.result));\n        if (message.refetchChunks) {\n            obj.refetchChunks = message.refetchChunks.map((e) => e);\n        }\n        else {\n            obj.refetchChunks = [];\n        }\n        if (message.rejectSenders) {\n            obj.rejectSenders = message.rejectSenders.map((e) => e);\n        }\n        else {\n            obj.rejectSenders = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResponseApplySnapshotChunk);\n        message.refetchChunks = [];\n        message.rejectSenders = [];\n        if (object.result !== undefined && object.result !== null) {\n            message.result = object.result;\n        }\n        else {\n            message.result = 0;\n        }\n        if (object.refetchChunks !== undefined && object.refetchChunks !== null) {\n            for (const e of object.refetchChunks) {\n                message.refetchChunks.push(e);\n            }\n        }\n        if (object.rejectSenders !== undefined && object.rejectSenders !== null) {\n            for (const e of object.rejectSenders) {\n                message.rejectSenders.push(e);\n            }\n        }\n        return message;\n    },\n};\nconst baseConsensusParams = {};\nexports.ConsensusParams = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.block !== undefined) {\n            exports.BlockParams.encode(message.block, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.evidence !== undefined) {\n            params_1.EvidenceParams.encode(message.evidence, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.validator !== undefined) {\n            params_1.ValidatorParams.encode(message.validator, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.version !== undefined) {\n            params_1.VersionParams.encode(message.version, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseConsensusParams);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.block = exports.BlockParams.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.evidence = params_1.EvidenceParams.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.validator = params_1.ValidatorParams.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.version = params_1.VersionParams.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseConsensusParams);\n        if (object.block !== undefined && object.block !== null) {\n            message.block = exports.BlockParams.fromJSON(object.block);\n        }\n        else {\n            message.block = undefined;\n        }\n        if (object.evidence !== undefined && object.evidence !== null) {\n            message.evidence = params_1.EvidenceParams.fromJSON(object.evidence);\n        }\n        else {\n            message.evidence = undefined;\n        }\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = params_1.ValidatorParams.fromJSON(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        if (object.version !== undefined && object.version !== null) {\n            message.version = params_1.VersionParams.fromJSON(object.version);\n        }\n        else {\n            message.version = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.block !== undefined &&\n            (obj.block = message.block ? exports.BlockParams.toJSON(message.block) : undefined);\n        message.evidence !== undefined &&\n            (obj.evidence = message.evidence ? params_1.EvidenceParams.toJSON(message.evidence) : undefined);\n        message.validator !== undefined &&\n            (obj.validator = message.validator ? params_1.ValidatorParams.toJSON(message.validator) : undefined);\n        message.version !== undefined &&\n            (obj.version = message.version ? params_1.VersionParams.toJSON(message.version) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseConsensusParams);\n        if (object.block !== undefined && object.block !== null) {\n            message.block = exports.BlockParams.fromPartial(object.block);\n        }\n        else {\n            message.block = undefined;\n        }\n        if (object.evidence !== undefined && object.evidence !== null) {\n            message.evidence = params_1.EvidenceParams.fromPartial(object.evidence);\n        }\n        else {\n            message.evidence = undefined;\n        }\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = params_1.ValidatorParams.fromPartial(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        if (object.version !== undefined && object.version !== null) {\n            message.version = params_1.VersionParams.fromPartial(object.version);\n        }\n        else {\n            message.version = undefined;\n        }\n        return message;\n    },\n};\nconst baseBlockParams = { maxBytes: long_1.default.ZERO, maxGas: long_1.default.ZERO };\nexports.BlockParams = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (!message.maxBytes.isZero()) {\n            writer.uint32(8).int64(message.maxBytes);\n        }\n        if (!message.maxGas.isZero()) {\n            writer.uint32(16).int64(message.maxGas);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseBlockParams);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.maxBytes = reader.int64();\n                    break;\n                case 2:\n                    message.maxGas = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseBlockParams);\n        if (object.maxBytes !== undefined && object.maxBytes !== null) {\n            message.maxBytes = long_1.default.fromString(object.maxBytes);\n        }\n        else {\n            message.maxBytes = long_1.default.ZERO;\n        }\n        if (object.maxGas !== undefined && object.maxGas !== null) {\n            message.maxGas = long_1.default.fromString(object.maxGas);\n        }\n        else {\n            message.maxGas = long_1.default.ZERO;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.maxBytes !== undefined && (obj.maxBytes = (message.maxBytes || long_1.default.ZERO).toString());\n        message.maxGas !== undefined && (obj.maxGas = (message.maxGas || long_1.default.ZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseBlockParams);\n        if (object.maxBytes !== undefined && object.maxBytes !== null) {\n            message.maxBytes = object.maxBytes;\n        }\n        else {\n            message.maxBytes = long_1.default.ZERO;\n        }\n        if (object.maxGas !== undefined && object.maxGas !== null) {\n            message.maxGas = object.maxGas;\n        }\n        else {\n            message.maxGas = long_1.default.ZERO;\n        }\n        return message;\n    },\n};\nconst baseLastCommitInfo = { round: 0 };\nexports.LastCommitInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.round !== 0) {\n            writer.uint32(8).int32(message.round);\n        }\n        for (const v of message.votes) {\n            exports.VoteInfo.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseLastCommitInfo);\n        message.votes = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.round = reader.int32();\n                    break;\n                case 2:\n                    message.votes.push(exports.VoteInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseLastCommitInfo);\n        message.votes = [];\n        if (object.round !== undefined && object.round !== null) {\n            message.round = Number(object.round);\n        }\n        else {\n            message.round = 0;\n        }\n        if (object.votes !== undefined && object.votes !== null) {\n            for (const e of object.votes) {\n                message.votes.push(exports.VoteInfo.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.round !== undefined && (obj.round = message.round);\n        if (message.votes) {\n            obj.votes = message.votes.map((e) => (e ? exports.VoteInfo.toJSON(e) : undefined));\n        }\n        else {\n            obj.votes = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseLastCommitInfo);\n        message.votes = [];\n        if (object.round !== undefined && object.round !== null) {\n            message.round = object.round;\n        }\n        else {\n            message.round = 0;\n        }\n        if (object.votes !== undefined && object.votes !== null) {\n            for (const e of object.votes) {\n                message.votes.push(exports.VoteInfo.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseEvent = { type: \"\" };\nexports.Event = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.type !== \"\") {\n            writer.uint32(10).string(message.type);\n        }\n        for (const v of message.attributes) {\n            exports.EventAttribute.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseEvent);\n        message.attributes = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.string();\n                    break;\n                case 2:\n                    message.attributes.push(exports.EventAttribute.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseEvent);\n        message.attributes = [];\n        if (object.type !== undefined && object.type !== null) {\n            message.type = String(object.type);\n        }\n        else {\n            message.type = \"\";\n        }\n        if (object.attributes !== undefined && object.attributes !== null) {\n            for (const e of object.attributes) {\n                message.attributes.push(exports.EventAttribute.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined && (obj.type = message.type);\n        if (message.attributes) {\n            obj.attributes = message.attributes.map((e) => (e ? exports.EventAttribute.toJSON(e) : undefined));\n        }\n        else {\n            obj.attributes = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseEvent);\n        message.attributes = [];\n        if (object.type !== undefined && object.type !== null) {\n            message.type = object.type;\n        }\n        else {\n            message.type = \"\";\n        }\n        if (object.attributes !== undefined && object.attributes !== null) {\n            for (const e of object.attributes) {\n                message.attributes.push(exports.EventAttribute.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseEventAttribute = { index: false };\nexports.EventAttribute = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.value.length !== 0) {\n            writer.uint32(18).bytes(message.value);\n        }\n        if (message.index === true) {\n            writer.uint32(24).bool(message.index);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseEventAttribute);\n        message.key = new Uint8Array();\n        message.value = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                case 3:\n                    message.index = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseEventAttribute);\n        message.key = new Uint8Array();\n        message.value = new Uint8Array();\n        if (object.key !== undefined && object.key !== null) {\n            message.key = bytesFromBase64(object.key);\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = bytesFromBase64(object.value);\n        }\n        if (object.index !== undefined && object.index !== null) {\n            message.index = Boolean(object.index);\n        }\n        else {\n            message.index = false;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined &&\n            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n        message.value !== undefined &&\n            (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));\n        message.index !== undefined && (obj.index = message.index);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseEventAttribute);\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = new Uint8Array();\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = object.value;\n        }\n        else {\n            message.value = new Uint8Array();\n        }\n        if (object.index !== undefined && object.index !== null) {\n            message.index = object.index;\n        }\n        else {\n            message.index = false;\n        }\n        return message;\n    },\n};\nconst baseTxResult = { height: long_1.default.ZERO, index: 0 };\nexports.TxResult = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (!message.height.isZero()) {\n            writer.uint32(8).int64(message.height);\n        }\n        if (message.index !== 0) {\n            writer.uint32(16).uint32(message.index);\n        }\n        if (message.tx.length !== 0) {\n            writer.uint32(26).bytes(message.tx);\n        }\n        if (message.result !== undefined) {\n            exports.ResponseDeliverTx.encode(message.result, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseTxResult);\n        message.tx = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = reader.int64();\n                    break;\n                case 2:\n                    message.index = reader.uint32();\n                    break;\n                case 3:\n                    message.tx = reader.bytes();\n                    break;\n                case 4:\n                    message.result = exports.ResponseDeliverTx.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseTxResult);\n        message.tx = new Uint8Array();\n        if (object.height !== undefined && object.height !== null) {\n            message.height = long_1.default.fromString(object.height);\n        }\n        else {\n            message.height = long_1.default.ZERO;\n        }\n        if (object.index !== undefined && object.index !== null) {\n            message.index = Number(object.index);\n        }\n        else {\n            message.index = 0;\n        }\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = bytesFromBase64(object.tx);\n        }\n        if (object.result !== undefined && object.result !== null) {\n            message.result = exports.ResponseDeliverTx.fromJSON(object.result);\n        }\n        else {\n            message.result = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n        message.index !== undefined && (obj.index = message.index);\n        message.tx !== undefined &&\n            (obj.tx = base64FromBytes(message.tx !== undefined ? message.tx : new Uint8Array()));\n        message.result !== undefined &&\n            (obj.result = message.result ? exports.ResponseDeliverTx.toJSON(message.result) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseTxResult);\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = long_1.default.ZERO;\n        }\n        if (object.index !== undefined && object.index !== null) {\n            message.index = object.index;\n        }\n        else {\n            message.index = 0;\n        }\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = object.tx;\n        }\n        else {\n            message.tx = new Uint8Array();\n        }\n        if (object.result !== undefined && object.result !== null) {\n            message.result = exports.ResponseDeliverTx.fromPartial(object.result);\n        }\n        else {\n            message.result = undefined;\n        }\n        return message;\n    },\n};\nconst baseValidator = { power: long_1.default.ZERO };\nexports.Validator = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.address.length !== 0) {\n            writer.uint32(10).bytes(message.address);\n        }\n        if (!message.power.isZero()) {\n            writer.uint32(24).int64(message.power);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseValidator);\n        message.address = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.bytes();\n                    break;\n                case 3:\n                    message.power = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseValidator);\n        message.address = new Uint8Array();\n        if (object.address !== undefined && object.address !== null) {\n            message.address = bytesFromBase64(object.address);\n        }\n        if (object.power !== undefined && object.power !== null) {\n            message.power = long_1.default.fromString(object.power);\n        }\n        else {\n            message.power = long_1.default.ZERO;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined &&\n            (obj.address = base64FromBytes(message.address !== undefined ? message.address : new Uint8Array()));\n        message.power !== undefined && (obj.power = (message.power || long_1.default.ZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseValidator);\n        if (object.address !== undefined && object.address !== null) {\n            message.address = object.address;\n        }\n        else {\n            message.address = new Uint8Array();\n        }\n        if (object.power !== undefined && object.power !== null) {\n            message.power = object.power;\n        }\n        else {\n            message.power = long_1.default.ZERO;\n        }\n        return message;\n    },\n};\nconst baseValidatorUpdate = { power: long_1.default.ZERO };\nexports.ValidatorUpdate = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.pubKey !== undefined) {\n            keys_1.PublicKey.encode(message.pubKey, writer.uint32(10).fork()).ldelim();\n        }\n        if (!message.power.isZero()) {\n            writer.uint32(16).int64(message.power);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseValidatorUpdate);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.pubKey = keys_1.PublicKey.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.power = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseValidatorUpdate);\n        if (object.pubKey !== undefined && object.pubKey !== null) {\n            message.pubKey = keys_1.PublicKey.fromJSON(object.pubKey);\n        }\n        else {\n            message.pubKey = undefined;\n        }\n        if (object.power !== undefined && object.power !== null) {\n            message.power = long_1.default.fromString(object.power);\n        }\n        else {\n            message.power = long_1.default.ZERO;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.pubKey !== undefined &&\n            (obj.pubKey = message.pubKey ? keys_1.PublicKey.toJSON(message.pubKey) : undefined);\n        message.power !== undefined && (obj.power = (message.power || long_1.default.ZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseValidatorUpdate);\n        if (object.pubKey !== undefined && object.pubKey !== null) {\n            message.pubKey = keys_1.PublicKey.fromPartial(object.pubKey);\n        }\n        else {\n            message.pubKey = undefined;\n        }\n        if (object.power !== undefined && object.power !== null) {\n            message.power = object.power;\n        }\n        else {\n            message.power = long_1.default.ZERO;\n        }\n        return message;\n    },\n};\nconst baseVoteInfo = { signedLastBlock: false };\nexports.VoteInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.validator !== undefined) {\n            exports.Validator.encode(message.validator, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.signedLastBlock === true) {\n            writer.uint32(16).bool(message.signedLastBlock);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseVoteInfo);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.validator = exports.Validator.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.signedLastBlock = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseVoteInfo);\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = exports.Validator.fromJSON(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        if (object.signedLastBlock !== undefined && object.signedLastBlock !== null) {\n            message.signedLastBlock = Boolean(object.signedLastBlock);\n        }\n        else {\n            message.signedLastBlock = false;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.validator !== undefined &&\n            (obj.validator = message.validator ? exports.Validator.toJSON(message.validator) : undefined);\n        message.signedLastBlock !== undefined && (obj.signedLastBlock = message.signedLastBlock);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseVoteInfo);\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = exports.Validator.fromPartial(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        if (object.signedLastBlock !== undefined && object.signedLastBlock !== null) {\n            message.signedLastBlock = object.signedLastBlock;\n        }\n        else {\n            message.signedLastBlock = false;\n        }\n        return message;\n    },\n};\nconst baseEvidence = { type: 0, height: long_1.default.ZERO, totalVotingPower: long_1.default.ZERO };\nexports.Evidence = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.type !== 0) {\n            writer.uint32(8).int32(message.type);\n        }\n        if (message.validator !== undefined) {\n            exports.Validator.encode(message.validator, writer.uint32(18).fork()).ldelim();\n        }\n        if (!message.height.isZero()) {\n            writer.uint32(24).int64(message.height);\n        }\n        if (message.time !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.time), writer.uint32(34).fork()).ldelim();\n        }\n        if (!message.totalVotingPower.isZero()) {\n            writer.uint32(40).int64(message.totalVotingPower);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseEvidence);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.validator = exports.Validator.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.height = reader.int64();\n                    break;\n                case 4:\n                    message.time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.totalVotingPower = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseEvidence);\n        if (object.type !== undefined && object.type !== null) {\n            message.type = evidenceTypeFromJSON(object.type);\n        }\n        else {\n            message.type = 0;\n        }\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = exports.Validator.fromJSON(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = long_1.default.fromString(object.height);\n        }\n        else {\n            message.height = long_1.default.ZERO;\n        }\n        if (object.time !== undefined && object.time !== null) {\n            message.time = fromJsonTimestamp(object.time);\n        }\n        else {\n            message.time = undefined;\n        }\n        if (object.totalVotingPower !== undefined && object.totalVotingPower !== null) {\n            message.totalVotingPower = long_1.default.fromString(object.totalVotingPower);\n        }\n        else {\n            message.totalVotingPower = long_1.default.ZERO;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined && (obj.type = evidenceTypeToJSON(message.type));\n        message.validator !== undefined &&\n            (obj.validator = message.validator ? exports.Validator.toJSON(message.validator) : undefined);\n        message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n        message.time !== undefined && (obj.time = message.time.toISOString());\n        message.totalVotingPower !== undefined &&\n            (obj.totalVotingPower = (message.totalVotingPower || long_1.default.ZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseEvidence);\n        if (object.type !== undefined && object.type !== null) {\n            message.type = object.type;\n        }\n        else {\n            message.type = 0;\n        }\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = exports.Validator.fromPartial(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = long_1.default.ZERO;\n        }\n        if (object.time !== undefined && object.time !== null) {\n            message.time = object.time;\n        }\n        else {\n            message.time = undefined;\n        }\n        if (object.totalVotingPower !== undefined && object.totalVotingPower !== null) {\n            message.totalVotingPower = object.totalVotingPower;\n        }\n        else {\n            message.totalVotingPower = long_1.default.ZERO;\n        }\n        return message;\n    },\n};\nconst baseSnapshot = { height: long_1.default.UZERO, format: 0, chunks: 0 };\nexports.Snapshot = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (!message.height.isZero()) {\n            writer.uint32(8).uint64(message.height);\n        }\n        if (message.format !== 0) {\n            writer.uint32(16).uint32(message.format);\n        }\n        if (message.chunks !== 0) {\n            writer.uint32(24).uint32(message.chunks);\n        }\n        if (message.hash.length !== 0) {\n            writer.uint32(34).bytes(message.hash);\n        }\n        if (message.metadata.length !== 0) {\n            writer.uint32(42).bytes(message.metadata);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseSnapshot);\n        message.hash = new Uint8Array();\n        message.metadata = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = reader.uint64();\n                    break;\n                case 2:\n                    message.format = reader.uint32();\n                    break;\n                case 3:\n                    message.chunks = reader.uint32();\n                    break;\n                case 4:\n                    message.hash = reader.bytes();\n                    break;\n                case 5:\n                    message.metadata = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseSnapshot);\n        message.hash = new Uint8Array();\n        message.metadata = new Uint8Array();\n        if (object.height !== undefined && object.height !== null) {\n            message.height = long_1.default.fromString(object.height);\n        }\n        else {\n            message.height = long_1.default.UZERO;\n        }\n        if (object.format !== undefined && object.format !== null) {\n            message.format = Number(object.format);\n        }\n        else {\n            message.format = 0;\n        }\n        if (object.chunks !== undefined && object.chunks !== null) {\n            message.chunks = Number(object.chunks);\n        }\n        else {\n            message.chunks = 0;\n        }\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = bytesFromBase64(object.hash);\n        }\n        if (object.metadata !== undefined && object.metadata !== null) {\n            message.metadata = bytesFromBase64(object.metadata);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined && (obj.height = (message.height || long_1.default.UZERO).toString());\n        message.format !== undefined && (obj.format = message.format);\n        message.chunks !== undefined && (obj.chunks = message.chunks);\n        message.hash !== undefined &&\n            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n        message.metadata !== undefined &&\n            (obj.metadata = base64FromBytes(message.metadata !== undefined ? message.metadata : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseSnapshot);\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = long_1.default.UZERO;\n        }\n        if (object.format !== undefined && object.format !== null) {\n            message.format = object.format;\n        }\n        else {\n            message.format = 0;\n        }\n        if (object.chunks !== undefined && object.chunks !== null) {\n            message.chunks = object.chunks;\n        }\n        else {\n            message.chunks = 0;\n        }\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = object.hash;\n        }\n        else {\n            message.hash = new Uint8Array();\n        }\n        if (object.metadata !== undefined && object.metadata !== null) {\n            message.metadata = object.metadata;\n        }\n        else {\n            message.metadata = new Uint8Array();\n        }\n        return message;\n    },\n};\nclass ABCIApplicationClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n        this.Echo = this.Echo.bind(this);\n        this.Flush = this.Flush.bind(this);\n        this.Info = this.Info.bind(this);\n        this.SetOption = this.SetOption.bind(this);\n        this.DeliverTx = this.DeliverTx.bind(this);\n        this.CheckTx = this.CheckTx.bind(this);\n        this.Query = this.Query.bind(this);\n        this.Commit = this.Commit.bind(this);\n        this.InitChain = this.InitChain.bind(this);\n        this.BeginBlock = this.BeginBlock.bind(this);\n        this.EndBlock = this.EndBlock.bind(this);\n        this.ListSnapshots = this.ListSnapshots.bind(this);\n        this.OfferSnapshot = this.OfferSnapshot.bind(this);\n        this.LoadSnapshotChunk = this.LoadSnapshotChunk.bind(this);\n        this.ApplySnapshotChunk = this.ApplySnapshotChunk.bind(this);\n    }\n    Echo(request) {\n        const data = exports.RequestEcho.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Echo\", data);\n        return promise.then((data) => exports.ResponseEcho.decode(new minimal_1.default.Reader(data)));\n    }\n    Flush(request) {\n        const data = exports.RequestFlush.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Flush\", data);\n        return promise.then((data) => exports.ResponseFlush.decode(new minimal_1.default.Reader(data)));\n    }\n    Info(request) {\n        const data = exports.RequestInfo.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Info\", data);\n        return promise.then((data) => exports.ResponseInfo.decode(new minimal_1.default.Reader(data)));\n    }\n    SetOption(request) {\n        const data = exports.RequestSetOption.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"SetOption\", data);\n        return promise.then((data) => exports.ResponseSetOption.decode(new minimal_1.default.Reader(data)));\n    }\n    DeliverTx(request) {\n        const data = exports.RequestDeliverTx.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"DeliverTx\", data);\n        return promise.then((data) => exports.ResponseDeliverTx.decode(new minimal_1.default.Reader(data)));\n    }\n    CheckTx(request) {\n        const data = exports.RequestCheckTx.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"CheckTx\", data);\n        return promise.then((data) => exports.ResponseCheckTx.decode(new minimal_1.default.Reader(data)));\n    }\n    Query(request) {\n        const data = exports.RequestQuery.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Query\", data);\n        return promise.then((data) => exports.ResponseQuery.decode(new minimal_1.default.Reader(data)));\n    }\n    Commit(request) {\n        const data = exports.RequestCommit.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Commit\", data);\n        return promise.then((data) => exports.ResponseCommit.decode(new minimal_1.default.Reader(data)));\n    }\n    InitChain(request) {\n        const data = exports.RequestInitChain.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"InitChain\", data);\n        return promise.then((data) => exports.ResponseInitChain.decode(new minimal_1.default.Reader(data)));\n    }\n    BeginBlock(request) {\n        const data = exports.RequestBeginBlock.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"BeginBlock\", data);\n        return promise.then((data) => exports.ResponseBeginBlock.decode(new minimal_1.default.Reader(data)));\n    }\n    EndBlock(request) {\n        const data = exports.RequestEndBlock.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"EndBlock\", data);\n        return promise.then((data) => exports.ResponseEndBlock.decode(new minimal_1.default.Reader(data)));\n    }\n    ListSnapshots(request) {\n        const data = exports.RequestListSnapshots.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"ListSnapshots\", data);\n        return promise.then((data) => exports.ResponseListSnapshots.decode(new minimal_1.default.Reader(data)));\n    }\n    OfferSnapshot(request) {\n        const data = exports.RequestOfferSnapshot.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"OfferSnapshot\", data);\n        return promise.then((data) => exports.ResponseOfferSnapshot.decode(new minimal_1.default.Reader(data)));\n    }\n    LoadSnapshotChunk(request) {\n        const data = exports.RequestLoadSnapshotChunk.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"LoadSnapshotChunk\", data);\n        return promise.then((data) => exports.ResponseLoadSnapshotChunk.decode(new minimal_1.default.Reader(data)));\n    }\n    ApplySnapshotChunk(request) {\n        const data = exports.RequestApplySnapshotChunk.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"ApplySnapshotChunk\", data);\n        return promise.then((data) => exports.ResponseApplySnapshotChunk.decode(new minimal_1.default.Reader(data)));\n    }\n}\nexports.ABCIApplicationClientImpl = ABCIApplicationClientImpl;\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction toTimestamp(date) {\n    const seconds = numberToLong(date.getTime() / 1000);\n    const nanos = (date.getTime() % 1000) * 1000000;\n    return { seconds, nanos };\n}\nfunction fromTimestamp(t) {\n    let millis = t.seconds.toNumber() * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return o;\n    }\n    else if (typeof o === \"string\") {\n        return new Date(o);\n    }\n    else {\n        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n    }\n}\nfunction numberToLong(number) {\n    return long_1.default.fromNumber(number);\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"script"}