{"ast":null,"code":"// -- NetworkMonitor --------------------------------------------------------- //\nclass NetworkMonitor {\n  constructor() {\n    this._eventEmitters = [];\n\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined') {\n      window.addEventListener('online', () => this.trigger('online'));\n      window.addEventListener('offline', () => this.trigger('offline'));\n    }\n  }\n\n  on(event, callback) {\n    this._eventEmitters.push({\n      event,\n      callback\n    });\n  }\n\n  trigger(event) {\n    let eventEmitters = [];\n\n    if (event) {\n      eventEmitters = this._eventEmitters.filter(eventEmitter => eventEmitter.event === event);\n    }\n\n    eventEmitters.forEach(eventEmitter => {\n      eventEmitter.callback();\n    });\n  }\n\n}\n\nexport default NetworkMonitor;","map":{"version":3,"sources":["../../../../../../../src/@terra-money/wallet-provider/modules/walletconnect/impl/socket-transport/network.ts"],"names":[],"mappings":"AAMA;AAEA,MAAM,cAAN,CAAoB;AAGlB,EAAA,WAAA,GAAA;AACE,SAAK,cAAL,GAAsB,EAAtB;;AAEA,QACE,OAAO,MAAP,KAAkB,WAAlB,IACA,OAAQ,MAAc,CAAC,gBAAvB,KAA4C,WAF9C,EAGE;AACA,MAAA,MAAM,CAAC,gBAAP,CAAwB,QAAxB,EAAkC,MAAM,KAAK,OAAL,CAAa,QAAb,CAAxC;AACA,MAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,MAAM,KAAK,OAAL,CAAa,SAAb,CAAzC;AACD;AACF;;AAEM,EAAA,EAAE,CAAC,KAAD,EAAsB,QAAtB,EAA0C;AACjD,SAAK,cAAL,CAAoB,IAApB,CAAyB;AACvB,MAAA,KADuB;AAEvB,MAAA;AAFuB,KAAzB;AAID;;AAEM,EAAA,OAAO,CAAC,KAAD,EAAoB;AAChC,QAAI,aAAa,GAA2B,EAA5C;;AAEA,QAAI,KAAJ,EAAW;AACT,MAAA,aAAa,GAAG,KAAK,cAAL,CAAoB,MAApB,CACb,YAAD,IAAwC,YAAY,CAAC,KAAb,KAAuB,KADjD,CAAhB;AAGD;;AAED,IAAA,aAAa,CAAC,OAAd,CAAuB,YAAD,IAAuC;AAC3D,MAAA,YAAY,CAAC,QAAb;AACD,KAFD;AAGD;;AAlCiB;;AAqCpB,eAAe,cAAf","sourcesContent":["import {\n  NetworkEvent,\n  INetworkEventEmitter,\n  INetworkMonitor,\n} from '@walletconnect/types';\n\n// -- NetworkMonitor --------------------------------------------------------- //\n\nclass NetworkMonitor implements INetworkMonitor {\n  private _eventEmitters: INetworkEventEmitter[];\n\n  constructor() {\n    this._eventEmitters = [];\n\n    if (\n      typeof window !== 'undefined' &&\n      typeof (window as any).addEventListener !== 'undefined'\n    ) {\n      window.addEventListener('online', () => this.trigger('online'));\n      window.addEventListener('offline', () => this.trigger('offline'));\n    }\n  }\n\n  public on(event: NetworkEvent, callback: () => void): void {\n    this._eventEmitters.push({\n      event,\n      callback,\n    });\n  }\n\n  public trigger(event: NetworkEvent): void {\n    let eventEmitters: INetworkEventEmitter[] = [];\n\n    if (event) {\n      eventEmitters = this._eventEmitters.filter(\n        (eventEmitter: INetworkEventEmitter) => eventEmitter.event === event,\n      );\n    }\n\n    eventEmitters.forEach((eventEmitter: INetworkEventEmitter) => {\n      eventEmitter.callback();\n    });\n  }\n}\n\nexport default NetworkMonitor;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}