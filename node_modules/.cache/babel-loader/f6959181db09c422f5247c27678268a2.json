{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hargu\\\\Desktop\\\\Luna Classic\\\\Hargun\\\\src\\\\components\\\\YourBalance.tsx\",\n    _s = $RefreshSig$();\n\nimport { LCDClient } from '@terra-money/terra.js';\nimport { useConnectedWallet } from '@terra-money/wallet-provider';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function YourBalance() {\n  _s();\n\n  const connectedWallet = useConnectedWallet();\n  const [bank, setBank] = useState();\n  const lcd = useMemo(() => {\n    if (!connectedWallet) {\n      return null;\n    }\n\n    return new LCDClient({\n      URL: connectedWallet.network.lcd,\n      chainID: connectedWallet.network.chainID\n    });\n  }, [connectedWallet]);\n  useEffect(() => {\n    if (connectedWallet && lcd) {\n      lcd.bank.balance(connectedWallet.walletAddress).then(_ref => {\n        let [coins] = _ref;\n        setBank(parseInt(coins.toString()) / 1000000 + ' UST');\n      });\n    } else {\n      setBank(null);\n    }\n  }, [connectedWallet, lcd]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: \"Your Balance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), bank && /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        color: 'white'\n      },\n      children: bank\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this), !connectedWallet && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'white'\n      },\n      children: \"Wallet not connected!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(YourBalance, \"YKMB0WtIGX/Q0sR4P8yfohDmPhQ=\", false, function () {\n  return [useConnectedWallet];\n});\n\n_c = YourBalance;\n\nvar _c;\n\n$RefreshReg$(_c, \"YourBalance\");","map":{"version":3,"sources":["C:/Users/hargu/Desktop/Luna Classic/Hargun/src/components/YourBalance.tsx"],"names":["LCDClient","useConnectedWallet","React","useEffect","useMemo","useState","YourBalance","connectedWallet","bank","setBank","lcd","URL","network","chainID","balance","walletAddress","then","coins","parseInt","toString","color"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,uBAA1B;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,QAAoD,OAApD;;AAEA,OAAO,SAASC,WAAT,GAAuB;AAAA;;AAC5B,QAAMC,eAAe,GAAGN,kBAAkB,EAA1C;AAEA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,EAAhC;AAEA,QAAMK,GAAG,GAAGN,OAAO,CAAC,MAAM;AACxB,QAAI,CAACG,eAAL,EAAsB;AACpB,aAAO,IAAP;AACD;;AAED,WAAO,IAAIP,SAAJ,CAAc;AACnBW,MAAAA,GAAG,EAAEJ,eAAe,CAACK,OAAhB,CAAwBF,GADV;AAEnBG,MAAAA,OAAO,EAAEN,eAAe,CAACK,OAAhB,CAAwBC;AAFd,KAAd,CAAP;AAID,GATkB,EAShB,CAACN,eAAD,CATgB,CAAnB;AAWAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,eAAe,IAAIG,GAAvB,EAA4B;AAC1BA,MAAAA,GAAG,CAACF,IAAJ,CAASM,OAAT,CAAiBP,eAAe,CAACQ,aAAjC,EAAgDC,IAAhD,CAAqD,QAAa;AAAA,YAAZ,CAACC,KAAD,CAAY;AAChER,QAAAA,OAAO,CAACS,QAAQ,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,GAA4B,OAA5B,GAAuC,MAAxC,CAAP;AACD,OAFD;AAGD,KAJD,MAIO;AACLV,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GARQ,EAQN,CAACF,eAAD,EAAkBG,GAAlB,CARM,CAAT;AAUA,sBACE;AAAA,4BACE;AAAI,MAAA,KAAK,EAAE;AAACU,QAAAA,KAAK,EAAE;AAAR,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGZ,IAAI,iBAAI;AAAK,MAAA,KAAK,EAAE;AAACY,QAAAA,KAAK,EAAE;AAAR,OAAZ;AAAA,gBAA+BZ;AAA/B;AAAA;AAAA;AAAA;AAAA,YAFX,EAGG,CAACD,eAAD,iBAAoB;AAAG,MAAA,KAAK,EAAE;AAACa,QAAAA,KAAK,EAAE;AAAR,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHvB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAjCed,W;UACUL,kB;;;KADVK,W","sourcesContent":["import { LCDClient } from '@terra-money/terra.js';\nimport { useConnectedWallet } from '@terra-money/wallet-provider';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nexport function YourBalance() {\n  const connectedWallet = useConnectedWallet();\n\n  const [bank, setBank] = useState<null | string>();\n\n  const lcd = useMemo(() => {\n    if (!connectedWallet) {\n      return null;\n    }\n\n    return new LCDClient({\n      URL: connectedWallet.network.lcd,\n      chainID: connectedWallet.network.chainID,\n    });\n  }, [connectedWallet]);\n\n  useEffect(() => {\n    if (connectedWallet && lcd) {\n      lcd.bank.balance(connectedWallet.walletAddress).then(([coins]) => {\n        setBank(parseInt(coins.toString())/(1000000) + ' UST');\n      });\n    } else {\n      setBank(null);\n    }\n  }, [connectedWallet, lcd]);\n\n  return (\n    <div>\n      <h1 style={{color: 'white'}}>Your Balance</h1>\n      {bank && <pre style={{color: 'white'}}>{bank}</pre>}\n      {!connectedWallet && <p style={{color: 'white'}}>Wallet not connected!</p>}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}