{"ast":null,"code":"import { WebExtensionStatus } from '@terra-dev/web-extension-interface';\nimport { BehaviorSubject } from 'rxjs';\nimport { isDesktopChrome } from '../../utils/browser-check';\nimport { LegacyExtensionConnector } from '../legacy-extension';\nimport { defaultSelectModal } from './defaultSelectModal';\nimport { getTerraExtensions } from './multiChannel';\nimport { clearSession, getStoredSession, storeSession } from './session';\nimport { ExtensionRouterConnectorType, ExtensionRouterStatus } from './types';\nexport class ExtensionRouter {\n  constructor(options) {\n    var _this = this;\n\n    var _a, _b;\n\n    this.options = options;\n    this._connector = null; // ---------------------------------------------\n    // states\n    // ---------------------------------------------\n\n    this.states = () => {\n      return this._states.asObservable();\n    };\n\n    this.getLastStates = () => {\n      return this._states.getValue();\n    }; // ---------------------------------------------\n    // behaviors\n    // ---------------------------------------------\n\n\n    this.connect = async identifier => {\n      var _a;\n\n      const extensionInfos = getTerraExtensions();\n\n      if (extensionInfos.length === 0) {\n        throw new Error(`[ExtensionRouter] Can't find connectors`);\n      }\n\n      let extensionInfo;\n\n      if (identifier) {\n        extensionInfo = extensionInfos.find(item => item.identifier === identifier);\n      } else if (extensionInfos.length === 1) {\n        extensionInfo = extensionInfos[0];\n      } else {\n        const select = (_a = this.options.selectExtension) !== null && _a !== void 0 ? _a : defaultSelectModal;\n        const selectedExtensionInfo = await select(extensionInfos);\n\n        if (selectedExtensionInfo) {\n          extensionInfo = selectedExtensionInfo;\n        }\n      }\n\n      if (extensionInfo) {\n        this.createConnector(extensionInfo);\n      }\n    };\n\n    this.disconnect = () => {\n      var _a;\n\n      clearSession();\n\n      this._states.next({\n        type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,\n        network: this.options.defaultNetwork\n      });\n\n      (_a = this._connector) === null || _a === void 0 ? void 0 : _a.close();\n      this._connector = null;\n    };\n\n    this.requestApproval = () => {\n      if (!this._connector) {\n        throw new Error('[ExtensionRouter] No connector');\n      }\n\n      this._connector.requestApproval();\n    };\n\n    this.refetchStates = () => {\n      if (!this._connector) {\n        throw new Error('[ExtensionRouter] No connector');\n      }\n\n      this._connector.refetchStates();\n    };\n\n    this.post = (tx, terraAddress) => {\n      if (!this._connector) {\n        throw new Error('[ExtensionRouter] No connector');\n      }\n\n      const latestStates = this.getLastStates();\n\n      if (latestStates.type !== ExtensionRouterStatus.WALLET_CONNECTED) {\n        throw new Error(`[ExtensionRouter] Wallet is not connected`);\n      }\n\n      return this._connector.post(terraAddress !== null && terraAddress !== void 0 ? terraAddress : latestStates.wallet.terraAddress, tx);\n    };\n\n    this.sign = (tx, terraAddress) => {\n      if (!this._connector) {\n        throw new Error('[ExtensionRouter] No connector');\n      }\n\n      const latestStates = this.getLastStates();\n\n      if (latestStates.type !== ExtensionRouterStatus.WALLET_CONNECTED) {\n        throw new Error(`[ExtensionRouter] Wallet is not connected`);\n      }\n\n      return this._connector.sign(terraAddress !== null && terraAddress !== void 0 ? terraAddress : latestStates.wallet.terraAddress, tx);\n    };\n\n    this.signBytes = (bytes, terraAddress) => {\n      if (!this._connector) {\n        throw new Error('[ExtensionRouter] No connector');\n      }\n\n      const latestStates = this.getLastStates();\n\n      if (latestStates.type !== ExtensionRouterStatus.WALLET_CONNECTED) {\n        throw new Error(`[ExtensionRouter] Wallet is not connected`);\n      }\n\n      return this._connector.signBytes(terraAddress !== null && terraAddress !== void 0 ? terraAddress : latestStates.wallet.terraAddress, bytes);\n    };\n\n    this.hasCW20Tokens = function (chainID) {\n      if (!_this._connector) {\n        throw new Error('[ExtensionRouter] No connector');\n      } else if (_this._connector instanceof LegacyExtensionConnector) {\n        throw new Error('[ExtensionRouter] Legacy extension does not support hasCW20Tokens() ');\n      }\n\n      for (var _len = arguments.length, tokenAddrs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        tokenAddrs[_key - 1] = arguments[_key];\n      }\n\n      return _this._connector.hasCW20Tokens(chainID, ...tokenAddrs);\n    };\n\n    this.addCW20Tokens = function (chainID) {\n      if (!_this._connector) {\n        throw new Error('[ExtensionRouter] No connector');\n      } else if (_this._connector instanceof LegacyExtensionConnector) {\n        throw new Error('[ExtensionRouter] Legacy extension does not support addCW20Tokens() ');\n      }\n\n      for (var _len2 = arguments.length, tokenAddrs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        tokenAddrs[_key2 - 1] = arguments[_key2];\n      }\n\n      return _this._connector.addCW20Tokens(chainID, ...tokenAddrs);\n    };\n\n    this.hasNetwork = network => {\n      if (!this._connector) {\n        throw new Error('[ExtensionRouter] No connector');\n      } else if (this._connector instanceof LegacyExtensionConnector) {\n        throw new Error('[ExtensionRouter] Legacy extension does not support hasNetwork() ');\n      }\n\n      return this._connector.hasNetwork(network);\n    };\n\n    this.addNetwork = network => {\n      if (!this._connector) {\n        throw new Error('[ExtensionRouter] No connector');\n      } else if (this._connector instanceof LegacyExtensionConnector) {\n        throw new Error('[ExtensionRouter] Legacy extension does not support addNetwork() ');\n      }\n\n      return this._connector.addNetwork(network);\n    }; // ---------------------------------------------\n    // internal\n    // ---------------------------------------------\n\n\n    this.createConnector = extensionInfo => {\n      var _a;\n\n      (_a = this._connector) === null || _a === void 0 ? void 0 : _a.close();\n\n      if (!extensionInfo.connector && !this.isDesktopChrome) {\n        throw new Error(`[ExtensionRouter] Legacy extension only support the desktop chrome`);\n      }\n\n      const connectorPromise = extensionInfo.connector ? Promise.resolve(extensionInfo.connector()) : Promise.resolve(new LegacyExtensionConnector(extensionInfo.identifier));\n      connectorPromise.then(connector => {\n        var _a;\n\n        connector.open((_a = this.options.hostWindow) !== null && _a !== void 0 ? _a : window, {\n          next: nextStates => {\n            var _a;\n\n            if (nextStates.type === WebExtensionStatus.INITIALIZING) {\n              this._states.next({\n                type: ExtensionRouterStatus.INITIALIZING,\n                network: this.options.defaultNetwork\n              });\n            } else if (nextStates.type === WebExtensionStatus.NO_AVAILABLE) {\n              this._states.next({\n                type: ExtensionRouterStatus.NO_AVAILABLE,\n                network: this.options.defaultNetwork,\n                isConnectorExists: true,\n                isApproved: nextStates.isApproved\n              });\n            } else if (nextStates.wallets.length === 0) {\n              this._states.next({\n                type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,\n                network: nextStates.network\n              });\n            } else {\n              this._states.next({\n                type: ExtensionRouterStatus.WALLET_CONNECTED,\n                network: nextStates.network,\n                wallet: nextStates.focusedWalletAddress ? (_a = nextStates.wallets.find(itemWallet => itemWallet.terraAddress === nextStates.focusedWalletAddress)) !== null && _a !== void 0 ? _a : nextStates.wallets[0] : nextStates.wallets[0],\n                connectorType: connector instanceof LegacyExtensionConnector ? ExtensionRouterConnectorType.LEGACY : ExtensionRouterConnectorType.WEB_EXTENSION,\n                supportFeatures: new Set(connector.supportFeatures())\n              });\n            }\n          },\n          error: error => {\n            console.error(error);\n          },\n          complete: () => {}\n        });\n        this._connector = connector;\n        storeSession({\n          identifier: extensionInfo.identifier\n        });\n      });\n    };\n\n    this.isDesktopChrome = typeof window !== 'undefined' && isDesktopChrome((_b = (_a = options.dangerously__chromeExtensionCompatibleBrowserCheck) === null || _a === void 0 ? void 0 : _a.call(options, navigator.userAgent)) !== null && _b !== void 0 ? _b : false);\n    this._states = new BehaviorSubject({\n      type: ExtensionRouterStatus.INITIALIZING,\n      network: options.defaultNetwork\n    });\n    this._extensionInfos = getTerraExtensions();\n\n    if (this._extensionInfos.length === 0) {\n      this._states.next({\n        type: ExtensionRouterStatus.NO_AVAILABLE,\n        network: options.defaultNetwork,\n        isConnectorExists: false\n      });\n\n      return;\n    } // ---------------------------------------------\n    // initialize session\n    // ---------------------------------------------\n\n\n    const session = getStoredSession();\n\n    if (session) {\n      const extensionInfo = this._extensionInfos.find(item => item.identifier === session.identifier);\n\n      if (extensionInfo) {\n        this.createConnector(extensionInfo);\n        return;\n      } else {\n        console.warn(`Can't find an extension for the session \"${session.identifier}\"`);\n        clearSession();\n\n        this._states.next({\n          type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,\n          network: options.defaultNetwork\n        });\n      }\n    } else {\n      this._states.next({\n        type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,\n        network: options.defaultNetwork\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../../../src/@terra-money/wallet-provider/modules/extension-router/ExtensionRouter.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  TerraWebExtensionConnector,\n  WebExtensionNetworkInfo,\n  WebExtensionPostPayload,\n  WebExtensionSignBytesPayload,\n  WebExtensionSignPayload,\n  WebExtensionStates,\n  WebExtensionStatus,\n  WebExtensionTxResult,\n} from '@terra-dev/web-extension-interface';\nimport { CreateTxOptions } from '@terra-money/terra.js';\nimport { NetworkInfo } from '@terra-money/use-wallet';\nimport { BehaviorSubject, Subscribable } from 'rxjs';\nimport { isDesktopChrome } from '../../utils/browser-check';\nimport { LegacyExtensionConnector } from '../legacy-extension';\nimport { defaultSelectModal } from './defaultSelectModal';\nimport { ExtensionInfo, getTerraExtensions } from './multiChannel';\nimport { clearSession, getStoredSession, storeSession } from './session';\nimport {\n  ExtensionRouterConnectorType,\n  ExtensionRouterStates,\n  ExtensionRouterStatus,\n} from './types';\n\nexport interface ExtensionRouterOptions {\n  defaultNetwork: NetworkInfo;\n  selectExtension?: (\n    extensionInfos: ExtensionInfo[],\n  ) => Promise<ExtensionInfo | null>;\n\n  hostWindow?: Window;\n\n  // ---------------------------------------------\n  // development features\n  // ---------------------------------------------\n  dangerously__chromeExtensionCompatibleBrowserCheck: (\n    userAgent: string,\n  ) => boolean;\n}\n\nexport class ExtensionRouter {\n  private readonly _states: BehaviorSubject<ExtensionRouterStates>;\n  private readonly _extensionInfos: ExtensionInfo[];\n\n  private _connector: TerraWebExtensionConnector | null = null;\n\n  private readonly isDesktopChrome: boolean;\n\n  constructor(private readonly options: ExtensionRouterOptions) {\n    this.isDesktopChrome =\n      typeof window !== 'undefined' &&\n      isDesktopChrome(\n        options.dangerously__chromeExtensionCompatibleBrowserCheck?.(\n          navigator.userAgent,\n        ) ?? false,\n      );\n\n    this._states = new BehaviorSubject<ExtensionRouterStates>({\n      type: ExtensionRouterStatus.INITIALIZING,\n      network: options.defaultNetwork,\n    });\n\n    this._extensionInfos = getTerraExtensions();\n\n    if (this._extensionInfos.length === 0) {\n      this._states.next({\n        type: ExtensionRouterStatus.NO_AVAILABLE,\n        network: options.defaultNetwork,\n        isConnectorExists: false,\n      });\n\n      return;\n    }\n\n    // ---------------------------------------------\n    // initialize session\n    // ---------------------------------------------\n    const session = getStoredSession();\n\n    if (session) {\n      const extensionInfo = this._extensionInfos.find(\n        (item) => item.identifier === session.identifier,\n      );\n\n      if (extensionInfo) {\n        this.createConnector(extensionInfo);\n        return;\n      } else {\n        console.warn(\n          `Can't find an extension for the session \"${session.identifier}\"`,\n        );\n        clearSession();\n\n        this._states.next({\n          type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,\n          network: options.defaultNetwork,\n        });\n      }\n    } else {\n      this._states.next({\n        type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,\n        network: options.defaultNetwork,\n      });\n    }\n  }\n\n  // ---------------------------------------------\n  // states\n  // ---------------------------------------------\n  states = () => {\n    return this._states.asObservable();\n  };\n\n  getLastStates = () => {\n    return this._states.getValue();\n  };\n\n  // ---------------------------------------------\n  // behaviors\n  // ---------------------------------------------\n  connect = async (identifier?: string) => {\n    const extensionInfos = getTerraExtensions();\n\n    if (extensionInfos.length === 0) {\n      throw new Error(`[ExtensionRouter] Can't find connectors`);\n    }\n\n    let extensionInfo: ExtensionInfo | undefined;\n\n    if (identifier) {\n      extensionInfo = extensionInfos.find(\n        (item) => item.identifier === identifier,\n      );\n    } else if (extensionInfos.length === 1) {\n      extensionInfo = extensionInfos[0];\n    } else {\n      const select = this.options.selectExtension ?? defaultSelectModal;\n      const selectedExtensionInfo = await select(extensionInfos);\n\n      if (selectedExtensionInfo) {\n        extensionInfo = selectedExtensionInfo;\n      }\n    }\n\n    if (extensionInfo) {\n      this.createConnector(extensionInfo);\n    }\n  };\n\n  disconnect = () => {\n    clearSession();\n\n    this._states.next({\n      type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,\n      network: this.options.defaultNetwork,\n    });\n\n    this._connector?.close();\n    this._connector = null;\n  };\n\n  requestApproval = () => {\n    if (!this._connector) {\n      throw new Error('[ExtensionRouter] No connector');\n    }\n\n    this._connector.requestApproval();\n  };\n\n  refetchStates = () => {\n    if (!this._connector) {\n      throw new Error('[ExtensionRouter] No connector');\n    }\n\n    this._connector.refetchStates();\n  };\n\n  post = (\n    tx: CreateTxOptions,\n    terraAddress?: string,\n  ): Subscribable<WebExtensionTxResult<WebExtensionPostPayload>> => {\n    if (!this._connector) {\n      throw new Error('[ExtensionRouter] No connector');\n    }\n\n    const latestStates = this.getLastStates();\n\n    if (latestStates.type !== ExtensionRouterStatus.WALLET_CONNECTED) {\n      throw new Error(`[ExtensionRouter] Wallet is not connected`);\n    }\n\n    return this._connector.post(\n      terraAddress ?? latestStates.wallet.terraAddress,\n      tx,\n    );\n  };\n\n  sign = (\n    tx: CreateTxOptions,\n    terraAddress?: string,\n  ): Subscribable<WebExtensionTxResult<WebExtensionSignPayload>> => {\n    if (!this._connector) {\n      throw new Error('[ExtensionRouter] No connector');\n    }\n\n    const latestStates = this.getLastStates();\n\n    if (latestStates.type !== ExtensionRouterStatus.WALLET_CONNECTED) {\n      throw new Error(`[ExtensionRouter] Wallet is not connected`);\n    }\n\n    return this._connector.sign(\n      terraAddress ?? latestStates.wallet.terraAddress,\n      tx,\n    );\n  };\n\n  signBytes = (\n    bytes: Buffer,\n    terraAddress?: string,\n  ): Subscribable<WebExtensionTxResult<WebExtensionSignBytesPayload>> => {\n    if (!this._connector) {\n      throw new Error('[ExtensionRouter] No connector');\n    }\n\n    const latestStates = this.getLastStates();\n\n    if (latestStates.type !== ExtensionRouterStatus.WALLET_CONNECTED) {\n      throw new Error(`[ExtensionRouter] Wallet is not connected`);\n    }\n\n    return this._connector.signBytes(\n      terraAddress ?? latestStates.wallet.terraAddress,\n      bytes,\n    );\n  };\n\n  hasCW20Tokens = (\n    chainID: string,\n    ...tokenAddrs: string[]\n  ): Promise<{ [tokenAddr: string]: boolean }> => {\n    if (!this._connector) {\n      throw new Error('[ExtensionRouter] No connector');\n    } else if (this._connector instanceof LegacyExtensionConnector) {\n      throw new Error(\n        '[ExtensionRouter] Legacy extension does not support hasCW20Tokens() ',\n      );\n    }\n\n    return this._connector.hasCW20Tokens(chainID, ...tokenAddrs);\n  };\n\n  addCW20Tokens = (\n    chainID: string,\n    ...tokenAddrs: string[]\n  ): Promise<{ [tokenAddr: string]: boolean }> => {\n    if (!this._connector) {\n      throw new Error('[ExtensionRouter] No connector');\n    } else if (this._connector instanceof LegacyExtensionConnector) {\n      throw new Error(\n        '[ExtensionRouter] Legacy extension does not support addCW20Tokens() ',\n      );\n    }\n\n    return this._connector.addCW20Tokens(chainID, ...tokenAddrs);\n  };\n\n  hasNetwork = (\n    network: Omit<WebExtensionNetworkInfo, 'name'>,\n  ): Promise<boolean> => {\n    if (!this._connector) {\n      throw new Error('[ExtensionRouter] No connector');\n    } else if (this._connector instanceof LegacyExtensionConnector) {\n      throw new Error(\n        '[ExtensionRouter] Legacy extension does not support hasNetwork() ',\n      );\n    }\n\n    return this._connector.hasNetwork(network);\n  };\n\n  addNetwork = (network: WebExtensionNetworkInfo): Promise<boolean> => {\n    if (!this._connector) {\n      throw new Error('[ExtensionRouter] No connector');\n    } else if (this._connector instanceof LegacyExtensionConnector) {\n      throw new Error(\n        '[ExtensionRouter] Legacy extension does not support addNetwork() ',\n      );\n    }\n\n    return this._connector.addNetwork(network);\n  };\n\n  // ---------------------------------------------\n  // internal\n  // ---------------------------------------------\n  private createConnector = (extensionInfo: ExtensionInfo) => {\n    this._connector?.close();\n\n    if (!extensionInfo.connector && !this.isDesktopChrome) {\n      throw new Error(\n        `[ExtensionRouter] Legacy extension only support the desktop chrome`,\n      );\n    }\n\n    const connectorPromise: Promise<TerraWebExtensionConnector> =\n      extensionInfo.connector\n        ? Promise.resolve(extensionInfo.connector())\n        : Promise.resolve(\n            new LegacyExtensionConnector(extensionInfo.identifier),\n          );\n\n    connectorPromise.then((connector) => {\n      connector.open(this.options.hostWindow ?? window, {\n        next: (nextStates: WebExtensionStates) => {\n          if (nextStates.type === WebExtensionStatus.INITIALIZING) {\n            this._states.next({\n              type: ExtensionRouterStatus.INITIALIZING,\n              network: this.options.defaultNetwork,\n            });\n          } else if (nextStates.type === WebExtensionStatus.NO_AVAILABLE) {\n            this._states.next({\n              type: ExtensionRouterStatus.NO_AVAILABLE,\n              network: this.options.defaultNetwork,\n              isConnectorExists: true,\n              isApproved: nextStates.isApproved,\n            });\n          } else if (nextStates.wallets.length === 0) {\n            this._states.next({\n              type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,\n              network: nextStates.network,\n            });\n          } else {\n            this._states.next({\n              type: ExtensionRouterStatus.WALLET_CONNECTED,\n              network: nextStates.network,\n              wallet: nextStates.focusedWalletAddress\n                ? nextStates.wallets.find(\n                    (itemWallet) =>\n                      itemWallet.terraAddress ===\n                      nextStates.focusedWalletAddress,\n                  ) ?? nextStates.wallets[0]\n                : nextStates.wallets[0],\n              connectorType:\n                connector instanceof LegacyExtensionConnector\n                  ? ExtensionRouterConnectorType.LEGACY\n                  : ExtensionRouterConnectorType.WEB_EXTENSION,\n              supportFeatures: new Set(connector.supportFeatures()),\n            });\n          }\n        },\n        error: (error) => {\n          console.error(error);\n        },\n        complete: () => {},\n      });\n\n      this._connector = connector;\n\n      storeSession({\n        identifier: extensionInfo.identifier,\n      });\n    });\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}