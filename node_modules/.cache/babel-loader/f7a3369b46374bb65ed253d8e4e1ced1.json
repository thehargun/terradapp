{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TxAPI = exports.SimulateResponse = exports.isTxError = void 0;\n\nvar BaseAPI_1 = require(\"./BaseAPI\");\n\nvar core_1 = require(\"../../../core\");\n\nvar hash_1 = require(\"../../../util/hash\");\n\nvar core_2 = require(\"../../../core\");\n\nfunction isTxError(x) {\n  return x.code !== undefined && x.code !== 0 && x.code !== '0';\n}\n\nexports.isTxError = isTxError;\n\nvar SimulateResponse =\n/** @class */\nfunction () {\n  function SimulateResponse(gas_info, result) {\n    this.gas_info = gas_info;\n    this.result = result;\n  }\n\n  SimulateResponse.fromData = function (data) {\n    return new SimulateResponse({\n      gas_wanted: Number.parseInt(data.gas_info.gas_wanted),\n      gas_used: Number.parseInt(data.gas_info.gas_used)\n    }, data.result);\n  };\n\n  return SimulateResponse;\n}();\n\nexports.SimulateResponse = SimulateResponse;\n\nvar TxAPI =\n/** @class */\nfunction (_super) {\n  __extends(TxAPI, _super);\n\n  function TxAPI(lcd) {\n    var _this = _super.call(this, lcd.apiRequester) || this;\n\n    _this.lcd = lcd;\n    return _this;\n  }\n  /**\n   * Looks up a transaction on the blockchain, addressed by its hash\n   * @param txHash transaction's hash\n   */\n\n\n  TxAPI.prototype.txInfo = function (txHash, params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.c.getRaw(\"/cosmos/tx/v1beta1/txs/\" + txHash, params).then(function (v) {\n          return core_1.TxInfo.fromData(v.tx_response);\n        })];\n      });\n    });\n  };\n  /**\n   * Builds a [[StdSignMsg]] that is ready to be signed by a [[Key]]. The appropriate\n   * account number and sequence will be fetched live from the blockchain and added to\n   * the resultant [[StdSignMsg]]. If no fee is provided, fee will be automatically\n   * estimated using the parameters, simulated using a \"dummy fee\" with sourceAddress's\n   * nonzero denominations in its balance.\n   *\n   * @param sourceAddress account address of signer\n   * @param options TX generation options\n   */\n\n\n  TxAPI.prototype.create = function (signers, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fee, msgs, memo, timeoutHeight, signerDatas, _i, signers_1, signer, sequenceNumber, publicKey, account;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            fee = options.fee;\n            msgs = options.msgs, memo = options.memo, timeoutHeight = options.timeoutHeight;\n            signerDatas = [];\n            _i = 0, signers_1 = signers;\n            _a.label = 1;\n\n          case 1:\n            if (!(_i < signers_1.length)) return [3\n            /*break*/\n            , 5];\n            signer = signers_1[_i];\n            sequenceNumber = signer.sequenceNumber;\n            publicKey = signer.publicKey;\n            if (!(!sequenceNumber || !publicKey)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.lcd.auth.accountInfo(signer.address)];\n\n          case 2:\n            account = _a.sent();\n\n            if (!sequenceNumber) {\n              sequenceNumber = account.getSequenceNumber();\n            }\n\n            if (!publicKey) {\n              publicKey = account.getPublicKey();\n            }\n\n            _a.label = 3;\n\n          case 3:\n            signerDatas.push({\n              sequenceNumber: sequenceNumber,\n              publicKey: publicKey\n            });\n            _a.label = 4;\n\n          case 4:\n            _i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 5:\n            if (!(fee === undefined)) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , this.lcd.tx.estimateFee(signerDatas, options)];\n\n          case 6:\n            fee = _a.sent();\n            _a.label = 7;\n\n          case 7:\n            return [2\n            /*return*/\n            , new core_1.Tx(new core_1.TxBody(msgs, memo || '', timeoutHeight || 0), new core_1.AuthInfo([], fee), [])];\n        }\n      });\n    });\n  };\n  /**\n   * Looks up transactions on the blockchain for the block height. If height is undefined,\n   * gets the transactions for the latest block.\n   * @param height block height\n   */\n\n\n  TxAPI.prototype.txInfosByHeight = function (height) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockInfo, txs, txhashes;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.lcd.tendermint.blockInfo(height)];\n\n          case 1:\n            blockInfo = _a.sent();\n            txs = blockInfo.block.data.txs;\n\n            if (!txs) {\n              return [2\n              /*return*/\n              , []];\n            } else {\n              txhashes = txs.map(function (txdata) {\n                return (0, hash_1.hashToHex)(txdata);\n              });\n              return [2\n              /*return*/\n              , Promise.all(txhashes.map(function (txhash) {\n                return _this.txInfo(txhash);\n              }))];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Estimates the transaction's fee by simulating it within the node\n   * @param sourceAddress address that will pay the bill\n   * @param msgs standard messages\n   * @param options options for fee estimation\n   */\n\n\n  TxAPI.prototype.estimateFee = function (signers, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var gasPrices, gasAdjustment, feeDenoms, gas, gasPricesCoins, gasPricesCoinsFiltered, txBody, authInfo, tx, taxAmount, feeAmount;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            gasPrices = options.gasPrices || this.lcd.config.gasPrices;\n            gasAdjustment = options.gasAdjustment || this.lcd.config.gasAdjustment;\n            feeDenoms = options.feeDenoms || ['uluna'];\n            gas = options.gas;\n\n            if (gasPrices) {\n              gasPricesCoins = new core_1.Coins(gasPrices);\n\n              if (feeDenoms) {\n                gasPricesCoinsFiltered = gasPricesCoins.filter(function (c) {\n                  return feeDenoms.includes(c.denom);\n                });\n\n                if (gasPricesCoinsFiltered.toArray().length > 0) {\n                  gasPricesCoins = gasPricesCoinsFiltered;\n                }\n              }\n            }\n\n            txBody = new core_1.TxBody(options.msgs, options.memo || '');\n            authInfo = new core_1.AuthInfo([], new core_1.Fee(0, new core_1.Coins()));\n            tx = new core_1.Tx(txBody, authInfo, []); // fill empty signature\n\n            tx.appendEmptySignatures(signers);\n            if (!(!gas || gas === 'auto' || gas === '0')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.estimateGas(tx, {\n              gasAdjustment: gasAdjustment\n            })];\n\n          case 1:\n            gas = _a.sent().toString();\n            _a.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.computeTax(tx)];\n\n          case 3:\n            taxAmount = _a.sent();\n            feeAmount = gasPricesCoins ? taxAmount.add(gasPricesCoins.mul(gas).toIntCeilCoins()) : taxAmount;\n            return [2\n            /*return*/\n            , new core_1.Fee(Number.parseInt(gas), feeAmount, '', '')];\n        }\n      });\n    });\n  };\n\n  TxAPI.prototype.estimateGas = function (tx, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var gasAdjustment, simulateRes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            gasAdjustment = (options === null || options === void 0 ? void 0 : options.gasAdjustment) || this.lcd.config.gasAdjustment;\n            return [4\n            /*yield*/\n            , this.c.post(\"/cosmos/tx/v1beta1/simulate\", {\n              tx_bytes: this.encode(tx)\n            }).then(function (d) {\n              return SimulateResponse.fromData(d);\n            })];\n\n          case 1:\n            simulateRes = _a.sent();\n            return [2\n            /*return*/\n            , new core_1.Dec(gasAdjustment).mul(simulateRes.gas_info.gas_used).toNumber()];\n        }\n      });\n    });\n  };\n\n  TxAPI.prototype.computeTax = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var taxAmount;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.c.post(\"/terra/tx/v1beta1/compute_tax\", {\n              tx_bytes: this.encode(tx)\n            }).then(function (d) {\n              return core_1.Coins.fromData(d.tax_amount);\n            })];\n\n          case 1:\n            taxAmount = _a.sent();\n            return [2\n            /*return*/\n            , taxAmount];\n        }\n      });\n    });\n  };\n  /**\n   * Encode a transaction to Amino-encoding\n   * @param tx transaction to encode\n   */\n\n\n  TxAPI.prototype.encode = function (tx) {\n    return Buffer.from(tx.toBytes()).toString('base64');\n  };\n  /**\n   * Get the transaction's hash\n   * @param tx transaction to hash\n   */\n\n\n  TxAPI.prototype.hash = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var txBytes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.encode(tx)];\n\n          case 1:\n            txBytes = _a.sent();\n            return [2\n            /*return*/\n            , (0, hash_1.hashToHex)(txBytes)];\n        }\n      });\n    });\n  };\n\n  TxAPI.prototype._broadcast = function (tx, mode) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.c.post(\"/cosmos/tx/v1beta1/txs\", {\n              tx_bytes: this.encode(tx),\n              mode: mode\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Broadcast the transaction using the \"block\" mode, waiting for its inclusion in the blockchain.\n   * @param tx transaction to broadcast\n   */\n\n\n  TxAPI.prototype.broadcast = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._broadcast(tx, 'BROADCAST_MODE_BLOCK').then(function (_a) {\n          var d = _a.tx_response;\n          var blockResult = {\n            txhash: d.txhash,\n            raw_log: d.raw_log,\n            gas_wanted: Number.parseInt(d.gas_wanted),\n            gas_used: Number.parseInt(d.gas_used),\n            height: +d.height,\n            logs: d.logs.map(function (l) {\n              return core_2.TxLog.fromData(l);\n            }),\n            code: d.code,\n            codespace: d.codespace,\n            data: d.data,\n            info: d.info,\n            timestamp: d.timestamp\n          };\n          return blockResult;\n        })];\n      });\n    });\n  };\n  /**\n   * NOTE: This is not a synchronous function and is unconventionally named. This function\n   * can be await as it returns a `Promise`.\n   *\n   * Broadcast the transaction using the \"sync\" mode, returning after DeliverTx() is performed.\n   * @param tx transaction to broadcast\n   */\n\n\n  TxAPI.prototype.broadcastSync = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._broadcast(tx, 'BROADCAST_MODE_SYNC').then(function (_a) {\n          var d = _a.tx_response;\n          var blockResult = {\n            height: +d.height,\n            txhash: d.txhash,\n            raw_log: d.raw_log\n          };\n\n          if (d.code) {\n            blockResult.code = d.code;\n          }\n\n          if (d.codespace) {\n            blockResult.codespace = d.codespace;\n          }\n\n          return blockResult;\n        })];\n      });\n    });\n  };\n  /**\n   * Broadcast the transaction using the \"async\" mode, returning after CheckTx() is performed.\n   * @param tx transaction to broadcast\n   */\n\n\n  TxAPI.prototype.broadcastAsync = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._broadcast(tx, 'BROADCAST_MODE_ASYNC').then(function (_a) {\n          var d = _a.tx_response;\n          return {\n            height: +d.height,\n            txhash: d.txhash\n          };\n        })];\n      });\n    });\n  };\n  /**\n   * Search for transactions based on event attributes.\n   * @param options\n   */\n\n\n  TxAPI.prototype.search = function (options) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_b) {\n        params = new URLSearchParams(); // build search params\n\n        (_a = options.events) === null || _a === void 0 ? void 0 : _a.forEach(function (v) {\n          return params.append('events', v.key === 'tx.height' ? v.key + \"=\" + v.value : v.key + \"='\" + v.value + \"'\");\n        });\n        delete options['events'];\n        Object.entries(options).forEach(function (v) {\n          params.append(v[0], v[1]);\n        });\n        return [2\n        /*return*/\n        , this.c.getRaw(\"cosmos/tx/v1beta1/txs\", params).then(function (d) {\n          return {\n            txs: d.tx_responses.map(function (tx_response) {\n              return core_1.TxInfo.fromData(tx_response);\n            }),\n            pagination: d.pagination\n          };\n        })];\n      });\n    });\n  };\n\n  return TxAPI;\n}(BaseAPI_1.BaseAPI);\n\nexports.TxAPI = TxAPI;","map":{"version":3,"sources":["../../../../src/client/lcd/api/TxAPI.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TxAPI = exports.SimulateResponse = exports.isTxError = void 0;\nvar BaseAPI_1 = require(\"./BaseAPI\");\nvar core_1 = require(\"../../../core\");\nvar hash_1 = require(\"../../../util/hash\");\nvar core_2 = require(\"../../../core\");\nfunction isTxError(x) {\n    return (x.code !== undefined &&\n        x.code !== 0 &&\n        x.code !== '0');\n}\nexports.isTxError = isTxError;\nvar SimulateResponse = /** @class */ (function () {\n    function SimulateResponse(gas_info, result) {\n        this.gas_info = gas_info;\n        this.result = result;\n    }\n    SimulateResponse.fromData = function (data) {\n        return new SimulateResponse({\n            gas_wanted: Number.parseInt(data.gas_info.gas_wanted),\n            gas_used: Number.parseInt(data.gas_info.gas_used),\n        }, data.result);\n    };\n    return SimulateResponse;\n}());\nexports.SimulateResponse = SimulateResponse;\nvar TxAPI = /** @class */ (function (_super) {\n    __extends(TxAPI, _super);\n    function TxAPI(lcd) {\n        var _this = _super.call(this, lcd.apiRequester) || this;\n        _this.lcd = lcd;\n        return _this;\n    }\n    /**\n     * Looks up a transaction on the blockchain, addressed by its hash\n     * @param txHash transaction's hash\n     */\n    TxAPI.prototype.txInfo = function (txHash, params) {\n        if (params === void 0) { params = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.c\n                        .getRaw(\"/cosmos/tx/v1beta1/txs/\" + txHash, params)\n                        .then(function (v) { return core_1.TxInfo.fromData(v.tx_response); })];\n            });\n        });\n    };\n    /**\n     * Builds a [[StdSignMsg]] that is ready to be signed by a [[Key]]. The appropriate\n     * account number and sequence will be fetched live from the blockchain and added to\n     * the resultant [[StdSignMsg]]. If no fee is provided, fee will be automatically\n     * estimated using the parameters, simulated using a \"dummy fee\" with sourceAddress's\n     * nonzero denominations in its balance.\n     *\n     * @param sourceAddress account address of signer\n     * @param options TX generation options\n     */\n    TxAPI.prototype.create = function (signers, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fee, msgs, memo, timeoutHeight, signerDatas, _i, signers_1, signer, sequenceNumber, publicKey, account;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        fee = options.fee;\n                        msgs = options.msgs, memo = options.memo, timeoutHeight = options.timeoutHeight;\n                        signerDatas = [];\n                        _i = 0, signers_1 = signers;\n                        _a.label = 1;\n                    case 1:\n                        if (!(_i < signers_1.length)) return [3 /*break*/, 5];\n                        signer = signers_1[_i];\n                        sequenceNumber = signer.sequenceNumber;\n                        publicKey = signer.publicKey;\n                        if (!(!sequenceNumber || !publicKey)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.lcd.auth.accountInfo(signer.address)];\n                    case 2:\n                        account = _a.sent();\n                        if (!sequenceNumber) {\n                            sequenceNumber = account.getSequenceNumber();\n                        }\n                        if (!publicKey) {\n                            publicKey = account.getPublicKey();\n                        }\n                        _a.label = 3;\n                    case 3:\n                        signerDatas.push({\n                            sequenceNumber: sequenceNumber,\n                            publicKey: publicKey,\n                        });\n                        _a.label = 4;\n                    case 4:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 5:\n                        if (!(fee === undefined)) return [3 /*break*/, 7];\n                        return [4 /*yield*/, this.lcd.tx.estimateFee(signerDatas, options)];\n                    case 6:\n                        fee = _a.sent();\n                        _a.label = 7;\n                    case 7: return [2 /*return*/, new core_1.Tx(new core_1.TxBody(msgs, memo || '', timeoutHeight || 0), new core_1.AuthInfo([], fee), [])];\n                }\n            });\n        });\n    };\n    /**\n     * Looks up transactions on the blockchain for the block height. If height is undefined,\n     * gets the transactions for the latest block.\n     * @param height block height\n     */\n    TxAPI.prototype.txInfosByHeight = function (height) {\n        return __awaiter(this, void 0, void 0, function () {\n            var blockInfo, txs, txhashes;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.lcd.tendermint.blockInfo(height)];\n                    case 1:\n                        blockInfo = _a.sent();\n                        txs = blockInfo.block.data.txs;\n                        if (!txs) {\n                            return [2 /*return*/, []];\n                        }\n                        else {\n                            txhashes = txs.map(function (txdata) { return (0, hash_1.hashToHex)(txdata); });\n                            return [2 /*return*/, Promise.all(txhashes.map(function (txhash) { return _this.txInfo(txhash); }))];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Estimates the transaction's fee by simulating it within the node\n     * @param sourceAddress address that will pay the bill\n     * @param msgs standard messages\n     * @param options options for fee estimation\n     */\n    TxAPI.prototype.estimateFee = function (signers, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var gasPrices, gasAdjustment, feeDenoms, gas, gasPricesCoins, gasPricesCoinsFiltered, txBody, authInfo, tx, taxAmount, feeAmount;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        gasPrices = options.gasPrices || this.lcd.config.gasPrices;\n                        gasAdjustment = options.gasAdjustment || this.lcd.config.gasAdjustment;\n                        feeDenoms = options.feeDenoms || ['uluna'];\n                        gas = options.gas;\n                        if (gasPrices) {\n                            gasPricesCoins = new core_1.Coins(gasPrices);\n                            if (feeDenoms) {\n                                gasPricesCoinsFiltered = gasPricesCoins.filter(function (c) {\n                                    return feeDenoms.includes(c.denom);\n                                });\n                                if (gasPricesCoinsFiltered.toArray().length > 0) {\n                                    gasPricesCoins = gasPricesCoinsFiltered;\n                                }\n                            }\n                        }\n                        txBody = new core_1.TxBody(options.msgs, options.memo || '');\n                        authInfo = new core_1.AuthInfo([], new core_1.Fee(0, new core_1.Coins()));\n                        tx = new core_1.Tx(txBody, authInfo, []);\n                        // fill empty signature\n                        tx.appendEmptySignatures(signers);\n                        if (!(!gas || gas === 'auto' || gas === '0')) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.estimateGas(tx, { gasAdjustment: gasAdjustment })];\n                    case 1:\n                        gas = (_a.sent()).toString();\n                        _a.label = 2;\n                    case 2: return [4 /*yield*/, this.computeTax(tx)];\n                    case 3:\n                        taxAmount = _a.sent();\n                        feeAmount = gasPricesCoins\n                            ? taxAmount.add(gasPricesCoins.mul(gas).toIntCeilCoins())\n                            : taxAmount;\n                        return [2 /*return*/, new core_1.Fee(Number.parseInt(gas), feeAmount, '', '')];\n                }\n            });\n        });\n    };\n    TxAPI.prototype.estimateGas = function (tx, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var gasAdjustment, simulateRes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        gasAdjustment = (options === null || options === void 0 ? void 0 : options.gasAdjustment) || this.lcd.config.gasAdjustment;\n                        return [4 /*yield*/, this.c\n                                .post(\"/cosmos/tx/v1beta1/simulate\", {\n                                tx_bytes: this.encode(tx),\n                            })\n                                .then(function (d) { return SimulateResponse.fromData(d); })];\n                    case 1:\n                        simulateRes = _a.sent();\n                        return [2 /*return*/, new core_1.Dec(gasAdjustment).mul(simulateRes.gas_info.gas_used).toNumber()];\n                }\n            });\n        });\n    };\n    TxAPI.prototype.computeTax = function (tx) {\n        return __awaiter(this, void 0, void 0, function () {\n            var taxAmount;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.c\n                            .post(\"/terra/tx/v1beta1/compute_tax\", {\n                            tx_bytes: this.encode(tx),\n                        })\n                            .then(function (d) { return core_1.Coins.fromData(d.tax_amount); })];\n                    case 1:\n                        taxAmount = _a.sent();\n                        return [2 /*return*/, taxAmount];\n                }\n            });\n        });\n    };\n    /**\n     * Encode a transaction to Amino-encoding\n     * @param tx transaction to encode\n     */\n    TxAPI.prototype.encode = function (tx) {\n        return Buffer.from(tx.toBytes()).toString('base64');\n    };\n    /**\n     * Get the transaction's hash\n     * @param tx transaction to hash\n     */\n    TxAPI.prototype.hash = function (tx) {\n        return __awaiter(this, void 0, void 0, function () {\n            var txBytes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.encode(tx)];\n                    case 1:\n                        txBytes = _a.sent();\n                        return [2 /*return*/, (0, hash_1.hashToHex)(txBytes)];\n                }\n            });\n        });\n    };\n    TxAPI.prototype._broadcast = function (tx, mode) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.c.post(\"/cosmos/tx/v1beta1/txs\", {\n                            tx_bytes: this.encode(tx),\n                            mode: mode,\n                        })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Broadcast the transaction using the \"block\" mode, waiting for its inclusion in the blockchain.\n     * @param tx transaction to broadcast\n     */\n    TxAPI.prototype.broadcast = function (tx) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this._broadcast(tx, 'BROADCAST_MODE_BLOCK').then(function (_a) {\n                        var d = _a.tx_response;\n                        var blockResult = {\n                            txhash: d.txhash,\n                            raw_log: d.raw_log,\n                            gas_wanted: Number.parseInt(d.gas_wanted),\n                            gas_used: Number.parseInt(d.gas_used),\n                            height: +d.height,\n                            logs: d.logs.map(function (l) { return core_2.TxLog.fromData(l); }),\n                            code: d.code,\n                            codespace: d.codespace,\n                            data: d.data,\n                            info: d.info,\n                            timestamp: d.timestamp,\n                        };\n                        return blockResult;\n                    })];\n            });\n        });\n    };\n    /**\n     * NOTE: This is not a synchronous function and is unconventionally named. This function\n     * can be await as it returns a `Promise`.\n     *\n     * Broadcast the transaction using the \"sync\" mode, returning after DeliverTx() is performed.\n     * @param tx transaction to broadcast\n     */\n    TxAPI.prototype.broadcastSync = function (tx) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this._broadcast(tx, 'BROADCAST_MODE_SYNC').then(function (_a) {\n                        var d = _a.tx_response;\n                        var blockResult = {\n                            height: +d.height,\n                            txhash: d.txhash,\n                            raw_log: d.raw_log,\n                        };\n                        if (d.code) {\n                            blockResult.code = d.code;\n                        }\n                        if (d.codespace) {\n                            blockResult.codespace = d.codespace;\n                        }\n                        return blockResult;\n                    })];\n            });\n        });\n    };\n    /**\n     * Broadcast the transaction using the \"async\" mode, returning after CheckTx() is performed.\n     * @param tx transaction to broadcast\n     */\n    TxAPI.prototype.broadcastAsync = function (tx) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this._broadcast(tx, 'BROADCAST_MODE_ASYNC').then(function (_a) {\n                        var d = _a.tx_response;\n                        return ({\n                            height: +d.height,\n                            txhash: d.txhash,\n                        });\n                    })];\n            });\n        });\n    };\n    /**\n     * Search for transactions based on event attributes.\n     * @param options\n     */\n    TxAPI.prototype.search = function (options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_b) {\n                params = new URLSearchParams();\n                // build search params\n                (_a = options.events) === null || _a === void 0 ? void 0 : _a.forEach(function (v) {\n                    return params.append('events', v.key === 'tx.height' ? v.key + \"=\" + v.value : v.key + \"='\" + v.value + \"'\");\n                });\n                delete options['events'];\n                Object.entries(options).forEach(function (v) {\n                    params.append(v[0], v[1]);\n                });\n                return [2 /*return*/, this.c\n                        .getRaw(\"cosmos/tx/v1beta1/txs\", params)\n                        .then(function (d) {\n                        return {\n                            txs: d.tx_responses.map(function (tx_response) { return core_1.TxInfo.fromData(tx_response); }),\n                            pagination: d.pagination,\n                        };\n                    })];\n            });\n        });\n    };\n    return TxAPI;\n}(BaseAPI_1.BaseAPI));\nexports.TxAPI = TxAPI;\n//# sourceMappingURL=TxAPI.js.map"]},"metadata":{},"sourceType":"script"}