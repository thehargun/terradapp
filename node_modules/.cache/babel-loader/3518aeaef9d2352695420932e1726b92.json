{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TxLog = exports.EventsByType = exports.TxInfo = void 0;\n\nvar Tx_1 = require(\"./Tx\");\n\nvar abci_1 = require(\"@terra-money/terra.proto/cosmos/base/abci/v1beta1/abci\");\n/**\n * A TxInfo data structure is used to capture information from a transaction lookup for\n * a transaction already included in a block\n */\n\n\nvar TxInfo =\n/** @class */\nfunction () {\n  /**\n   *\n   * @param height height of the block in which the transaction was included.\n   * @param txhash transaction's hash.\n   * @param raw_log raw log information, as a string.\n   * @param logs log information\n   * @param gas_wanted gas limited submitted in fee\n   * @param gas_used actual gas consumption\n   * @param tx transaction content\n   * @param timestamp time of inclusion\n   * @param code error code\n   */\n  function TxInfo(height, txhash, raw_log, logs, gas_wanted, gas_used, tx, timestamp, code, codespace) {\n    this.height = height;\n    this.txhash = txhash;\n    this.raw_log = raw_log;\n    this.logs = logs;\n    this.gas_wanted = gas_wanted;\n    this.gas_used = gas_used;\n    this.tx = tx;\n    this.timestamp = timestamp;\n    this.code = code;\n    this.codespace = codespace;\n  }\n\n  TxInfo.fromProto = function (proto) {\n    return new TxInfo(proto.height.toNumber(), proto.txhash, proto.rawLog, proto.logs.map(function (log) {\n      return TxLog.fromProto(log);\n    }), proto.gasWanted.toNumber(), proto.gasUsed.toNumber(), Tx_1.Tx.unpackAny(proto.tx), proto.timestamp, proto.code, proto.codespace);\n  };\n\n  TxInfo.fromData = function (data) {\n    return new TxInfo(Number.parseInt(data.height), data.txhash, data.raw_log, data.logs.map(function (log) {\n      return TxLog.fromData(log);\n    }), Number.parseInt(data.gas_wanted), Number.parseInt(data.gas_used), Tx_1.Tx.fromData(data.tx), data.timestamp, data.code, data.codespace);\n  };\n\n  return TxInfo;\n}();\n\nexports.TxInfo = TxInfo;\nvar EventsByType;\n\n(function (EventsByType) {\n  function parse(eventAmino) {\n    var events = {};\n    eventAmino.forEach(function (ev) {\n      ev.attributes.forEach(function (attr) {\n        if (!(ev.type in events)) {\n          events[ev.type] = {};\n        }\n\n        if (!(attr.key in events[ev.type])) {\n          events[ev.type][attr.key] = [];\n        }\n\n        events[ev.type][attr.key].push(attr.value);\n      });\n    });\n    return events;\n  }\n\n  EventsByType.parse = parse;\n})(EventsByType = exports.EventsByType || (exports.EventsByType = {}));\n\nvar TxLog =\n/** @class */\nfunction () {\n  function TxLog(msg_index, log, events) {\n    this.msg_index = msg_index;\n    this.log = log;\n    this.events = events;\n    this.eventsByType = EventsByType.parse(this.events);\n  }\n\n  TxLog.fromData = function (data) {\n    return new TxLog(data.msg_index, data.log, data.events.map(function (e) {\n      return {\n        type: e.type,\n        attributes: e.attributes.map(function (attr) {\n          return {\n            key: attr.key,\n            value: attr.value\n          };\n        })\n      };\n    }));\n  };\n\n  TxLog.prototype.toData = function () {\n    var _a = this,\n        msg_index = _a.msg_index,\n        log = _a.log,\n        events = _a.events;\n\n    return {\n      msg_index: msg_index,\n      log: log,\n      events: events\n    };\n  };\n\n  TxLog.fromProto = function (proto) {\n    return new TxLog(proto.msgIndex, proto.log, proto.events.map(function (e) {\n      return {\n        type: e.type,\n        attributes: e.attributes.map(function (attr) {\n          return {\n            key: attr.key,\n            value: attr.value\n          };\n        })\n      };\n    }));\n  };\n\n  TxLog.prototype.toProto = function () {\n    var _a = this,\n        msg_index = _a.msg_index,\n        log = _a.log,\n        events = _a.events;\n\n    return abci_1.ABCIMessageLog.fromPartial({\n      msgIndex: msg_index,\n      log: log,\n      events: events\n    });\n  };\n\n  return TxLog;\n}();\n\nexports.TxLog = TxLog;","map":{"version":3,"sources":["../../src/core/TxInfo.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,wDAAA,CAAA;AAMA;;;AAGG;;;AACH,IAAA,MAAA;AAAA;AAAA,YAAA;AACE;;;;;;;;;;;AAWG;AACH,WAAA,MAAA,CACS,MADT,EAES,MAFT,EAGS,OAHT,EAIS,IAJT,EAKS,UALT,EAMS,QANT,EAOS,EAPT,EAQS,SART,EASS,IATT,EAUS,SAVT,EAU2B;AATlB,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,EAAA,GAAA,EAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACL;;AAEU,EAAA,MAAA,CAAA,SAAA,GAAd,UAAwB,KAAxB,EAA2C;AACzC,WAAO,IAAI,MAAJ,CACL,KAAK,CAAC,MAAN,CAAa,QAAb,EADK,EAEL,KAAK,CAAC,MAFD,EAGL,KAAK,CAAC,MAHD,EAIL,KAAK,CAAC,IAAN,CAAW,GAAX,CAAe,UAAA,GAAA,EAAG;AAAI,aAAA,KAAK,CAAC,SAAN,CAAA,GAAA,CAAA;AAAoB,KAA1C,CAJK,EAKL,KAAK,CAAC,SAAN,CAAgB,QAAhB,EALK,EAML,KAAK,CAAC,OAAN,CAAc,QAAd,EANK,EAOL,IAAA,CAAA,EAAA,CAAG,SAAH,CAAa,KAAK,CAAC,EAAnB,CAPK,EAQL,KAAK,CAAC,SARD,EASL,KAAK,CAAC,IATD,EAUL,KAAK,CAAC,SAVD,CAAP;AAYD,GAba;;AAeA,EAAA,MAAA,CAAA,QAAA,GAAd,UAAuB,IAAvB,EAAwC;AACtC,WAAO,IAAI,MAAJ,CACL,MAAM,CAAC,QAAP,CAAgB,IAAI,CAAC,MAArB,CADK,EAEL,IAAI,CAAC,MAFA,EAGL,IAAI,CAAC,OAHA,EAIL,IAAI,CAAC,IAAL,CAAU,GAAV,CAAc,UAAA,GAAA,EAAG;AAAI,aAAA,KAAK,CAAC,QAAN,CAAA,GAAA,CAAA;AAAmB,KAAxC,CAJK,EAKL,MAAM,CAAC,QAAP,CAAgB,IAAI,CAAC,UAArB,CALK,EAML,MAAM,CAAC,QAAP,CAAgB,IAAI,CAAC,QAArB,CANK,EAOL,IAAA,CAAA,EAAA,CAAG,QAAH,CAAY,IAAI,CAAC,EAAjB,CAPK,EAQL,IAAI,CAAC,SARA,EASL,IAAI,CAAC,IATA,EAUL,IAAI,CAAC,SAVA,CAAP;AAYD,GAba;;AAchB,SAAA,MAAA;AAAC,CAvDD,EAAA;;AAAa,OAAA,CAAA,MAAA,GAAA,MAAA;AAyEb,IAAiB,YAAjB;;AAAA,CAAA,UAAiB,YAAjB,EAA6B;AAC3B,WAAgB,KAAhB,CAAsB,UAAtB,EAAyC;AACvC,QAAM,MAAM,GAAiB,EAA7B;AACA,IAAA,UAAU,CAAC,OAAX,CAAmB,UAAA,EAAA,EAAE;AACnB,MAAA,EAAE,CAAC,UAAH,CAAc,OAAd,CAAsB,UAAA,IAAA,EAAI;AACxB,YAAI,EAAE,EAAE,CAAC,IAAH,IAAW,MAAb,CAAJ,EAA0B;AACxB,UAAA,MAAM,CAAC,EAAE,CAAC,IAAJ,CAAN,GAAkB,EAAlB;AACD;;AAED,YAAI,EAAE,IAAI,CAAC,GAAL,IAAY,MAAM,CAAC,EAAE,CAAC,IAAJ,CAApB,CAAJ,EAAoC;AAClC,UAAA,MAAM,CAAC,EAAE,CAAC,IAAJ,CAAN,CAAgB,IAAI,CAAC,GAArB,IAA4B,EAA5B;AACD;;AAED,QAAA,MAAM,CAAC,EAAE,CAAC,IAAJ,CAAN,CAAgB,IAAI,CAAC,GAArB,EAA0B,IAA1B,CAA+B,IAAI,CAAC,KAApC;AACD,OAVD;AAWD,KAZD;AAaA,WAAO,MAAP;AACD;;AAhBe,EAAA,YAAA,CAAA,KAAA,GAAK,KAAL;AAiBjB,CAlBD,EAAiB,YAAY,GAAZ,OAAA,CAAA,YAAA,KAAA,OAAA,CAAA,YAAA,GAAY,EAAZ,CAAjB;;AAoBA,IAAA,KAAA;AAAA;AAAA,YAAA;AAGE,WAAA,KAAA,CACS,SADT,EAES,GAFT,EAGS,MAHT,EAGwB;AAFf,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,GAAA,GAAA,GAAA;AACA,SAAA,MAAA,GAAA,MAAA;AAEP,SAAK,YAAL,GAAoB,YAAY,CAAC,KAAb,CAAmB,KAAK,MAAxB,CAApB;AACD;;AAEa,EAAA,KAAA,CAAA,QAAA,GAAd,UAAuB,IAAvB,EAAuC;AACrC,WAAO,IAAI,KAAJ,CACL,IAAI,CAAC,SADA,EAEL,IAAI,CAAC,GAFA,EAGL,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,UAAA,CAAA,EAAC;AACf,aAAO;AACL,QAAA,IAAI,EAAE,CAAC,CAAC,IADH;AAEL,QAAA,UAAU,EAAE,CAAC,CAAC,UAAF,CAAa,GAAb,CAAiB,UAAA,IAAA,EAAI;AAC/B,iBAAO;AACL,YAAA,GAAG,EAAE,IAAI,CAAC,GADL;AAEL,YAAA,KAAK,EAAE,IAAI,CAAC;AAFP,WAAP;AAID,SALW;AAFP,OAAP;AASD,KAVD,CAHK,CAAP;AAeD,GAhBa;;AAkBP,EAAA,KAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACQ,QAAA,EAAA,GAA6B,IAA7B;AAAA,QAAE,SAAS,GAAA,EAAA,CAAA,SAAX;AAAA,QAAa,GAAG,GAAA,EAAA,CAAA,GAAhB;AAAA,QAAkB,MAAM,GAAA,EAAA,CAAA,MAAxB;;AACN,WAAO;AACL,MAAA,SAAS,EAAA,SADJ;AAEL,MAAA,GAAG,EAAA,GAFE;AAGL,MAAA,MAAM,EAAA;AAHD,KAAP;AAKD,GAPM;;AASO,EAAA,KAAA,CAAA,SAAA,GAAd,UAAwB,KAAxB,EAA0C;AACxC,WAAO,IAAI,KAAJ,CACL,KAAK,CAAC,QADD,EAEL,KAAK,CAAC,GAFD,EAGL,KAAK,CAAC,MAAN,CAAa,GAAb,CAAiB,UAAA,CAAA,EAAC;AAChB,aAAO;AACL,QAAA,IAAI,EAAE,CAAC,CAAC,IADH;AAEL,QAAA,UAAU,EAAE,CAAC,CAAC,UAAF,CAAa,GAAb,CAAiB,UAAA,IAAA,EAAI;AAC/B,iBAAO;AACL,YAAA,GAAG,EAAE,IAAI,CAAC,GADL;AAEL,YAAA,KAAK,EAAE,IAAI,CAAC;AAFP,WAAP;AAID,SALW;AAFP,OAAP;AASD,KAVD,CAHK,CAAP;AAeD,GAhBa;;AAkBP,EAAA,KAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACQ,QAAA,EAAA,GAA6B,IAA7B;AAAA,QAAE,SAAS,GAAA,EAAA,CAAA,SAAX;AAAA,QAAa,GAAG,GAAA,EAAA,CAAA,GAAhB;AAAA,QAAkB,MAAM,GAAA,EAAA,CAAA,MAAxB;;AACN,WAAO,MAAA,CAAA,cAAA,CAAkB,WAAlB,CAA8B;AACnC,MAAA,QAAQ,EAAE,SADyB;AAEnC,MAAA,GAAG,EAAE,GAF8B;AAGnC,MAAA,MAAM,EAAA;AAH6B,KAA9B,CAAP;AAKD,GAPM;;AAQT,SAAA,KAAA;AAAC,CAhED,EAAA;;AAAa,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TxLog = exports.EventsByType = exports.TxInfo = void 0;\nvar Tx_1 = require(\"./Tx\");\nvar abci_1 = require(\"@terra-money/terra.proto/cosmos/base/abci/v1beta1/abci\");\n/**\n * A TxInfo data structure is used to capture information from a transaction lookup for\n * a transaction already included in a block\n */\nvar TxInfo = /** @class */ (function () {\n    /**\n     *\n     * @param height height of the block in which the transaction was included.\n     * @param txhash transaction's hash.\n     * @param raw_log raw log information, as a string.\n     * @param logs log information\n     * @param gas_wanted gas limited submitted in fee\n     * @param gas_used actual gas consumption\n     * @param tx transaction content\n     * @param timestamp time of inclusion\n     * @param code error code\n     */\n    function TxInfo(height, txhash, raw_log, logs, gas_wanted, gas_used, tx, timestamp, code, codespace) {\n        this.height = height;\n        this.txhash = txhash;\n        this.raw_log = raw_log;\n        this.logs = logs;\n        this.gas_wanted = gas_wanted;\n        this.gas_used = gas_used;\n        this.tx = tx;\n        this.timestamp = timestamp;\n        this.code = code;\n        this.codespace = codespace;\n    }\n    TxInfo.fromProto = function (proto) {\n        return new TxInfo(proto.height.toNumber(), proto.txhash, proto.rawLog, proto.logs.map(function (log) { return TxLog.fromProto(log); }), proto.gasWanted.toNumber(), proto.gasUsed.toNumber(), Tx_1.Tx.unpackAny(proto.tx), proto.timestamp, proto.code, proto.codespace);\n    };\n    TxInfo.fromData = function (data) {\n        return new TxInfo(Number.parseInt(data.height), data.txhash, data.raw_log, data.logs.map(function (log) { return TxLog.fromData(log); }), Number.parseInt(data.gas_wanted), Number.parseInt(data.gas_used), Tx_1.Tx.fromData(data.tx), data.timestamp, data.code, data.codespace);\n    };\n    return TxInfo;\n}());\nexports.TxInfo = TxInfo;\nvar EventsByType;\n(function (EventsByType) {\n    function parse(eventAmino) {\n        var events = {};\n        eventAmino.forEach(function (ev) {\n            ev.attributes.forEach(function (attr) {\n                if (!(ev.type in events)) {\n                    events[ev.type] = {};\n                }\n                if (!(attr.key in events[ev.type])) {\n                    events[ev.type][attr.key] = [];\n                }\n                events[ev.type][attr.key].push(attr.value);\n            });\n        });\n        return events;\n    }\n    EventsByType.parse = parse;\n})(EventsByType = exports.EventsByType || (exports.EventsByType = {}));\nvar TxLog = /** @class */ (function () {\n    function TxLog(msg_index, log, events) {\n        this.msg_index = msg_index;\n        this.log = log;\n        this.events = events;\n        this.eventsByType = EventsByType.parse(this.events);\n    }\n    TxLog.fromData = function (data) {\n        return new TxLog(data.msg_index, data.log, data.events.map(function (e) {\n            return {\n                type: e.type,\n                attributes: e.attributes.map(function (attr) {\n                    return {\n                        key: attr.key,\n                        value: attr.value,\n                    };\n                }),\n            };\n        }));\n    };\n    TxLog.prototype.toData = function () {\n        var _a = this, msg_index = _a.msg_index, log = _a.log, events = _a.events;\n        return {\n            msg_index: msg_index,\n            log: log,\n            events: events,\n        };\n    };\n    TxLog.fromProto = function (proto) {\n        return new TxLog(proto.msgIndex, proto.log, proto.events.map(function (e) {\n            return {\n                type: e.type,\n                attributes: e.attributes.map(function (attr) {\n                    return {\n                        key: attr.key,\n                        value: attr.value,\n                    };\n                }),\n            };\n        }));\n    };\n    TxLog.prototype.toProto = function () {\n        var _a = this, msg_index = _a.msg_index, log = _a.log, events = _a.events;\n        return abci_1.ABCIMessageLog.fromPartial({\n            msgIndex: msg_index,\n            log: log,\n            events: events,\n        });\n    };\n    return TxLog;\n}());\nexports.TxLog = TxLog;\n//# sourceMappingURL=TxInfo.js.map"]},"metadata":{},"sourceType":"script"}