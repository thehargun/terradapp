{"ast":null,"code":"import { WebExtensionStatus, WebExtensionTxStatus } from '@terra-dev/web-extension-interface';\nimport { AccAddress } from '@terra-money/terra.js';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { createFixedExtension } from './createFixedExtension';\nconst supportFeatures = ['post', 'sign'];\nexport class LegacyExtensionConnector {\n  constructor(identifier) {\n    this.identifier = identifier;\n    this.hostWindow = null;\n    this.statesSubscription = null;\n\n    this.open = (hostWindow, statesObserver) => {\n      this.hostWindow = hostWindow;\n      this.statesSubscription = this._states.pipe(filter(states => !!states)).subscribe(statesObserver);\n      this.refetchStates();\n    };\n\n    this.close = () => {\n      this._extension.disconnect();\n    };\n\n    this.requestApproval = () => {\n      this.recheckStates();\n    };\n\n    this.refetchStates = () => {\n      this.recheckStates();\n    };\n\n    this.post = (terraAddress, tx) => {\n      const subject = new BehaviorSubject({\n        status: WebExtensionTxStatus.PROGRESS\n      });\n\n      this._extension.post(tx).then(_ref => {\n        let {\n          payload\n        } = _ref;\n        subject.next({\n          status: WebExtensionTxStatus.SUCCEED,\n          payload: payload.result\n        });\n        subject.complete();\n      }).catch(error => subject.error(error));\n\n      return subject.asObservable();\n    };\n\n    this.sign = (terraAddress, tx) => {\n      const subject = new BehaviorSubject({\n        status: WebExtensionTxStatus.PROGRESS\n      });\n\n      this._extension.sign(tx).then(_ref2 => {\n        let {\n          payload\n        } = _ref2;\n        subject.next({\n          status: WebExtensionTxStatus.SUCCEED,\n          payload: payload.result\n        });\n        subject.complete();\n      }).catch(error => subject.error(error));\n\n      return subject.asObservable();\n    };\n\n    this.signBytes = () => {\n      throw new Error('[LegacyExtensionConnector] does not support signBytes()');\n    };\n\n    this.hasCW20Tokens = () => {\n      throw new Error('[LegacyExtensionConnector] does not support hasCW20Tokens()');\n    };\n\n    this.addCW20Tokens = () => {\n      throw new Error('[LegacyExtensionConnector] does not support addCW20Tokens()');\n    };\n\n    this.hasNetwork = () => {\n      throw new Error('[LegacyExtensionConnector] does not support hasNetwork()');\n    };\n\n    this.addNetwork = () => {\n      throw new Error('[LegacyExtensionConnector] does not support addNetwork()');\n    }; // ---------------------------------------------\n    // internal\n    // ---------------------------------------------\n\n\n    this.recheckStates = async () => {\n      if (this._extension.inTransactionProgress()) {\n        return;\n      }\n\n      const infoResult = await this._extension.info();\n      const connectResult = await this._extension.connect();\n\n      if (connectResult.address && AccAddress.validate(connectResult.address)) {\n        this._states.next({\n          type: WebExtensionStatus.READY,\n          network: infoResult,\n          focusedWalletAddress: connectResult.address,\n          wallets: [{\n            name: '',\n            terraAddress: connectResult.address,\n            design: 'terra'\n          }]\n        });\n      } else {\n        this._states.next({\n          type: WebExtensionStatus.READY,\n          network: infoResult,\n          focusedWalletAddress: undefined,\n          wallets: []\n        });\n      }\n    };\n\n    this._states = new BehaviorSubject({\n      type: WebExtensionStatus.INITIALIZING\n    });\n    this._extension = createFixedExtension(identifier);\n  }\n\n  supportFeatures() {\n    return supportFeatures;\n  }\n\n}","map":{"version":3,"sources":["../../../../../src/@terra-money/wallet-provider/modules/legacy-extension/LegacyExtensionConnector.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  TerraWebExtensionConnector,\n  TerraWebExtensionFeatures,\n  WebExtensionPostPayload,\n  WebExtensionSignPayload,\n  WebExtensionStates,\n  WebExtensionStatus,\n  WebExtensionTxResult,\n  WebExtensionTxStatus,\n} from '@terra-dev/web-extension-interface';\nimport { AccAddress, CreateTxOptions } from '@terra-money/terra.js';\nimport { NetworkInfo } from '@terra-money/use-wallet';\nimport { BehaviorSubject, Observer, Subscribable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { createFixedExtension, FixedExtension } from './createFixedExtension';\n\nconst supportFeatures: TerraWebExtensionFeatures[] = ['post', 'sign'];\n\nexport class LegacyExtensionConnector implements TerraWebExtensionConnector {\n  private _states: BehaviorSubject<WebExtensionStates>;\n  private _extension: FixedExtension;\n  private hostWindow: Window | null = null;\n  private statesSubscription: Subscription | null = null;\n\n  supportFeatures() {\n    return supportFeatures;\n  }\n\n  constructor(private identifier: string) {\n    this._states = new BehaviorSubject<WebExtensionStates>({\n      type: WebExtensionStatus.INITIALIZING,\n    });\n\n    this._extension = createFixedExtension(identifier);\n  }\n\n  open = (hostWindow: Window, statesObserver: Observer<WebExtensionStates>) => {\n    this.hostWindow = hostWindow;\n    this.statesSubscription = this._states\n      .pipe(\n        filter(\n          (states: WebExtensionStates | null): states is WebExtensionStates =>\n            !!states,\n        ),\n      )\n      .subscribe(statesObserver);\n\n    this.refetchStates();\n  };\n\n  close = () => {\n    this._extension.disconnect();\n  };\n\n  requestApproval = () => {\n    this.recheckStates();\n  };\n\n  refetchStates = () => {\n    this.recheckStates();\n  };\n\n  post = (\n    terraAddress: string,\n    tx: CreateTxOptions,\n  ): Subscribable<WebExtensionTxResult<WebExtensionPostPayload>> => {\n    const subject = new BehaviorSubject<\n      WebExtensionTxResult<WebExtensionPostPayload>\n    >({\n      status: WebExtensionTxStatus.PROGRESS,\n    });\n\n    this._extension\n      .post(tx)\n      .then(({ payload }) => {\n        subject.next({\n          status: WebExtensionTxStatus.SUCCEED,\n          payload: payload.result,\n        });\n        subject.complete();\n      })\n      .catch((error) => subject.error(error));\n\n    return subject.asObservable();\n  };\n\n  sign = (\n    terraAddress: string,\n    tx: CreateTxOptions,\n  ): Subscribable<WebExtensionTxResult<WebExtensionSignPayload>> => {\n    const subject = new BehaviorSubject<\n      WebExtensionTxResult<WebExtensionSignPayload>\n    >({\n      status: WebExtensionTxStatus.PROGRESS,\n    });\n\n    this._extension\n      .sign(tx)\n      .then(({ payload }) => {\n        subject.next({\n          status: WebExtensionTxStatus.SUCCEED,\n          payload: payload.result,\n        });\n        subject.complete();\n      })\n      .catch((error) => subject.error(error));\n\n    return subject.asObservable();\n  };\n\n  signBytes = () => {\n    throw new Error('[LegacyExtensionConnector] does not support signBytes()');\n  };\n\n  hasCW20Tokens = () => {\n    throw new Error(\n      '[LegacyExtensionConnector] does not support hasCW20Tokens()',\n    );\n  };\n\n  addCW20Tokens = () => {\n    throw new Error(\n      '[LegacyExtensionConnector] does not support addCW20Tokens()',\n    );\n  };\n\n  hasNetwork = () => {\n    throw new Error('[LegacyExtensionConnector] does not support hasNetwork()');\n  };\n\n  addNetwork = () => {\n    throw new Error('[LegacyExtensionConnector] does not support addNetwork()');\n  };\n\n  // ---------------------------------------------\n  // internal\n  // ---------------------------------------------\n  recheckStates = async () => {\n    if (this._extension.inTransactionProgress()) {\n      return;\n    }\n\n    const infoResult: NetworkInfo = await this._extension.info();\n    const connectResult: { address?: string } = await this._extension.connect();\n\n    if (connectResult.address && AccAddress.validate(connectResult.address)) {\n      this._states.next({\n        type: WebExtensionStatus.READY,\n        network: infoResult,\n        focusedWalletAddress: connectResult.address,\n        wallets: [\n          {\n            name: '',\n            terraAddress: connectResult.address,\n            design: 'terra',\n          },\n        ],\n      });\n    } else {\n      this._states.next({\n        type: WebExtensionStatus.READY,\n        network: infoResult,\n        focusedWalletAddress: undefined,\n        wallets: [],\n      });\n    }\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}