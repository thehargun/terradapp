{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hargu\\\\Desktop\\\\Luna Classic\\\\LunaClassic\\\\src\\\\components\\\\TxSample.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fee, MsgSend } from '@terra-money/terra.js';\nimport { CreateTxFailed, Timeout, TxFailed, TxUnspecifiedError, useConnectedWallet, UserDenied } from '@terra-money/wallet-provider';\nimport React, { useCallback, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TEST_TO_ADDRESS = 'terra12hnhh5vtyg5juqnzm43970nh4fw42pt27nw9g9';\nexport function TxSample() {\n  _s();\n\n  const [txResult, setTxResult] = useState(null);\n  const [txError, setTxError] = useState(null);\n  const connectedWallet = useConnectedWallet();\n  const proceed = useCallback(() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    if (connectedWallet.network.chainID.startsWith('columbus')) {\n      alert(`Please only execute this example on Testnet`);\n      return;\n    }\n\n    setTxResult(null);\n    setTxError(null);\n    connectedWallet.post({\n      fee: new Fee(1000000, '200000uusd'),\n      msgs: [new MsgSend(connectedWallet.walletAddress, TEST_TO_ADDRESS, {\n        uusd: 1000000\n      })]\n    }).then(nextTxResult => {\n      console.log(nextTxResult);\n      setTxResult(nextTxResult);\n    }).catch(error => {\n      if (error instanceof UserDenied) {\n        setTxError('User Denied');\n      } else if (error instanceof CreateTxFailed) {\n        setTxError('Create Tx Failed: ' + error.message);\n      } else if (error instanceof TxFailed) {\n        setTxError('Tx Failed: ' + error.message);\n      } else if (error instanceof Timeout) {\n        setTxError('Timeout');\n      } else if (error instanceof TxUnspecifiedError) {\n        setTxError('Unspecified Error: ' + error.message);\n      } else {\n        setTxError('Unknown Error: ' + (error instanceof Error ? error.message : String(error)));\n      }\n    });\n  }, [connectedWallet]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tx Sample\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), (connectedWallet === null || connectedWallet === void 0 ? void 0 : connectedWallet.availablePost) && !txResult && !txError && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: proceed,\n      children: [\"Send 1USD to \", TEST_TO_ADDRESS]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), txResult && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(txResult, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), connectedWallet && txResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://finder.terra.money/${connectedWallet.network.chainID}/tx/${txResult.result.txhash}`,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: \"Open Tx Result in Terra Finder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), txError && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: txError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 19\n    }, this), (!!txResult || !!txError) && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setTxResult(null);\n        setTxError(null);\n      },\n      children: \"Clear result\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), !connectedWallet && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 28\n    }, this), connectedWallet && !connectedWallet.availablePost && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This connection does not support post()\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TxSample, \"xL7CmSyJXhOOTEWOjWVec8ZubCI=\", false, function () {\n  return [useConnectedWallet];\n});\n\n_c = TxSample;\n\nvar _c;\n\n$RefreshReg$(_c, \"TxSample\");","map":{"version":3,"sources":["C:/Users/hargu/Desktop/Luna Classic/LunaClassic/src/components/TxSample.tsx"],"names":["Fee","MsgSend","CreateTxFailed","Timeout","TxFailed","TxUnspecifiedError","useConnectedWallet","UserDenied","React","useCallback","useState","TEST_TO_ADDRESS","TxSample","txResult","setTxResult","txError","setTxError","connectedWallet","proceed","network","chainID","startsWith","alert","post","fee","msgs","walletAddress","uusd","then","nextTxResult","console","log","catch","error","message","Error","String","availablePost","JSON","stringify","result","txhash"],"mappings":"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","sourcesContent":["import { Fee, MsgSend } from '@terra-money/terra.js';\nimport {\n  CreateTxFailed,\n  Timeout,\n  TxFailed,\n  TxResult,\n  TxUnspecifiedError,\n  useConnectedWallet,\n  UserDenied,\n} from '@terra-money/wallet-provider';\nimport React, { useCallback, useState } from 'react';\n\nconst TEST_TO_ADDRESS = 'terra12hnhh5vtyg5juqnzm43970nh4fw42pt27nw9g9';\n\nexport function TxSample() {\n  const [txResult, setTxResult] = useState<TxResult | null>(null);\n  const [txError, setTxError] = useState<string | null>(null);\n\n  const connectedWallet = useConnectedWallet();\n\n  const proceed = useCallback(() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    if (connectedWallet.network.chainID.startsWith('columbus')) {\n      alert(`Please only execute this example on Testnet`);\n      return;\n    }\n\n    setTxResult(null);\n    setTxError(null);\n\n    connectedWallet\n      .post({\n        fee: new Fee(1000000, '200000uusd'),\n        msgs: [\n          new MsgSend(connectedWallet.walletAddress, TEST_TO_ADDRESS, {\n            uusd: 1000000,\n          }),\n        ],\n      })\n      .then((nextTxResult: TxResult) => {\n        console.log(nextTxResult);\n        setTxResult(nextTxResult);\n      })\n      .catch((error: unknown) => {\n        if (error instanceof UserDenied) {\n          setTxError('User Denied');\n        } else if (error instanceof CreateTxFailed) {\n          setTxError('Create Tx Failed: ' + error.message);\n        } else if (error instanceof TxFailed) {\n          setTxError('Tx Failed: ' + error.message);\n        } else if (error instanceof Timeout) {\n          setTxError('Timeout');\n        } else if (error instanceof TxUnspecifiedError) {\n          setTxError('Unspecified Error: ' + error.message);\n        } else {\n          setTxError(\n            'Unknown Error: ' +\n              (error instanceof Error ? error.message : String(error)),\n          );\n        }\n      });\n  }, [connectedWallet]);\n\n  return (\n    <div>\n      <h1>Tx Sample</h1>\n\n      {connectedWallet?.availablePost && !txResult && !txError && (\n        <button onClick={proceed}>Send 1USD to {TEST_TO_ADDRESS}</button>\n      )}\n\n      {txResult && (\n        <>\n          <pre>{JSON.stringify(txResult, null, 2)}</pre>\n\n          {connectedWallet && txResult && (\n            <div>\n              <a\n                href={`https://finder.terra.money/${connectedWallet.network.chainID}/tx/${txResult.result.txhash}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Open Tx Result in Terra Finder\n              </a>\n            </div>\n          )}\n        </>\n      )}\n\n      {txError && <pre>{txError}</pre>}\n\n      {(!!txResult || !!txError) && (\n        <button\n          onClick={() => {\n            setTxResult(null);\n            setTxError(null);\n          }}\n        >\n          Clear result\n        </button>\n      )}\n\n      {!connectedWallet && <p>Wallet not connected!</p>}\n\n      {connectedWallet && !connectedWallet.availablePost && (\n        <p>This connection does not support post()</p>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}