{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgDelegateFeedConsent = void 0;\n\nvar json_1 = require(\"../../../util/json\");\n\nvar any_1 = require(\"@terra-money/terra.proto/google/protobuf/any\");\n\nvar tx_1 = require(\"@terra-money/terra.proto/terra/oracle/v1beta1/tx\");\n/**\n * A **feeeder** is an account which is responsible for signing transactions with Oracle vote\n * and prevote messages on behalf of the validator. The blockchain will reject\n * [[MsgExchangeRateVote]] and [[MsgExchangeRatePrevote]] messages in transactions\n * signed by an\n * account different than the registered feeder.\n *\n * The following message registers a validator's feeder address.\n */\n\n\nvar MsgDelegateFeedConsent =\n/** @class */\nfunction (_super) {\n  __extends(MsgDelegateFeedConsent, _super);\n  /**\n   * @param operator validator's operator address\n   * @param delegate account address to set to feeder\n   */\n\n\n  function MsgDelegateFeedConsent(operator, delegate) {\n    var _this = _super.call(this) || this;\n\n    _this.operator = operator;\n    _this.delegate = delegate;\n    return _this;\n  }\n\n  MsgDelegateFeedConsent.fromAmino = function (data) {\n    var _a = data.value,\n        operator = _a.operator,\n        delegate = _a.delegate;\n    return new MsgDelegateFeedConsent(operator, delegate);\n  };\n\n  MsgDelegateFeedConsent.prototype.toAmino = function () {\n    var _a = this,\n        operator = _a.operator,\n        delegate = _a.delegate;\n\n    return {\n      type: 'oracle/MsgDelegateFeedConsent',\n      value: {\n        operator: operator,\n        delegate: delegate\n      }\n    };\n  };\n\n  MsgDelegateFeedConsent.fromData = function (data) {\n    var operator = data.operator,\n        delegate = data.delegate;\n    return new MsgDelegateFeedConsent(operator, delegate);\n  };\n\n  MsgDelegateFeedConsent.prototype.toData = function () {\n    var _a = this,\n        operator = _a.operator,\n        delegate = _a.delegate;\n\n    return {\n      '@type': '/terra.oracle.v1beta1.MsgDelegateFeedConsent',\n      operator: operator,\n      delegate: delegate\n    };\n  };\n\n  MsgDelegateFeedConsent.fromProto = function (proto) {\n    return new MsgDelegateFeedConsent(proto.operator, proto.delegate);\n  };\n\n  MsgDelegateFeedConsent.prototype.toProto = function () {\n    var _a = this,\n        operator = _a.operator,\n        delegate = _a.delegate;\n\n    return tx_1.MsgDelegateFeedConsent.fromPartial({\n      delegate: delegate,\n      operator: operator\n    });\n  };\n\n  MsgDelegateFeedConsent.prototype.packAny = function () {\n    return any_1.Any.fromPartial({\n      typeUrl: '/terra.oracle.v1beta1.MsgDelegateFeedConsent',\n      value: tx_1.MsgDelegateFeedConsent.encode(this.toProto()).finish()\n    });\n  };\n\n  MsgDelegateFeedConsent.unpackAny = function (msgAny) {\n    return MsgDelegateFeedConsent.fromProto(tx_1.MsgDelegateFeedConsent.decode(msgAny.value));\n  };\n\n  return MsgDelegateFeedConsent;\n}(json_1.JSONSerializable);\n\nexports.MsgDelegateFeedConsent = MsgDelegateFeedConsent;","map":{"version":3,"sources":["../../../../src/core/oracle/msgs/MsgDelegateFeedConsent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MsgDelegateFeedConsent = void 0;\nvar json_1 = require(\"../../../util/json\");\nvar any_1 = require(\"@terra-money/terra.proto/google/protobuf/any\");\nvar tx_1 = require(\"@terra-money/terra.proto/terra/oracle/v1beta1/tx\");\n/**\n * A **feeeder** is an account which is responsible for signing transactions with Oracle vote\n * and prevote messages on behalf of the validator. The blockchain will reject\n * [[MsgExchangeRateVote]] and [[MsgExchangeRatePrevote]] messages in transactions\n * signed by an\n * account different than the registered feeder.\n *\n * The following message registers a validator's feeder address.\n */\nvar MsgDelegateFeedConsent = /** @class */ (function (_super) {\n    __extends(MsgDelegateFeedConsent, _super);\n    /**\n     * @param operator validator's operator address\n     * @param delegate account address to set to feeder\n     */\n    function MsgDelegateFeedConsent(operator, delegate) {\n        var _this = _super.call(this) || this;\n        _this.operator = operator;\n        _this.delegate = delegate;\n        return _this;\n    }\n    MsgDelegateFeedConsent.fromAmino = function (data) {\n        var _a = data.value, operator = _a.operator, delegate = _a.delegate;\n        return new MsgDelegateFeedConsent(operator, delegate);\n    };\n    MsgDelegateFeedConsent.prototype.toAmino = function () {\n        var _a = this, operator = _a.operator, delegate = _a.delegate;\n        return {\n            type: 'oracle/MsgDelegateFeedConsent',\n            value: {\n                operator: operator,\n                delegate: delegate,\n            },\n        };\n    };\n    MsgDelegateFeedConsent.fromData = function (data) {\n        var operator = data.operator, delegate = data.delegate;\n        return new MsgDelegateFeedConsent(operator, delegate);\n    };\n    MsgDelegateFeedConsent.prototype.toData = function () {\n        var _a = this, operator = _a.operator, delegate = _a.delegate;\n        return {\n            '@type': '/terra.oracle.v1beta1.MsgDelegateFeedConsent',\n            operator: operator,\n            delegate: delegate,\n        };\n    };\n    MsgDelegateFeedConsent.fromProto = function (proto) {\n        return new MsgDelegateFeedConsent(proto.operator, proto.delegate);\n    };\n    MsgDelegateFeedConsent.prototype.toProto = function () {\n        var _a = this, operator = _a.operator, delegate = _a.delegate;\n        return tx_1.MsgDelegateFeedConsent.fromPartial({\n            delegate: delegate,\n            operator: operator,\n        });\n    };\n    MsgDelegateFeedConsent.prototype.packAny = function () {\n        return any_1.Any.fromPartial({\n            typeUrl: '/terra.oracle.v1beta1.MsgDelegateFeedConsent',\n            value: tx_1.MsgDelegateFeedConsent.encode(this.toProto()).finish(),\n        });\n    };\n    MsgDelegateFeedConsent.unpackAny = function (msgAny) {\n        return MsgDelegateFeedConsent.fromProto(tx_1.MsgDelegateFeedConsent.decode(msgAny.value));\n    };\n    return MsgDelegateFeedConsent;\n}(json_1.JSONSerializable));\nexports.MsgDelegateFeedConsent = MsgDelegateFeedConsent;\n//# sourceMappingURL=MsgDelegateFeedConsent.js.map"]},"metadata":{},"sourceType":"script"}