{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { WalletContext, WalletStatus } from '@terra-money/use-wallet';\nimport { useMemo } from 'react';\nexport function StaticWalletProvider(_ref) {\n  let {\n    children,\n    defaultNetwork,\n    status = WalletStatus.INITIALIZING,\n    availableConnectTypes = [],\n    availableInstallTypes = [],\n    availableConnections = [],\n    wallets = [],\n    supportFeatures = new Set()\n  } = _ref;\n  const state = useMemo(() => {\n    return {\n      availableConnectTypes,\n      availableInstallTypes,\n      availableConnections,\n      status,\n      network: defaultNetwork,\n      wallets,\n      supportFeatures,\n      install: () => {\n        throw new Error('not implemented!');\n      },\n      connect: () => {\n        throw new Error('not implemented!');\n      },\n      connectReadonly: () => {\n        throw new Error('not implemented!');\n      },\n      disconnect: () => {\n        throw new Error('not implemented!');\n      },\n      post: () => {\n        throw new Error('not implemented!');\n      },\n      sign: () => {\n        throw new Error('not implemented!');\n      },\n      signBytes: () => {\n        throw new Error('not implemented!');\n      },\n      refetchStates: () => {\n        throw new Error('not implemented!');\n      },\n      recheckStatus: () => {\n        throw new Error('not implemented!');\n      },\n      isChromeExtensionCompatibleBrowser: () => {\n        throw new Error('not implemented!');\n      },\n      hasCW20Tokens: () => {\n        throw new Error('not implemented!');\n      },\n      addCW20Tokens: () => {\n        throw new Error('not implemented!');\n      },\n      hasNetwork: () => {\n        throw new Error('not implemented!');\n      },\n      addNetwork: () => {\n        throw new Error('not implemented!');\n      }\n    };\n  }, [availableConnectTypes, availableInstallTypes, availableConnections, status, defaultNetwork, wallets, supportFeatures]);\n  return _jsx(WalletContext.Provider, Object.assign({\n    value: state\n  }, {\n    children: children\n  }), void 0);\n}","map":{"version":3,"sources":["../../../../src/@terra-money/wallet-provider/impl-react/StaticWalletProvider.tsx"],"names":[],"mappings":";AACA,SAKE,aALF,EAOE,YAPF,QAQO,yBARP;AASA,SAA2B,OAA3B,QAA0C,OAA1C;AAaA,OAAM,SAAU,oBAAV,OASsB;AAAA,MATS;AACnC,IAAA,QADmC;AAEnC,IAAA,cAFmC;AAGnC,IAAA,MAAM,GAAG,YAAY,CAAC,YAHa;AAInC,IAAA,qBAAqB,GAAG,EAJW;AAKnC,IAAA,qBAAqB,GAAG,EALW;AAMnC,IAAA,oBAAoB,GAAG,EANY;AAOnC,IAAA,OAAO,GAAG,EAPyB;AAQnC,IAAA,eAAe,GAAG,IAAI,GAAJ;AARiB,GAST;AAC1B,QAAM,KAAK,GAAG,OAAO,CAAS,MAAK;AACjC,WAAO;AACL,MAAA,qBADK;AAEL,MAAA,qBAFK;AAGL,MAAA,oBAHK;AAIL,MAAA,MAJK;AAKL,MAAA,OAAO,EAAE,cALJ;AAML,MAAA,OANK;AAOL,MAAA,eAPK;AAQL,MAAA,OAAO,EAAE,MAAK;AACZ,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAVI;AAWL,MAAA,OAAO,EAAE,MAAK;AACZ,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAbI;AAcL,MAAA,eAAe,EAAE,MAAK;AACpB,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAhBI;AAiBL,MAAA,UAAU,EAAE,MAAK;AACf,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAnBI;AAoBL,MAAA,IAAI,EAAE,MAAK;AACT,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAtBI;AAuBL,MAAA,IAAI,EAAE,MAAK;AACT,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAzBI;AA0BL,MAAA,SAAS,EAAE,MAAK;AACd,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OA5BI;AA6BL,MAAA,aAAa,EAAE,MAAK;AAClB,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OA/BI;AAgCL,MAAA,aAAa,EAAE,MAAK;AAClB,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAlCI;AAmCL,MAAA,kCAAkC,EAAE,MAAK;AACvC,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OArCI;AAsCL,MAAA,aAAa,EAAE,MAAK;AAClB,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAxCI;AAyCL,MAAA,aAAa,EAAE,MAAK;AAClB,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OA3CI;AA4CL,MAAA,UAAU,EAAE,MAAK;AACf,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OA9CI;AA+CL,MAAA,UAAU,EAAE,MAAK;AACf,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD;AAjDI,KAAP;AAmDD,GApDoB,EAoDlB,CACD,qBADC,EAED,qBAFC,EAGD,oBAHC,EAID,MAJC,EAKD,cALC,EAMD,OANC,EAOD,eAPC,CApDkB,CAArB;AA8DA,SACE,IAAA,CAAC,aAAa,CAAC,QAAf,EAAuB,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,KAAK,EAAE;AAAR,GAAA,EAAa;AAAA,IAAA,QAAA,EAAG;AAAH,GAAb,CAAvB,EAA+C,KAAA,CAA/C,CADF;AAGD","sourcesContent":["import { TerraWebExtensionFeatures } from '@terra-dev/web-extension-interface';\nimport {\n  Connection,\n  ConnectType,\n  NetworkInfo,\n  Wallet,\n  WalletContext,\n  WalletInfo,\n  WalletStatus,\n} from '@terra-money/use-wallet';\nimport React, { ReactNode, useMemo } from 'react';\n\nexport interface StaticWalletProviderProps {\n  children: ReactNode;\n  defaultNetwork: NetworkInfo;\n  status?: WalletStatus;\n  availableConnectTypes?: ConnectType[];\n  availableInstallTypes?: ConnectType[];\n  availableConnections?: Connection[];\n  wallets?: WalletInfo[];\n  supportFeatures?: Set<TerraWebExtensionFeatures>;\n}\n\nexport function StaticWalletProvider({\n  children,\n  defaultNetwork,\n  status = WalletStatus.INITIALIZING,\n  availableConnectTypes = [],\n  availableInstallTypes = [],\n  availableConnections = [],\n  wallets = [],\n  supportFeatures = new Set(),\n}: StaticWalletProviderProps) {\n  const state = useMemo<Wallet>(() => {\n    return {\n      availableConnectTypes,\n      availableInstallTypes,\n      availableConnections,\n      status,\n      network: defaultNetwork,\n      wallets,\n      supportFeatures,\n      install: () => {\n        throw new Error('not implemented!');\n      },\n      connect: () => {\n        throw new Error('not implemented!');\n      },\n      connectReadonly: () => {\n        throw new Error('not implemented!');\n      },\n      disconnect: () => {\n        throw new Error('not implemented!');\n      },\n      post: () => {\n        throw new Error('not implemented!');\n      },\n      sign: () => {\n        throw new Error('not implemented!');\n      },\n      signBytes: () => {\n        throw new Error('not implemented!');\n      },\n      refetchStates: () => {\n        throw new Error('not implemented!');\n      },\n      recheckStatus: () => {\n        throw new Error('not implemented!');\n      },\n      isChromeExtensionCompatibleBrowser: () => {\n        throw new Error('not implemented!');\n      },\n      hasCW20Tokens: () => {\n        throw new Error('not implemented!');\n      },\n      addCW20Tokens: () => {\n        throw new Error('not implemented!');\n      },\n      hasNetwork: () => {\n        throw new Error('not implemented!');\n      },\n      addNetwork: () => {\n        throw new Error('not implemented!');\n      },\n    };\n  }, [\n    availableConnectTypes,\n    availableInstallTypes,\n    availableConnections,\n    status,\n    defaultNetwork,\n    wallets,\n    supportFeatures,\n  ]);\n\n  return (\n    <WalletContext.Provider value={state}>{children}</WalletContext.Provider>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}