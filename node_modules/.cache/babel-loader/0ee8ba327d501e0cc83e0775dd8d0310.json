{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContractEvents = exports.getContractAddress = exports.getCodeId = void 0;\n\nvar TxAPI_1 = require(\"../client/lcd/api/TxAPI\");\n\nfunction getCodeId(txResult, msgIndex) {\n  if (msgIndex === void 0) {\n    msgIndex = 0;\n  }\n\n  if ((0, TxAPI_1.isTxError)(txResult) || txResult.logs === undefined || txResult.logs.length === 0) {\n    throw new Error('could not parse code id -- tx logs are empty.');\n  }\n\n  var codeId = txResult.logs[msgIndex].eventsByType['store_code']['code_id'][0];\n  return codeId;\n}\n\nexports.getCodeId = getCodeId;\n\nfunction getContractAddress(txResult, msgIndex) {\n  if (msgIndex === void 0) {\n    msgIndex = 0;\n  }\n\n  if ((0, TxAPI_1.isTxError)(txResult) || txResult.logs === undefined || txResult.logs.length === 0) {\n    throw new Error('could not parse contract address -- tx logs are empty.');\n  }\n\n  var contractAddress = txResult.logs[msgIndex].eventsByType['instantiate_contract']['contract_address'][0];\n  return contractAddress;\n}\n\nexports.getContractAddress = getContractAddress;\n\nfunction getContractEvents(txResult, msgIndex) {\n  if (msgIndex === void 0) {\n    msgIndex = 0;\n  }\n\n  if ((0, TxAPI_1.isTxError)(txResult) || txResult.logs === undefined || txResult.logs.length === 0) {\n    throw new Error('could not parse contract events -- tx logs are empty.');\n  }\n\n  var contractEvents = [];\n\n  for (var _i = 0, _a = txResult.logs[msgIndex].events; _i < _a.length; _i++) {\n    var event_1 = _a[_i];\n\n    if (event_1.type === 'from_contract') {\n      var eventData = {\n        contract_address: ''\n      }; // will be overwritten\n\n      var currentContractAddress = event_1.attributes[0].value;\n\n      for (var _b = 0, _c = event_1.attributes; _b < _c.length; _b++) {\n        var att = _c[_b];\n\n        if (att.key == 'contract_address' && currentContractAddress !== att.value) {\n          contractEvents.push(eventData);\n          eventData = {\n            contract_address: ''\n          };\n          currentContractAddress = att.value;\n        }\n\n        eventData[att.key] = att.value;\n      }\n\n      contractEvents.push(eventData);\n      return contractEvents;\n    }\n  }\n\n  throw new Error(\"could not find event type 'from_contract' in logs\");\n}\n\nexports.getContractEvents = getContractEvents;","map":{"version":3,"sources":["../../src/util/contract.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContractEvents = exports.getContractAddress = exports.getCodeId = void 0;\nvar TxAPI_1 = require(\"../client/lcd/api/TxAPI\");\nfunction getCodeId(txResult, msgIndex) {\n    if (msgIndex === void 0) { msgIndex = 0; }\n    if ((0, TxAPI_1.isTxError)(txResult) ||\n        txResult.logs === undefined ||\n        txResult.logs.length === 0) {\n        throw new Error('could not parse code id -- tx logs are empty.');\n    }\n    var codeId = txResult.logs[msgIndex].eventsByType['store_code']['code_id'][0];\n    return codeId;\n}\nexports.getCodeId = getCodeId;\nfunction getContractAddress(txResult, msgIndex) {\n    if (msgIndex === void 0) { msgIndex = 0; }\n    if ((0, TxAPI_1.isTxError)(txResult) ||\n        txResult.logs === undefined ||\n        txResult.logs.length === 0) {\n        throw new Error('could not parse contract address -- tx logs are empty.');\n    }\n    var contractAddress = txResult.logs[msgIndex].eventsByType['instantiate_contract']['contract_address'][0];\n    return contractAddress;\n}\nexports.getContractAddress = getContractAddress;\nfunction getContractEvents(txResult, msgIndex) {\n    if (msgIndex === void 0) { msgIndex = 0; }\n    if ((0, TxAPI_1.isTxError)(txResult) ||\n        txResult.logs === undefined ||\n        txResult.logs.length === 0) {\n        throw new Error('could not parse contract events -- tx logs are empty.');\n    }\n    var contractEvents = [];\n    for (var _i = 0, _a = txResult.logs[msgIndex].events; _i < _a.length; _i++) {\n        var event_1 = _a[_i];\n        if (event_1.type === 'from_contract') {\n            var eventData = { contract_address: '' }; // will be overwritten\n            var currentContractAddress = event_1.attributes[0].value;\n            for (var _b = 0, _c = event_1.attributes; _b < _c.length; _b++) {\n                var att = _c[_b];\n                if (att.key == 'contract_address' &&\n                    currentContractAddress !== att.value) {\n                    contractEvents.push(eventData);\n                    eventData = { contract_address: '' };\n                    currentContractAddress = att.value;\n                }\n                eventData[att.key] = att.value;\n            }\n            contractEvents.push(eventData);\n            return contractEvents;\n        }\n    }\n    throw new Error(\"could not find event type 'from_contract' in logs\");\n}\nexports.getContractEvents = getContractEvents;\n//# sourceMappingURL=contract.js.map"]},"metadata":{},"sourceType":"script"}