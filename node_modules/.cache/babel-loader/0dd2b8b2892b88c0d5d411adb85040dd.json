{"ast":null,"code":"import { WebExtensionCreateTxFailed, WebExtensionTxFailed, WebExtensionTxUnspecifiedError, WebExtensionUserDenied } from '@terra-dev/web-extension-interface';\nimport { Extension } from '@terra-money/terra.js';\n\nfunction toExplicitError(error) {\n  if (error && 'code' in error) {\n    switch (error.code) {\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L182\n      case 1:\n        return new WebExtensionUserDenied();\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L137\n\n      case 2:\n        if (error.data) {\n          const {\n            txhash\n          } = error.data;\n          return new WebExtensionTxFailed(txhash, error.message, null);\n        } else {\n          return new WebExtensionTxFailed(undefined, error.message, null);\n        }\n\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L153\n\n      case 3:\n        return new WebExtensionCreateTxFailed(error.message);\n\n      default:\n        return new WebExtensionTxUnspecifiedError(error.message);\n    }\n  } else {\n    return new WebExtensionTxUnspecifiedError(String(error));\n  }\n}\n\nconst pool = new Map();\nexport function createFixedExtension(identifier) {\n  if (pool.has(identifier)) {\n    return pool.get(identifier);\n  }\n\n  const extension = new Extension(identifier);\n  let _inTransactionProgress = false;\n  const postResolvers = new Map();\n  const signResolvers = new Map();\n  const signBytesResolvers = new Map();\n  const infoResolvers = new Set();\n  const connectResolvers = new Set();\n  extension.on('onPost', result => {\n    if (!result) return;\n    const {\n      error,\n      ...payload\n    } = result;\n\n    if (!postResolvers.has(payload.id)) {\n      return;\n    }\n\n    const [resolve, reject] = postResolvers.get(payload.id);\n\n    if (!payload.success) {\n      reject(toExplicitError(error));\n    } else if (resolve) {\n      resolve({\n        name: 'onPost',\n        payload\n      });\n    }\n\n    postResolvers.delete(payload.id);\n\n    if (postResolvers.size === 0) {\n      _inTransactionProgress = false;\n    }\n  });\n  extension.on('onSign', result => {\n    if (!result) return;\n    const {\n      error,\n      ...payload\n    } = result;\n\n    if (signResolvers.has(payload.id)) {\n      if (!signResolvers.has(payload.id)) {\n        return;\n      }\n\n      const [resolve, reject] = signResolvers.get(payload.id);\n\n      if (!payload.success) {\n        reject(toExplicitError(error));\n      } else if (resolve) {\n        resolve({\n          name: 'onSign',\n          payload\n        });\n      }\n\n      signResolvers.delete(payload.id);\n\n      if (signResolvers.size === 0) {\n        _inTransactionProgress = false;\n      }\n    } else if (signBytesResolvers.has(payload.id)) {\n      if (!signBytesResolvers.has(payload.id)) {\n        return;\n      }\n\n      const [resolve, reject] = signBytesResolvers.get(payload.id);\n\n      if (!payload.success) {\n        reject(toExplicitError(error));\n      } else if (resolve) {\n        resolve({\n          name: 'onSignBytes',\n          payload\n        });\n      }\n\n      signBytesResolvers.delete(payload.id);\n\n      if (signBytesResolvers.size === 0) {\n        _inTransactionProgress = false;\n      }\n    }\n  });\n  extension.on('onInfo', result => {\n    if (!result) return;\n    const {\n      error,\n      ...payload\n    } = result;\n\n    for (const [resolve, reject] of infoResolvers) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(payload);\n      }\n    }\n\n    infoResolvers.clear();\n  });\n  extension.on('onConnect', result => {\n    if (!result) return;\n    const {\n      error,\n      ...payload\n    } = result;\n\n    for (const [resolve, reject] of connectResolvers) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(payload);\n      }\n    }\n\n    connectResolvers.clear();\n  });\n\n  function post(data) {\n    return new Promise(function () {\n      _inTransactionProgress = true;\n      const id = extension.post({ ...data,\n        purgeQueue: true\n      });\n\n      for (var _len = arguments.length, resolver = new Array(_len), _key = 0; _key < _len; _key++) {\n        resolver[_key] = arguments[_key];\n      }\n\n      postResolvers.set(id, resolver);\n      setTimeout(() => {\n        if (postResolvers.has(id)) {\n          postResolvers.delete(id);\n\n          if (postResolvers.size === 0) {\n            _inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n\n  function sign(data) {\n    return new Promise(function () {\n      _inTransactionProgress = true;\n      const id = extension.sign({ ...data,\n        purgeQueue: true\n      });\n\n      for (var _len2 = arguments.length, resolver = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        resolver[_key2] = arguments[_key2];\n      }\n\n      signResolvers.set(id, resolver);\n      setTimeout(() => {\n        if (signResolvers.has(id)) {\n          signResolvers.delete(id);\n\n          if (signResolvers.size === 0) {\n            _inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n\n  function signBytes(bytes) {\n    return new Promise(function () {\n      _inTransactionProgress = true;\n      const id = extension.signBytes({\n        bytes,\n        purgeQueue: true\n      });\n\n      for (var _len3 = arguments.length, resolver = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        resolver[_key3] = arguments[_key3];\n      }\n\n      signBytesResolvers.set(id, resolver);\n      setTimeout(() => {\n        if (signBytesResolvers.has(id)) {\n          signBytesResolvers.delete(id);\n\n          if (signBytesResolvers.size === 0) {\n            _inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n\n  function connect() {\n    return new Promise(function () {\n      for (var _len4 = arguments.length, resolver = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        resolver[_key4] = arguments[_key4];\n      }\n\n      connectResolvers.add(resolver);\n      extension.connect();\n    });\n  }\n\n  function info() {\n    return new Promise(function () {\n      for (var _len5 = arguments.length, resolver = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        resolver[_key5] = arguments[_key5];\n      }\n\n      infoResolvers.add(resolver);\n      extension.info();\n    });\n  }\n\n  function disconnect() {\n    connectResolvers.clear();\n    infoResolvers.clear();\n    postResolvers.clear();\n    signResolvers.clear();\n    signBytesResolvers.clear();\n  }\n\n  function inTransactionProgress() {\n    return _inTransactionProgress;\n  }\n\n  const result = {\n    post,\n    sign,\n    signBytes,\n    connect,\n    info,\n    disconnect,\n    inTransactionProgress\n  };\n  pool.set(identifier, result);\n  return result;\n}","map":{"version":3,"sources":["../../../../../src/@terra-money/wallet-provider/modules/legacy-extension/createFixedExtension.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  WebExtensionCreateTxFailed,\n  WebExtensionTxFailed,\n  WebExtensionTxUnspecifiedError,\n  WebExtensionUserDenied,\n} from '@terra-dev/web-extension-interface';\nimport { CreateTxOptions, Extension, Tx } from '@terra-money/terra.js';\nimport { NetworkInfo } from '@terra-money/use-wallet';\n\ntype ConnectResponse = { address?: string };\ntype PostResponse = {\n  payload: {\n    result: {\n      height: number;\n      raw_log: string;\n      txhash: string;\n    };\n  };\n};\ntype SignResponse = {\n  payload: {\n    result: Tx.Data;\n  };\n};\ntype SignBytesResponse = any;\ntype InfoResponse = NetworkInfo;\n\nexport interface FixedExtension {\n  post: (data: CreateTxOptions) => Promise<PostResponse>;\n  sign: (data: CreateTxOptions) => Promise<SignResponse>;\n  signBytes: (bytes: Buffer) => Promise<SignBytesResponse>;\n  info: () => Promise<InfoResponse>;\n  connect: () => Promise<ConnectResponse>;\n  inTransactionProgress: () => boolean;\n  disconnect: () => void;\n}\n\nfunction toExplicitError(error: any) {\n  if (error && 'code' in error) {\n    switch (error.code) {\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L182\n      case 1:\n        return new WebExtensionUserDenied();\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L137\n      case 2:\n        if (error.data) {\n          const { txhash } = error.data;\n          return new WebExtensionTxFailed(txhash, error.message, null);\n        } else {\n          return new WebExtensionTxFailed(undefined, error.message, null);\n        }\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L153\n      case 3:\n        return new WebExtensionCreateTxFailed(error.message);\n      default:\n        return new WebExtensionTxUnspecifiedError(error.message);\n    }\n  } else {\n    return new WebExtensionTxUnspecifiedError(String(error));\n  }\n}\n\nconst pool = new Map<string, FixedExtension>();\n\nexport function createFixedExtension(identifier: string): FixedExtension {\n  if (pool.has(identifier)) {\n    return pool.get(identifier)!;\n  }\n\n  const extension = new Extension(identifier);\n\n  let _inTransactionProgress = false;\n\n  const postResolvers = new Map<\n    number,\n    [(data: any) => void, (error: any) => void]\n  >();\n\n  const signResolvers = new Map<\n    number,\n    [(data: any) => void, (error: any) => void]\n  >();\n\n  const signBytesResolvers = new Map<\n    number,\n    [(data: any) => void, (error: any) => void]\n  >();\n\n  const infoResolvers = new Set<[(data: any) => void, (error: any) => void]>();\n\n  const connectResolvers = new Set<\n    [(data: any) => void, (error: any) => void]\n  >();\n\n  extension.on('onPost', (result) => {\n    if (!result) return;\n\n    const { error, ...payload } = result;\n\n    if (!postResolvers.has(payload.id)) {\n      return;\n    }\n\n    const [resolve, reject] = postResolvers.get(payload.id)!;\n\n    if (!payload.success) {\n      reject(toExplicitError(error));\n    } else if (resolve) {\n      resolve({ name: 'onPost', payload });\n    }\n\n    postResolvers.delete(payload.id);\n\n    if (postResolvers.size === 0) {\n      _inTransactionProgress = false;\n    }\n  });\n\n  extension.on('onSign', (result) => {\n    if (!result) return;\n\n    const { error, ...payload } = result;\n\n    if (signResolvers.has(payload.id)) {\n      if (!signResolvers.has(payload.id)) {\n        return;\n      }\n\n      const [resolve, reject] = signResolvers.get(payload.id)!;\n\n      if (!payload.success) {\n        reject(toExplicitError(error));\n      } else if (resolve) {\n        resolve({ name: 'onSign', payload });\n      }\n\n      signResolvers.delete(payload.id);\n\n      if (signResolvers.size === 0) {\n        _inTransactionProgress = false;\n      }\n    } else if (signBytesResolvers.has(payload.id)) {\n      if (!signBytesResolvers.has(payload.id)) {\n        return;\n      }\n\n      const [resolve, reject] = signBytesResolvers.get(payload.id)!;\n\n      if (!payload.success) {\n        reject(toExplicitError(error));\n      } else if (resolve) {\n        resolve({ name: 'onSignBytes', payload });\n      }\n\n      signBytesResolvers.delete(payload.id);\n\n      if (signBytesResolvers.size === 0) {\n        _inTransactionProgress = false;\n      }\n    }\n  });\n\n  extension.on('onInfo', (result) => {\n    if (!result) return;\n    const { error, ...payload } = result;\n\n    for (const [resolve, reject] of infoResolvers) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(payload);\n      }\n    }\n\n    infoResolvers.clear();\n  });\n\n  extension.on('onConnect', (result) => {\n    if (!result) return;\n    const { error, ...payload } = result;\n\n    for (const [resolve, reject] of connectResolvers) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(payload);\n      }\n    }\n\n    connectResolvers.clear();\n  });\n\n  function post(data: object) {\n    return new Promise<PostResponse>((...resolver) => {\n      _inTransactionProgress = true;\n\n      const id = extension.post({\n        ...(data as any),\n        purgeQueue: true,\n      });\n\n      postResolvers.set(id, resolver);\n\n      setTimeout(() => {\n        if (postResolvers.has(id)) {\n          postResolvers.delete(id);\n\n          if (postResolvers.size === 0) {\n            _inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n\n  function sign(data: object) {\n    return new Promise<SignResponse>((...resolver) => {\n      _inTransactionProgress = true;\n\n      const id = extension.sign({\n        ...(data as any),\n        purgeQueue: true,\n      });\n\n      signResolvers.set(id, resolver);\n\n      setTimeout(() => {\n        if (signResolvers.has(id)) {\n          signResolvers.delete(id);\n\n          if (signResolvers.size === 0) {\n            _inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n\n  function signBytes(bytes: Buffer) {\n    return new Promise<SignResponse>((...resolver) => {\n      _inTransactionProgress = true;\n\n      const id = extension.signBytes({\n        bytes,\n        purgeQueue: true,\n      });\n\n      signBytesResolvers.set(id, resolver);\n\n      setTimeout(() => {\n        if (signBytesResolvers.has(id)) {\n          signBytesResolvers.delete(id);\n\n          if (signBytesResolvers.size === 0) {\n            _inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n\n  function connect() {\n    return new Promise<ConnectResponse>((...resolver) => {\n      connectResolvers.add(resolver);\n      extension.connect();\n    });\n  }\n\n  function info() {\n    return new Promise<InfoResponse>((...resolver) => {\n      infoResolvers.add(resolver);\n      extension.info();\n    });\n  }\n\n  function disconnect() {\n    connectResolvers.clear();\n    infoResolvers.clear();\n    postResolvers.clear();\n    signResolvers.clear();\n    signBytesResolvers.clear();\n  }\n\n  function inTransactionProgress() {\n    return _inTransactionProgress;\n  }\n\n  const result: FixedExtension = {\n    post,\n    sign,\n    signBytes,\n    connect,\n    info,\n    disconnect,\n    inTransactionProgress,\n  };\n\n  pool.set(identifier, result);\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}