{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgClientImpl = exports.MsgClearContractAdminResponse = exports.MsgClearContractAdmin = exports.MsgUpdateContractAdminResponse = exports.MsgUpdateContractAdmin = exports.MsgMigrateContractResponse = exports.MsgMigrateContract = exports.MsgExecuteContractResponse = exports.MsgExecuteContract = exports.MsgInstantiateContractResponse = exports.MsgInstantiateContract = exports.MsgMigrateCodeResponse = exports.MsgMigrateCode = exports.MsgStoreCodeResponse = exports.MsgStoreCode = exports.protobufPackage = void 0;\n/* eslint-disable */\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\n\nconst coin_1 = require(\"../../../cosmos/base/v1beta1/coin\");\n\nexports.protobufPackage = \"terra.wasm.v1beta1\";\nconst baseMsgStoreCode = {\n  sender: \"\"\n};\nexports.MsgStoreCode = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.sender !== \"\") {\n      writer.uint32(10).string(message.sender);\n    }\n\n    if (message.wasmByteCode.length !== 0) {\n      writer.uint32(18).bytes(message.wasmByteCode);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgStoreCode);\n    message.wasmByteCode = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.sender = reader.string();\n          break;\n\n        case 2:\n          message.wasmByteCode = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgStoreCode);\n    message.wasmByteCode = new Uint8Array();\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = String(object.sender);\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.wasmByteCode !== undefined && object.wasmByteCode !== null) {\n      message.wasmByteCode = bytesFromBase64(object.wasmByteCode);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.wasmByteCode !== undefined && (obj.wasmByteCode = base64FromBytes(message.wasmByteCode !== undefined ? message.wasmByteCode : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgStoreCode);\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = object.sender;\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.wasmByteCode !== undefined && object.wasmByteCode !== null) {\n      message.wasmByteCode = object.wasmByteCode;\n    } else {\n      message.wasmByteCode = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgStoreCodeResponse = {\n  codeId: long_1.default.UZERO\n};\nexports.MsgStoreCodeResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (!message.codeId.isZero()) {\n      writer.uint32(8).uint64(message.codeId);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgStoreCodeResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.codeId = reader.uint64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgStoreCodeResponse);\n\n    if (object.codeId !== undefined && object.codeId !== null) {\n      message.codeId = long_1.default.fromString(object.codeId);\n    } else {\n      message.codeId = long_1.default.UZERO;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.codeId !== undefined && (obj.codeId = (message.codeId || long_1.default.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgStoreCodeResponse);\n\n    if (object.codeId !== undefined && object.codeId !== null) {\n      message.codeId = object.codeId;\n    } else {\n      message.codeId = long_1.default.UZERO;\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgMigrateCode = {\n  codeId: long_1.default.UZERO,\n  sender: \"\"\n};\nexports.MsgMigrateCode = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (!message.codeId.isZero()) {\n      writer.uint32(8).uint64(message.codeId);\n    }\n\n    if (message.sender !== \"\") {\n      writer.uint32(18).string(message.sender);\n    }\n\n    if (message.wasmByteCode.length !== 0) {\n      writer.uint32(26).bytes(message.wasmByteCode);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgMigrateCode);\n    message.wasmByteCode = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.codeId = reader.uint64();\n          break;\n\n        case 2:\n          message.sender = reader.string();\n          break;\n\n        case 3:\n          message.wasmByteCode = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgMigrateCode);\n    message.wasmByteCode = new Uint8Array();\n\n    if (object.codeId !== undefined && object.codeId !== null) {\n      message.codeId = long_1.default.fromString(object.codeId);\n    } else {\n      message.codeId = long_1.default.UZERO;\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = String(object.sender);\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.wasmByteCode !== undefined && object.wasmByteCode !== null) {\n      message.wasmByteCode = bytesFromBase64(object.wasmByteCode);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.codeId !== undefined && (obj.codeId = (message.codeId || long_1.default.UZERO).toString());\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.wasmByteCode !== undefined && (obj.wasmByteCode = base64FromBytes(message.wasmByteCode !== undefined ? message.wasmByteCode : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgMigrateCode);\n\n    if (object.codeId !== undefined && object.codeId !== null) {\n      message.codeId = object.codeId;\n    } else {\n      message.codeId = long_1.default.UZERO;\n    }\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = object.sender;\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.wasmByteCode !== undefined && object.wasmByteCode !== null) {\n      message.wasmByteCode = object.wasmByteCode;\n    } else {\n      message.wasmByteCode = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgMigrateCodeResponse = {};\nexports.MsgMigrateCodeResponse = {\n  encode(_) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgMigrateCodeResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgMigrateCodeResponse);\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgMigrateCodeResponse);\n    return message;\n  }\n\n};\nconst baseMsgInstantiateContract = {\n  sender: \"\",\n  admin: \"\",\n  codeId: long_1.default.UZERO\n};\nexports.MsgInstantiateContract = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.sender !== \"\") {\n      writer.uint32(10).string(message.sender);\n    }\n\n    if (message.admin !== \"\") {\n      writer.uint32(18).string(message.admin);\n    }\n\n    if (!message.codeId.isZero()) {\n      writer.uint32(24).uint64(message.codeId);\n    }\n\n    if (message.initMsg.length !== 0) {\n      writer.uint32(34).bytes(message.initMsg);\n    }\n\n    for (const v of message.initCoins) {\n      coin_1.Coin.encode(v, writer.uint32(42).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgInstantiateContract);\n    message.initCoins = [];\n    message.initMsg = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.sender = reader.string();\n          break;\n\n        case 2:\n          message.admin = reader.string();\n          break;\n\n        case 3:\n          message.codeId = reader.uint64();\n          break;\n\n        case 4:\n          message.initMsg = reader.bytes();\n          break;\n\n        case 5:\n          message.initCoins.push(coin_1.Coin.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgInstantiateContract);\n    message.initCoins = [];\n    message.initMsg = new Uint8Array();\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = String(object.sender);\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.admin !== undefined && object.admin !== null) {\n      message.admin = String(object.admin);\n    } else {\n      message.admin = \"\";\n    }\n\n    if (object.codeId !== undefined && object.codeId !== null) {\n      message.codeId = long_1.default.fromString(object.codeId);\n    } else {\n      message.codeId = long_1.default.UZERO;\n    }\n\n    if (object.initMsg !== undefined && object.initMsg !== null) {\n      message.initMsg = bytesFromBase64(object.initMsg);\n    }\n\n    if (object.initCoins !== undefined && object.initCoins !== null) {\n      for (const e of object.initCoins) {\n        message.initCoins.push(coin_1.Coin.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.admin !== undefined && (obj.admin = message.admin);\n    message.codeId !== undefined && (obj.codeId = (message.codeId || long_1.default.UZERO).toString());\n    message.initMsg !== undefined && (obj.initMsg = base64FromBytes(message.initMsg !== undefined ? message.initMsg : new Uint8Array()));\n\n    if (message.initCoins) {\n      obj.initCoins = message.initCoins.map(e => e ? coin_1.Coin.toJSON(e) : undefined);\n    } else {\n      obj.initCoins = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgInstantiateContract);\n    message.initCoins = [];\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = object.sender;\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.admin !== undefined && object.admin !== null) {\n      message.admin = object.admin;\n    } else {\n      message.admin = \"\";\n    }\n\n    if (object.codeId !== undefined && object.codeId !== null) {\n      message.codeId = object.codeId;\n    } else {\n      message.codeId = long_1.default.UZERO;\n    }\n\n    if (object.initMsg !== undefined && object.initMsg !== null) {\n      message.initMsg = object.initMsg;\n    } else {\n      message.initMsg = new Uint8Array();\n    }\n\n    if (object.initCoins !== undefined && object.initCoins !== null) {\n      for (const e of object.initCoins) {\n        message.initCoins.push(coin_1.Coin.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgInstantiateContractResponse = {\n  contractAddress: \"\"\n};\nexports.MsgInstantiateContractResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.contractAddress !== \"\") {\n      writer.uint32(10).string(message.contractAddress);\n    }\n\n    if (message.data.length !== 0) {\n      writer.uint32(18).bytes(message.data);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgInstantiateContractResponse);\n    message.data = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.contractAddress = reader.string();\n          break;\n\n        case 2:\n          message.data = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgInstantiateContractResponse);\n    message.data = new Uint8Array();\n\n    if (object.contractAddress !== undefined && object.contractAddress !== null) {\n      message.contractAddress = String(object.contractAddress);\n    } else {\n      message.contractAddress = \"\";\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgInstantiateContractResponse);\n\n    if (object.contractAddress !== undefined && object.contractAddress !== null) {\n      message.contractAddress = object.contractAddress;\n    } else {\n      message.contractAddress = \"\";\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgExecuteContract = {\n  sender: \"\",\n  contract: \"\"\n};\nexports.MsgExecuteContract = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.sender !== \"\") {\n      writer.uint32(10).string(message.sender);\n    }\n\n    if (message.contract !== \"\") {\n      writer.uint32(18).string(message.contract);\n    }\n\n    if (message.executeMsg.length !== 0) {\n      writer.uint32(26).bytes(message.executeMsg);\n    }\n\n    for (const v of message.coins) {\n      coin_1.Coin.encode(v, writer.uint32(42).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgExecuteContract);\n    message.coins = [];\n    message.executeMsg = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.sender = reader.string();\n          break;\n\n        case 2:\n          message.contract = reader.string();\n          break;\n\n        case 3:\n          message.executeMsg = reader.bytes();\n          break;\n\n        case 5:\n          message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgExecuteContract);\n    message.coins = [];\n    message.executeMsg = new Uint8Array();\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = String(object.sender);\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.contract !== undefined && object.contract !== null) {\n      message.contract = String(object.contract);\n    } else {\n      message.contract = \"\";\n    }\n\n    if (object.executeMsg !== undefined && object.executeMsg !== null) {\n      message.executeMsg = bytesFromBase64(object.executeMsg);\n    }\n\n    if (object.coins !== undefined && object.coins !== null) {\n      for (const e of object.coins) {\n        message.coins.push(coin_1.Coin.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.contract !== undefined && (obj.contract = message.contract);\n    message.executeMsg !== undefined && (obj.executeMsg = base64FromBytes(message.executeMsg !== undefined ? message.executeMsg : new Uint8Array()));\n\n    if (message.coins) {\n      obj.coins = message.coins.map(e => e ? coin_1.Coin.toJSON(e) : undefined);\n    } else {\n      obj.coins = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgExecuteContract);\n    message.coins = [];\n\n    if (object.sender !== undefined && object.sender !== null) {\n      message.sender = object.sender;\n    } else {\n      message.sender = \"\";\n    }\n\n    if (object.contract !== undefined && object.contract !== null) {\n      message.contract = object.contract;\n    } else {\n      message.contract = \"\";\n    }\n\n    if (object.executeMsg !== undefined && object.executeMsg !== null) {\n      message.executeMsg = object.executeMsg;\n    } else {\n      message.executeMsg = new Uint8Array();\n    }\n\n    if (object.coins !== undefined && object.coins !== null) {\n      for (const e of object.coins) {\n        message.coins.push(coin_1.Coin.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgExecuteContractResponse = {};\nexports.MsgExecuteContractResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.data.length !== 0) {\n      writer.uint32(10).bytes(message.data);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgExecuteContractResponse);\n    message.data = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.data = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgExecuteContractResponse);\n    message.data = new Uint8Array();\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgExecuteContractResponse);\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgMigrateContract = {\n  admin: \"\",\n  contract: \"\",\n  newCodeId: long_1.default.UZERO\n};\nexports.MsgMigrateContract = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.admin !== \"\") {\n      writer.uint32(10).string(message.admin);\n    }\n\n    if (message.contract !== \"\") {\n      writer.uint32(18).string(message.contract);\n    }\n\n    if (!message.newCodeId.isZero()) {\n      writer.uint32(24).uint64(message.newCodeId);\n    }\n\n    if (message.migrateMsg.length !== 0) {\n      writer.uint32(34).bytes(message.migrateMsg);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgMigrateContract);\n    message.migrateMsg = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.admin = reader.string();\n          break;\n\n        case 2:\n          message.contract = reader.string();\n          break;\n\n        case 3:\n          message.newCodeId = reader.uint64();\n          break;\n\n        case 4:\n          message.migrateMsg = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgMigrateContract);\n    message.migrateMsg = new Uint8Array();\n\n    if (object.admin !== undefined && object.admin !== null) {\n      message.admin = String(object.admin);\n    } else {\n      message.admin = \"\";\n    }\n\n    if (object.contract !== undefined && object.contract !== null) {\n      message.contract = String(object.contract);\n    } else {\n      message.contract = \"\";\n    }\n\n    if (object.newCodeId !== undefined && object.newCodeId !== null) {\n      message.newCodeId = long_1.default.fromString(object.newCodeId);\n    } else {\n      message.newCodeId = long_1.default.UZERO;\n    }\n\n    if (object.migrateMsg !== undefined && object.migrateMsg !== null) {\n      message.migrateMsg = bytesFromBase64(object.migrateMsg);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.admin !== undefined && (obj.admin = message.admin);\n    message.contract !== undefined && (obj.contract = message.contract);\n    message.newCodeId !== undefined && (obj.newCodeId = (message.newCodeId || long_1.default.UZERO).toString());\n    message.migrateMsg !== undefined && (obj.migrateMsg = base64FromBytes(message.migrateMsg !== undefined ? message.migrateMsg : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgMigrateContract);\n\n    if (object.admin !== undefined && object.admin !== null) {\n      message.admin = object.admin;\n    } else {\n      message.admin = \"\";\n    }\n\n    if (object.contract !== undefined && object.contract !== null) {\n      message.contract = object.contract;\n    } else {\n      message.contract = \"\";\n    }\n\n    if (object.newCodeId !== undefined && object.newCodeId !== null) {\n      message.newCodeId = object.newCodeId;\n    } else {\n      message.newCodeId = long_1.default.UZERO;\n    }\n\n    if (object.migrateMsg !== undefined && object.migrateMsg !== null) {\n      message.migrateMsg = object.migrateMsg;\n    } else {\n      message.migrateMsg = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgMigrateContractResponse = {};\nexports.MsgMigrateContractResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.data.length !== 0) {\n      writer.uint32(10).bytes(message.data);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgMigrateContractResponse);\n    message.data = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.data = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgMigrateContractResponse);\n    message.data = new Uint8Array();\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgMigrateContractResponse);\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgUpdateContractAdmin = {\n  admin: \"\",\n  newAdmin: \"\",\n  contract: \"\"\n};\nexports.MsgUpdateContractAdmin = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.admin !== \"\") {\n      writer.uint32(10).string(message.admin);\n    }\n\n    if (message.newAdmin !== \"\") {\n      writer.uint32(18).string(message.newAdmin);\n    }\n\n    if (message.contract !== \"\") {\n      writer.uint32(26).string(message.contract);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgUpdateContractAdmin);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.admin = reader.string();\n          break;\n\n        case 2:\n          message.newAdmin = reader.string();\n          break;\n\n        case 3:\n          message.contract = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgUpdateContractAdmin);\n\n    if (object.admin !== undefined && object.admin !== null) {\n      message.admin = String(object.admin);\n    } else {\n      message.admin = \"\";\n    }\n\n    if (object.newAdmin !== undefined && object.newAdmin !== null) {\n      message.newAdmin = String(object.newAdmin);\n    } else {\n      message.newAdmin = \"\";\n    }\n\n    if (object.contract !== undefined && object.contract !== null) {\n      message.contract = String(object.contract);\n    } else {\n      message.contract = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.admin !== undefined && (obj.admin = message.admin);\n    message.newAdmin !== undefined && (obj.newAdmin = message.newAdmin);\n    message.contract !== undefined && (obj.contract = message.contract);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgUpdateContractAdmin);\n\n    if (object.admin !== undefined && object.admin !== null) {\n      message.admin = object.admin;\n    } else {\n      message.admin = \"\";\n    }\n\n    if (object.newAdmin !== undefined && object.newAdmin !== null) {\n      message.newAdmin = object.newAdmin;\n    } else {\n      message.newAdmin = \"\";\n    }\n\n    if (object.contract !== undefined && object.contract !== null) {\n      message.contract = object.contract;\n    } else {\n      message.contract = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgUpdateContractAdminResponse = {};\nexports.MsgUpdateContractAdminResponse = {\n  encode(_) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgUpdateContractAdminResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgUpdateContractAdminResponse);\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgUpdateContractAdminResponse);\n    return message;\n  }\n\n};\nconst baseMsgClearContractAdmin = {\n  admin: \"\",\n  contract: \"\"\n};\nexports.MsgClearContractAdmin = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.admin !== \"\") {\n      writer.uint32(10).string(message.admin);\n    }\n\n    if (message.contract !== \"\") {\n      writer.uint32(18).string(message.contract);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgClearContractAdmin);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.admin = reader.string();\n          break;\n\n        case 2:\n          message.contract = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgClearContractAdmin);\n\n    if (object.admin !== undefined && object.admin !== null) {\n      message.admin = String(object.admin);\n    } else {\n      message.admin = \"\";\n    }\n\n    if (object.contract !== undefined && object.contract !== null) {\n      message.contract = String(object.contract);\n    } else {\n      message.contract = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.admin !== undefined && (obj.admin = message.admin);\n    message.contract !== undefined && (obj.contract = message.contract);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgClearContractAdmin);\n\n    if (object.admin !== undefined && object.admin !== null) {\n      message.admin = object.admin;\n    } else {\n      message.admin = \"\";\n    }\n\n    if (object.contract !== undefined && object.contract !== null) {\n      message.contract = object.contract;\n    } else {\n      message.contract = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgClearContractAdminResponse = {};\nexports.MsgClearContractAdminResponse = {\n  encode(_) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgClearContractAdminResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = Object.assign({}, baseMsgClearContractAdminResponse);\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = Object.assign({}, baseMsgClearContractAdminResponse);\n    return message;\n  }\n\n};\n\nclass MsgClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n    this.StoreCode = this.StoreCode.bind(this);\n    this.MigrateCode = this.MigrateCode.bind(this);\n    this.InstantiateContract = this.InstantiateContract.bind(this);\n    this.ExecuteContract = this.ExecuteContract.bind(this);\n    this.MigrateContract = this.MigrateContract.bind(this);\n    this.UpdateContractAdmin = this.UpdateContractAdmin.bind(this);\n    this.ClearContractAdmin = this.ClearContractAdmin.bind(this);\n  }\n\n  StoreCode(request) {\n    const data = exports.MsgStoreCode.encode(request).finish();\n    const promise = this.rpc.request(\"terra.wasm.v1beta1.Msg\", \"StoreCode\", data);\n    return promise.then(data => exports.MsgStoreCodeResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  MigrateCode(request) {\n    const data = exports.MsgMigrateCode.encode(request).finish();\n    const promise = this.rpc.request(\"terra.wasm.v1beta1.Msg\", \"MigrateCode\", data);\n    return promise.then(data => exports.MsgMigrateCodeResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  InstantiateContract(request) {\n    const data = exports.MsgInstantiateContract.encode(request).finish();\n    const promise = this.rpc.request(\"terra.wasm.v1beta1.Msg\", \"InstantiateContract\", data);\n    return promise.then(data => exports.MsgInstantiateContractResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  ExecuteContract(request) {\n    const data = exports.MsgExecuteContract.encode(request).finish();\n    const promise = this.rpc.request(\"terra.wasm.v1beta1.Msg\", \"ExecuteContract\", data);\n    return promise.then(data => exports.MsgExecuteContractResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  MigrateContract(request) {\n    const data = exports.MsgMigrateContract.encode(request).finish();\n    const promise = this.rpc.request(\"terra.wasm.v1beta1.Msg\", \"MigrateContract\", data);\n    return promise.then(data => exports.MsgMigrateContractResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  UpdateContractAdmin(request) {\n    const data = exports.MsgUpdateContractAdmin.encode(request).finish();\n    const promise = this.rpc.request(\"terra.wasm.v1beta1.Msg\", \"UpdateContractAdmin\", data);\n    return promise.then(data => exports.MsgUpdateContractAdminResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  ClearContractAdmin(request) {\n    const data = exports.MsgClearContractAdmin.encode(request).finish();\n    const promise = this.rpc.request(\"terra.wasm.v1beta1.Msg\", \"ClearContractAdmin\", data);\n    return promise.then(data => exports.MsgClearContractAdminResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n}\n\nexports.MsgClientImpl = MsgClientImpl;\n\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\n\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n\n  return arr;\n}\n\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\n\nfunction base64FromBytes(arr) {\n  const bin = [];\n\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n\n  return btoa(bin.join(\"\"));\n}\n\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":{"version":3,"sources":["../../../../src/terra/wasm/v1beta1/tx.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MsgClientImpl = exports.MsgClearContractAdminResponse = exports.MsgClearContractAdmin = exports.MsgUpdateContractAdminResponse = exports.MsgUpdateContractAdmin = exports.MsgMigrateContractResponse = exports.MsgMigrateContract = exports.MsgExecuteContractResponse = exports.MsgExecuteContract = exports.MsgInstantiateContractResponse = exports.MsgInstantiateContract = exports.MsgMigrateCodeResponse = exports.MsgMigrateCode = exports.MsgStoreCodeResponse = exports.MsgStoreCode = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst coin_1 = require(\"../../../cosmos/base/v1beta1/coin\");\nexports.protobufPackage = \"terra.wasm.v1beta1\";\nconst baseMsgStoreCode = { sender: \"\" };\nexports.MsgStoreCode = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.wasmByteCode.length !== 0) {\n            writer.uint32(18).bytes(message.wasmByteCode);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgStoreCode);\n        message.wasmByteCode = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.wasmByteCode = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgStoreCode);\n        message.wasmByteCode = new Uint8Array();\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = String(object.sender);\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.wasmByteCode !== undefined && object.wasmByteCode !== null) {\n            message.wasmByteCode = bytesFromBase64(object.wasmByteCode);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.wasmByteCode !== undefined &&\n            (obj.wasmByteCode = base64FromBytes(message.wasmByteCode !== undefined ? message.wasmByteCode : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseMsgStoreCode);\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = object.sender;\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.wasmByteCode !== undefined && object.wasmByteCode !== null) {\n            message.wasmByteCode = object.wasmByteCode;\n        }\n        else {\n            message.wasmByteCode = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseMsgStoreCodeResponse = { codeId: long_1.default.UZERO };\nexports.MsgStoreCodeResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (!message.codeId.isZero()) {\n            writer.uint32(8).uint64(message.codeId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgStoreCodeResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeId = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgStoreCodeResponse);\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = long_1.default.fromString(object.codeId);\n        }\n        else {\n            message.codeId = long_1.default.UZERO;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.codeId !== undefined && (obj.codeId = (message.codeId || long_1.default.UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseMsgStoreCodeResponse);\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = object.codeId;\n        }\n        else {\n            message.codeId = long_1.default.UZERO;\n        }\n        return message;\n    },\n};\nconst baseMsgMigrateCode = { codeId: long_1.default.UZERO, sender: \"\" };\nexports.MsgMigrateCode = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (!message.codeId.isZero()) {\n            writer.uint32(8).uint64(message.codeId);\n        }\n        if (message.sender !== \"\") {\n            writer.uint32(18).string(message.sender);\n        }\n        if (message.wasmByteCode.length !== 0) {\n            writer.uint32(26).bytes(message.wasmByteCode);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgMigrateCode);\n        message.wasmByteCode = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeId = reader.uint64();\n                    break;\n                case 2:\n                    message.sender = reader.string();\n                    break;\n                case 3:\n                    message.wasmByteCode = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgMigrateCode);\n        message.wasmByteCode = new Uint8Array();\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = long_1.default.fromString(object.codeId);\n        }\n        else {\n            message.codeId = long_1.default.UZERO;\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = String(object.sender);\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.wasmByteCode !== undefined && object.wasmByteCode !== null) {\n            message.wasmByteCode = bytesFromBase64(object.wasmByteCode);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.codeId !== undefined && (obj.codeId = (message.codeId || long_1.default.UZERO).toString());\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.wasmByteCode !== undefined &&\n            (obj.wasmByteCode = base64FromBytes(message.wasmByteCode !== undefined ? message.wasmByteCode : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseMsgMigrateCode);\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = object.codeId;\n        }\n        else {\n            message.codeId = long_1.default.UZERO;\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = object.sender;\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.wasmByteCode !== undefined && object.wasmByteCode !== null) {\n            message.wasmByteCode = object.wasmByteCode;\n        }\n        else {\n            message.wasmByteCode = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseMsgMigrateCodeResponse = {};\nexports.MsgMigrateCodeResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgMigrateCodeResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseMsgMigrateCodeResponse);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseMsgMigrateCodeResponse);\n        return message;\n    },\n};\nconst baseMsgInstantiateContract = { sender: \"\", admin: \"\", codeId: long_1.default.UZERO };\nexports.MsgInstantiateContract = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.admin !== \"\") {\n            writer.uint32(18).string(message.admin);\n        }\n        if (!message.codeId.isZero()) {\n            writer.uint32(24).uint64(message.codeId);\n        }\n        if (message.initMsg.length !== 0) {\n            writer.uint32(34).bytes(message.initMsg);\n        }\n        for (const v of message.initCoins) {\n            coin_1.Coin.encode(v, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgInstantiateContract);\n        message.initCoins = [];\n        message.initMsg = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.admin = reader.string();\n                    break;\n                case 3:\n                    message.codeId = reader.uint64();\n                    break;\n                case 4:\n                    message.initMsg = reader.bytes();\n                    break;\n                case 5:\n                    message.initCoins.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgInstantiateContract);\n        message.initCoins = [];\n        message.initMsg = new Uint8Array();\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = String(object.sender);\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.admin !== undefined && object.admin !== null) {\n            message.admin = String(object.admin);\n        }\n        else {\n            message.admin = \"\";\n        }\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = long_1.default.fromString(object.codeId);\n        }\n        else {\n            message.codeId = long_1.default.UZERO;\n        }\n        if (object.initMsg !== undefined && object.initMsg !== null) {\n            message.initMsg = bytesFromBase64(object.initMsg);\n        }\n        if (object.initCoins !== undefined && object.initCoins !== null) {\n            for (const e of object.initCoins) {\n                message.initCoins.push(coin_1.Coin.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.admin !== undefined && (obj.admin = message.admin);\n        message.codeId !== undefined && (obj.codeId = (message.codeId || long_1.default.UZERO).toString());\n        message.initMsg !== undefined &&\n            (obj.initMsg = base64FromBytes(message.initMsg !== undefined ? message.initMsg : new Uint8Array()));\n        if (message.initCoins) {\n            obj.initCoins = message.initCoins.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.initCoins = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseMsgInstantiateContract);\n        message.initCoins = [];\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = object.sender;\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.admin !== undefined && object.admin !== null) {\n            message.admin = object.admin;\n        }\n        else {\n            message.admin = \"\";\n        }\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = object.codeId;\n        }\n        else {\n            message.codeId = long_1.default.UZERO;\n        }\n        if (object.initMsg !== undefined && object.initMsg !== null) {\n            message.initMsg = object.initMsg;\n        }\n        else {\n            message.initMsg = new Uint8Array();\n        }\n        if (object.initCoins !== undefined && object.initCoins !== null) {\n            for (const e of object.initCoins) {\n                message.initCoins.push(coin_1.Coin.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseMsgInstantiateContractResponse = { contractAddress: \"\" };\nexports.MsgInstantiateContractResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.contractAddress !== \"\") {\n            writer.uint32(10).string(message.contractAddress);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgInstantiateContractResponse);\n        message.data = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.contractAddress = reader.string();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgInstantiateContractResponse);\n        message.data = new Uint8Array();\n        if (object.contractAddress !== undefined && object.contractAddress !== null) {\n            message.contractAddress = String(object.contractAddress);\n        }\n        else {\n            message.contractAddress = \"\";\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseMsgInstantiateContractResponse);\n        if (object.contractAddress !== undefined && object.contractAddress !== null) {\n            message.contractAddress = object.contractAddress;\n        }\n        else {\n            message.contractAddress = \"\";\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseMsgExecuteContract = { sender: \"\", contract: \"\" };\nexports.MsgExecuteContract = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(18).string(message.contract);\n        }\n        if (message.executeMsg.length !== 0) {\n            writer.uint32(26).bytes(message.executeMsg);\n        }\n        for (const v of message.coins) {\n            coin_1.Coin.encode(v, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgExecuteContract);\n        message.coins = [];\n        message.executeMsg = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.contract = reader.string();\n                    break;\n                case 3:\n                    message.executeMsg = reader.bytes();\n                    break;\n                case 5:\n                    message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgExecuteContract);\n        message.coins = [];\n        message.executeMsg = new Uint8Array();\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = String(object.sender);\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.contract !== undefined && object.contract !== null) {\n            message.contract = String(object.contract);\n        }\n        else {\n            message.contract = \"\";\n        }\n        if (object.executeMsg !== undefined && object.executeMsg !== null) {\n            message.executeMsg = bytesFromBase64(object.executeMsg);\n        }\n        if (object.coins !== undefined && object.coins !== null) {\n            for (const e of object.coins) {\n                message.coins.push(coin_1.Coin.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.contract !== undefined && (obj.contract = message.contract);\n        message.executeMsg !== undefined &&\n            (obj.executeMsg = base64FromBytes(message.executeMsg !== undefined ? message.executeMsg : new Uint8Array()));\n        if (message.coins) {\n            obj.coins = message.coins.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.coins = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseMsgExecuteContract);\n        message.coins = [];\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = object.sender;\n        }\n        else {\n            message.sender = \"\";\n        }\n        if (object.contract !== undefined && object.contract !== null) {\n            message.contract = object.contract;\n        }\n        else {\n            message.contract = \"\";\n        }\n        if (object.executeMsg !== undefined && object.executeMsg !== null) {\n            message.executeMsg = object.executeMsg;\n        }\n        else {\n            message.executeMsg = new Uint8Array();\n        }\n        if (object.coins !== undefined && object.coins !== null) {\n            for (const e of object.coins) {\n                message.coins.push(coin_1.Coin.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseMsgExecuteContractResponse = {};\nexports.MsgExecuteContractResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgExecuteContractResponse);\n        message.data = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgExecuteContractResponse);\n        message.data = new Uint8Array();\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseMsgExecuteContractResponse);\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseMsgMigrateContract = { admin: \"\", contract: \"\", newCodeId: long_1.default.UZERO };\nexports.MsgMigrateContract = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.admin !== \"\") {\n            writer.uint32(10).string(message.admin);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(18).string(message.contract);\n        }\n        if (!message.newCodeId.isZero()) {\n            writer.uint32(24).uint64(message.newCodeId);\n        }\n        if (message.migrateMsg.length !== 0) {\n            writer.uint32(34).bytes(message.migrateMsg);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgMigrateContract);\n        message.migrateMsg = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.admin = reader.string();\n                    break;\n                case 2:\n                    message.contract = reader.string();\n                    break;\n                case 3:\n                    message.newCodeId = reader.uint64();\n                    break;\n                case 4:\n                    message.migrateMsg = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgMigrateContract);\n        message.migrateMsg = new Uint8Array();\n        if (object.admin !== undefined && object.admin !== null) {\n            message.admin = String(object.admin);\n        }\n        else {\n            message.admin = \"\";\n        }\n        if (object.contract !== undefined && object.contract !== null) {\n            message.contract = String(object.contract);\n        }\n        else {\n            message.contract = \"\";\n        }\n        if (object.newCodeId !== undefined && object.newCodeId !== null) {\n            message.newCodeId = long_1.default.fromString(object.newCodeId);\n        }\n        else {\n            message.newCodeId = long_1.default.UZERO;\n        }\n        if (object.migrateMsg !== undefined && object.migrateMsg !== null) {\n            message.migrateMsg = bytesFromBase64(object.migrateMsg);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.admin !== undefined && (obj.admin = message.admin);\n        message.contract !== undefined && (obj.contract = message.contract);\n        message.newCodeId !== undefined && (obj.newCodeId = (message.newCodeId || long_1.default.UZERO).toString());\n        message.migrateMsg !== undefined &&\n            (obj.migrateMsg = base64FromBytes(message.migrateMsg !== undefined ? message.migrateMsg : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseMsgMigrateContract);\n        if (object.admin !== undefined && object.admin !== null) {\n            message.admin = object.admin;\n        }\n        else {\n            message.admin = \"\";\n        }\n        if (object.contract !== undefined && object.contract !== null) {\n            message.contract = object.contract;\n        }\n        else {\n            message.contract = \"\";\n        }\n        if (object.newCodeId !== undefined && object.newCodeId !== null) {\n            message.newCodeId = object.newCodeId;\n        }\n        else {\n            message.newCodeId = long_1.default.UZERO;\n        }\n        if (object.migrateMsg !== undefined && object.migrateMsg !== null) {\n            message.migrateMsg = object.migrateMsg;\n        }\n        else {\n            message.migrateMsg = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseMsgMigrateContractResponse = {};\nexports.MsgMigrateContractResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgMigrateContractResponse);\n        message.data = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgMigrateContractResponse);\n        message.data = new Uint8Array();\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseMsgMigrateContractResponse);\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseMsgUpdateContractAdmin = { admin: \"\", newAdmin: \"\", contract: \"\" };\nexports.MsgUpdateContractAdmin = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.admin !== \"\") {\n            writer.uint32(10).string(message.admin);\n        }\n        if (message.newAdmin !== \"\") {\n            writer.uint32(18).string(message.newAdmin);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(26).string(message.contract);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgUpdateContractAdmin);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.admin = reader.string();\n                    break;\n                case 2:\n                    message.newAdmin = reader.string();\n                    break;\n                case 3:\n                    message.contract = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgUpdateContractAdmin);\n        if (object.admin !== undefined && object.admin !== null) {\n            message.admin = String(object.admin);\n        }\n        else {\n            message.admin = \"\";\n        }\n        if (object.newAdmin !== undefined && object.newAdmin !== null) {\n            message.newAdmin = String(object.newAdmin);\n        }\n        else {\n            message.newAdmin = \"\";\n        }\n        if (object.contract !== undefined && object.contract !== null) {\n            message.contract = String(object.contract);\n        }\n        else {\n            message.contract = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.admin !== undefined && (obj.admin = message.admin);\n        message.newAdmin !== undefined && (obj.newAdmin = message.newAdmin);\n        message.contract !== undefined && (obj.contract = message.contract);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseMsgUpdateContractAdmin);\n        if (object.admin !== undefined && object.admin !== null) {\n            message.admin = object.admin;\n        }\n        else {\n            message.admin = \"\";\n        }\n        if (object.newAdmin !== undefined && object.newAdmin !== null) {\n            message.newAdmin = object.newAdmin;\n        }\n        else {\n            message.newAdmin = \"\";\n        }\n        if (object.contract !== undefined && object.contract !== null) {\n            message.contract = object.contract;\n        }\n        else {\n            message.contract = \"\";\n        }\n        return message;\n    },\n};\nconst baseMsgUpdateContractAdminResponse = {};\nexports.MsgUpdateContractAdminResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgUpdateContractAdminResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseMsgUpdateContractAdminResponse);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseMsgUpdateContractAdminResponse);\n        return message;\n    },\n};\nconst baseMsgClearContractAdmin = { admin: \"\", contract: \"\" };\nexports.MsgClearContractAdmin = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.admin !== \"\") {\n            writer.uint32(10).string(message.admin);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(18).string(message.contract);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgClearContractAdmin);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.admin = reader.string();\n                    break;\n                case 2:\n                    message.contract = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgClearContractAdmin);\n        if (object.admin !== undefined && object.admin !== null) {\n            message.admin = String(object.admin);\n        }\n        else {\n            message.admin = \"\";\n        }\n        if (object.contract !== undefined && object.contract !== null) {\n            message.contract = String(object.contract);\n        }\n        else {\n            message.contract = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.admin !== undefined && (obj.admin = message.admin);\n        message.contract !== undefined && (obj.contract = message.contract);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseMsgClearContractAdmin);\n        if (object.admin !== undefined && object.admin !== null) {\n            message.admin = object.admin;\n        }\n        else {\n            message.admin = \"\";\n        }\n        if (object.contract !== undefined && object.contract !== null) {\n            message.contract = object.contract;\n        }\n        else {\n            message.contract = \"\";\n        }\n        return message;\n    },\n};\nconst baseMsgClearContractAdminResponse = {};\nexports.MsgClearContractAdminResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgClearContractAdminResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseMsgClearContractAdminResponse);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseMsgClearContractAdminResponse);\n        return message;\n    },\n};\nclass MsgClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n        this.StoreCode = this.StoreCode.bind(this);\n        this.MigrateCode = this.MigrateCode.bind(this);\n        this.InstantiateContract = this.InstantiateContract.bind(this);\n        this.ExecuteContract = this.ExecuteContract.bind(this);\n        this.MigrateContract = this.MigrateContract.bind(this);\n        this.UpdateContractAdmin = this.UpdateContractAdmin.bind(this);\n        this.ClearContractAdmin = this.ClearContractAdmin.bind(this);\n    }\n    StoreCode(request) {\n        const data = exports.MsgStoreCode.encode(request).finish();\n        const promise = this.rpc.request(\"terra.wasm.v1beta1.Msg\", \"StoreCode\", data);\n        return promise.then((data) => exports.MsgStoreCodeResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    MigrateCode(request) {\n        const data = exports.MsgMigrateCode.encode(request).finish();\n        const promise = this.rpc.request(\"terra.wasm.v1beta1.Msg\", \"MigrateCode\", data);\n        return promise.then((data) => exports.MsgMigrateCodeResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    InstantiateContract(request) {\n        const data = exports.MsgInstantiateContract.encode(request).finish();\n        const promise = this.rpc.request(\"terra.wasm.v1beta1.Msg\", \"InstantiateContract\", data);\n        return promise.then((data) => exports.MsgInstantiateContractResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ExecuteContract(request) {\n        const data = exports.MsgExecuteContract.encode(request).finish();\n        const promise = this.rpc.request(\"terra.wasm.v1beta1.Msg\", \"ExecuteContract\", data);\n        return promise.then((data) => exports.MsgExecuteContractResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    MigrateContract(request) {\n        const data = exports.MsgMigrateContract.encode(request).finish();\n        const promise = this.rpc.request(\"terra.wasm.v1beta1.Msg\", \"MigrateContract\", data);\n        return promise.then((data) => exports.MsgMigrateContractResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    UpdateContractAdmin(request) {\n        const data = exports.MsgUpdateContractAdmin.encode(request).finish();\n        const promise = this.rpc.request(\"terra.wasm.v1beta1.Msg\", \"UpdateContractAdmin\", data);\n        return promise.then((data) => exports.MsgUpdateContractAdminResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ClearContractAdmin(request) {\n        const data = exports.MsgClearContractAdmin.encode(request).finish();\n        const promise = this.rpc.request(\"terra.wasm.v1beta1.Msg\", \"ClearContractAdmin\", data);\n        return promise.then((data) => exports.MsgClearContractAdminResponse.decode(new minimal_1.default.Reader(data)));\n    }\n}\nexports.MsgClientImpl = MsgClientImpl;\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\n//# sourceMappingURL=tx.js.map"]},"metadata":{},"sourceType":"script"}