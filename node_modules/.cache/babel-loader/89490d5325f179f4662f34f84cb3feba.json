{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SearchTxsResult = exports.TxMsgData = exports.MsgData = exports.SimulationResponse = exports.Result = exports.GasInfo = exports.Attribute = exports.StringEvent = exports.ABCIMessageLog = exports.TxResponse = exports.protobufPackage = void 0;\n/* eslint-disable */\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\n\nconst any_1 = require(\"../../../../google/protobuf/any\");\n\nconst types_1 = require(\"../../../../tendermint/abci/types\");\n\nexports.protobufPackage = \"cosmos.base.abci.v1beta1\";\nconst baseTxResponse = {\n  height: long_1.default.ZERO,\n  txhash: \"\",\n  codespace: \"\",\n  code: 0,\n  data: \"\",\n  rawLog: \"\",\n  info: \"\",\n  gasWanted: long_1.default.ZERO,\n  gasUsed: long_1.default.ZERO,\n  timestamp: \"\"\n};\nexports.TxResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (!message.height.isZero()) {\n      writer.uint32(8).int64(message.height);\n    }\n\n    if (message.txhash !== \"\") {\n      writer.uint32(18).string(message.txhash);\n    }\n\n    if (message.codespace !== \"\") {\n      writer.uint32(26).string(message.codespace);\n    }\n\n    if (message.code !== 0) {\n      writer.uint32(32).uint32(message.code);\n    }\n\n    if (message.data !== \"\") {\n      writer.uint32(42).string(message.data);\n    }\n\n    if (message.rawLog !== \"\") {\n      writer.uint32(50).string(message.rawLog);\n    }\n\n    for (const v of message.logs) {\n      exports.ABCIMessageLog.encode(v, writer.uint32(58).fork()).ldelim();\n    }\n\n    if (message.info !== \"\") {\n      writer.uint32(66).string(message.info);\n    }\n\n    if (!message.gasWanted.isZero()) {\n      writer.uint32(72).int64(message.gasWanted);\n    }\n\n    if (!message.gasUsed.isZero()) {\n      writer.uint32(80).int64(message.gasUsed);\n    }\n\n    if (message.tx !== undefined) {\n      any_1.Any.encode(message.tx, writer.uint32(90).fork()).ldelim();\n    }\n\n    if (message.timestamp !== \"\") {\n      writer.uint32(98).string(message.timestamp);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseTxResponse);\n    message.logs = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.height = reader.int64();\n          break;\n\n        case 2:\n          message.txhash = reader.string();\n          break;\n\n        case 3:\n          message.codespace = reader.string();\n          break;\n\n        case 4:\n          message.code = reader.uint32();\n          break;\n\n        case 5:\n          message.data = reader.string();\n          break;\n\n        case 6:\n          message.rawLog = reader.string();\n          break;\n\n        case 7:\n          message.logs.push(exports.ABCIMessageLog.decode(reader, reader.uint32()));\n          break;\n\n        case 8:\n          message.info = reader.string();\n          break;\n\n        case 9:\n          message.gasWanted = reader.int64();\n          break;\n\n        case 10:\n          message.gasUsed = reader.int64();\n          break;\n\n        case 11:\n          message.tx = any_1.Any.decode(reader, reader.uint32());\n          break;\n\n        case 12:\n          message.timestamp = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseTxResponse);\n    message.logs = [];\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = long_1.default.fromString(object.height);\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n\n    if (object.txhash !== undefined && object.txhash !== null) {\n      message.txhash = String(object.txhash);\n    } else {\n      message.txhash = \"\";\n    }\n\n    if (object.codespace !== undefined && object.codespace !== null) {\n      message.codespace = String(object.codespace);\n    } else {\n      message.codespace = \"\";\n    }\n\n    if (object.code !== undefined && object.code !== null) {\n      message.code = Number(object.code);\n    } else {\n      message.code = 0;\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = String(object.data);\n    } else {\n      message.data = \"\";\n    }\n\n    if (object.rawLog !== undefined && object.rawLog !== null) {\n      message.rawLog = String(object.rawLog);\n    } else {\n      message.rawLog = \"\";\n    }\n\n    if (object.logs !== undefined && object.logs !== null) {\n      for (const e of object.logs) {\n        message.logs.push(exports.ABCIMessageLog.fromJSON(e));\n      }\n    }\n\n    if (object.info !== undefined && object.info !== null) {\n      message.info = String(object.info);\n    } else {\n      message.info = \"\";\n    }\n\n    if (object.gasWanted !== undefined && object.gasWanted !== null) {\n      message.gasWanted = long_1.default.fromString(object.gasWanted);\n    } else {\n      message.gasWanted = long_1.default.ZERO;\n    }\n\n    if (object.gasUsed !== undefined && object.gasUsed !== null) {\n      message.gasUsed = long_1.default.fromString(object.gasUsed);\n    } else {\n      message.gasUsed = long_1.default.ZERO;\n    }\n\n    if (object.tx !== undefined && object.tx !== null) {\n      message.tx = any_1.Any.fromJSON(object.tx);\n    } else {\n      message.tx = undefined;\n    }\n\n    if (object.timestamp !== undefined && object.timestamp !== null) {\n      message.timestamp = String(object.timestamp);\n    } else {\n      message.timestamp = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n    message.txhash !== undefined && (obj.txhash = message.txhash);\n    message.codespace !== undefined && (obj.codespace = message.codespace);\n    message.code !== undefined && (obj.code = message.code);\n    message.data !== undefined && (obj.data = message.data);\n    message.rawLog !== undefined && (obj.rawLog = message.rawLog);\n\n    if (message.logs) {\n      obj.logs = message.logs.map(e => e ? exports.ABCIMessageLog.toJSON(e) : undefined);\n    } else {\n      obj.logs = [];\n    }\n\n    message.info !== undefined && (obj.info = message.info);\n    message.gasWanted !== undefined && (obj.gasWanted = (message.gasWanted || long_1.default.ZERO).toString());\n    message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || long_1.default.ZERO).toString());\n    message.tx !== undefined && (obj.tx = message.tx ? any_1.Any.toJSON(message.tx) : undefined);\n    message.timestamp !== undefined && (obj.timestamp = message.timestamp);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseTxResponse);\n    message.logs = [];\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n\n    if (object.txhash !== undefined && object.txhash !== null) {\n      message.txhash = object.txhash;\n    } else {\n      message.txhash = \"\";\n    }\n\n    if (object.codespace !== undefined && object.codespace !== null) {\n      message.codespace = object.codespace;\n    } else {\n      message.codespace = \"\";\n    }\n\n    if (object.code !== undefined && object.code !== null) {\n      message.code = object.code;\n    } else {\n      message.code = 0;\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = \"\";\n    }\n\n    if (object.rawLog !== undefined && object.rawLog !== null) {\n      message.rawLog = object.rawLog;\n    } else {\n      message.rawLog = \"\";\n    }\n\n    if (object.logs !== undefined && object.logs !== null) {\n      for (const e of object.logs) {\n        message.logs.push(exports.ABCIMessageLog.fromPartial(e));\n      }\n    }\n\n    if (object.info !== undefined && object.info !== null) {\n      message.info = object.info;\n    } else {\n      message.info = \"\";\n    }\n\n    if (object.gasWanted !== undefined && object.gasWanted !== null) {\n      message.gasWanted = object.gasWanted;\n    } else {\n      message.gasWanted = long_1.default.ZERO;\n    }\n\n    if (object.gasUsed !== undefined && object.gasUsed !== null) {\n      message.gasUsed = object.gasUsed;\n    } else {\n      message.gasUsed = long_1.default.ZERO;\n    }\n\n    if (object.tx !== undefined && object.tx !== null) {\n      message.tx = any_1.Any.fromPartial(object.tx);\n    } else {\n      message.tx = undefined;\n    }\n\n    if (object.timestamp !== undefined && object.timestamp !== null) {\n      message.timestamp = object.timestamp;\n    } else {\n      message.timestamp = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseABCIMessageLog = {\n  msgIndex: 0,\n  log: \"\"\n};\nexports.ABCIMessageLog = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.msgIndex !== 0) {\n      writer.uint32(8).uint32(message.msgIndex);\n    }\n\n    if (message.log !== \"\") {\n      writer.uint32(18).string(message.log);\n    }\n\n    for (const v of message.events) {\n      exports.StringEvent.encode(v, writer.uint32(26).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseABCIMessageLog);\n    message.events = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.msgIndex = reader.uint32();\n          break;\n\n        case 2:\n          message.log = reader.string();\n          break;\n\n        case 3:\n          message.events.push(exports.StringEvent.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseABCIMessageLog);\n    message.events = [];\n\n    if (object.msgIndex !== undefined && object.msgIndex !== null) {\n      message.msgIndex = Number(object.msgIndex);\n    } else {\n      message.msgIndex = 0;\n    }\n\n    if (object.log !== undefined && object.log !== null) {\n      message.log = String(object.log);\n    } else {\n      message.log = \"\";\n    }\n\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(exports.StringEvent.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.msgIndex !== undefined && (obj.msgIndex = message.msgIndex);\n    message.log !== undefined && (obj.log = message.log);\n\n    if (message.events) {\n      obj.events = message.events.map(e => e ? exports.StringEvent.toJSON(e) : undefined);\n    } else {\n      obj.events = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseABCIMessageLog);\n    message.events = [];\n\n    if (object.msgIndex !== undefined && object.msgIndex !== null) {\n      message.msgIndex = object.msgIndex;\n    } else {\n      message.msgIndex = 0;\n    }\n\n    if (object.log !== undefined && object.log !== null) {\n      message.log = object.log;\n    } else {\n      message.log = \"\";\n    }\n\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(exports.StringEvent.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseStringEvent = {\n  type: \"\"\n};\nexports.StringEvent = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.type !== \"\") {\n      writer.uint32(10).string(message.type);\n    }\n\n    for (const v of message.attributes) {\n      exports.Attribute.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseStringEvent);\n    message.attributes = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.string();\n          break;\n\n        case 2:\n          message.attributes.push(exports.Attribute.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseStringEvent);\n    message.attributes = [];\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = String(object.type);\n    } else {\n      message.type = \"\";\n    }\n\n    if (object.attributes !== undefined && object.attributes !== null) {\n      for (const e of object.attributes) {\n        message.attributes.push(exports.Attribute.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.type !== undefined && (obj.type = message.type);\n\n    if (message.attributes) {\n      obj.attributes = message.attributes.map(e => e ? exports.Attribute.toJSON(e) : undefined);\n    } else {\n      obj.attributes = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseStringEvent);\n    message.attributes = [];\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = object.type;\n    } else {\n      message.type = \"\";\n    }\n\n    if (object.attributes !== undefined && object.attributes !== null) {\n      for (const e of object.attributes) {\n        message.attributes.push(exports.Attribute.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseAttribute = {\n  key: \"\",\n  value: \"\"\n};\nexports.Attribute = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n\n    if (message.value !== \"\") {\n      writer.uint32(18).string(message.value);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseAttribute);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.string();\n          break;\n\n        case 2:\n          message.value = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseAttribute);\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = String(object.key);\n    } else {\n      message.key = \"\";\n    }\n\n    if (object.value !== undefined && object.value !== null) {\n      message.value = String(object.value);\n    } else {\n      message.value = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = message.key);\n    message.value !== undefined && (obj.value = message.value);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseAttribute);\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = object.key;\n    } else {\n      message.key = \"\";\n    }\n\n    if (object.value !== undefined && object.value !== null) {\n      message.value = object.value;\n    } else {\n      message.value = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseGasInfo = {\n  gasWanted: long_1.default.UZERO,\n  gasUsed: long_1.default.UZERO\n};\nexports.GasInfo = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (!message.gasWanted.isZero()) {\n      writer.uint32(8).uint64(message.gasWanted);\n    }\n\n    if (!message.gasUsed.isZero()) {\n      writer.uint32(16).uint64(message.gasUsed);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseGasInfo);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.gasWanted = reader.uint64();\n          break;\n\n        case 2:\n          message.gasUsed = reader.uint64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseGasInfo);\n\n    if (object.gasWanted !== undefined && object.gasWanted !== null) {\n      message.gasWanted = long_1.default.fromString(object.gasWanted);\n    } else {\n      message.gasWanted = long_1.default.UZERO;\n    }\n\n    if (object.gasUsed !== undefined && object.gasUsed !== null) {\n      message.gasUsed = long_1.default.fromString(object.gasUsed);\n    } else {\n      message.gasUsed = long_1.default.UZERO;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.gasWanted !== undefined && (obj.gasWanted = (message.gasWanted || long_1.default.UZERO).toString());\n    message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || long_1.default.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseGasInfo);\n\n    if (object.gasWanted !== undefined && object.gasWanted !== null) {\n      message.gasWanted = object.gasWanted;\n    } else {\n      message.gasWanted = long_1.default.UZERO;\n    }\n\n    if (object.gasUsed !== undefined && object.gasUsed !== null) {\n      message.gasUsed = object.gasUsed;\n    } else {\n      message.gasUsed = long_1.default.UZERO;\n    }\n\n    return message;\n  }\n\n};\nconst baseResult = {\n  log: \"\"\n};\nexports.Result = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.data.length !== 0) {\n      writer.uint32(10).bytes(message.data);\n    }\n\n    if (message.log !== \"\") {\n      writer.uint32(18).string(message.log);\n    }\n\n    for (const v of message.events) {\n      types_1.Event.encode(v, writer.uint32(26).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseResult);\n    message.events = [];\n    message.data = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.data = reader.bytes();\n          break;\n\n        case 2:\n          message.log = reader.string();\n          break;\n\n        case 3:\n          message.events.push(types_1.Event.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseResult);\n    message.events = [];\n    message.data = new Uint8Array();\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n\n    if (object.log !== undefined && object.log !== null) {\n      message.log = String(object.log);\n    } else {\n      message.log = \"\";\n    }\n\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(types_1.Event.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    message.log !== undefined && (obj.log = message.log);\n\n    if (message.events) {\n      obj.events = message.events.map(e => e ? types_1.Event.toJSON(e) : undefined);\n    } else {\n      obj.events = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseResult);\n    message.events = [];\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n\n    if (object.log !== undefined && object.log !== null) {\n      message.log = object.log;\n    } else {\n      message.log = \"\";\n    }\n\n    if (object.events !== undefined && object.events !== null) {\n      for (const e of object.events) {\n        message.events.push(types_1.Event.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseSimulationResponse = {};\nexports.SimulationResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.gasInfo !== undefined) {\n      exports.GasInfo.encode(message.gasInfo, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.result !== undefined) {\n      exports.Result.encode(message.result, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseSimulationResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.gasInfo = exports.GasInfo.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.result = exports.Result.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseSimulationResponse);\n\n    if (object.gasInfo !== undefined && object.gasInfo !== null) {\n      message.gasInfo = exports.GasInfo.fromJSON(object.gasInfo);\n    } else {\n      message.gasInfo = undefined;\n    }\n\n    if (object.result !== undefined && object.result !== null) {\n      message.result = exports.Result.fromJSON(object.result);\n    } else {\n      message.result = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.gasInfo !== undefined && (obj.gasInfo = message.gasInfo ? exports.GasInfo.toJSON(message.gasInfo) : undefined);\n    message.result !== undefined && (obj.result = message.result ? exports.Result.toJSON(message.result) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseSimulationResponse);\n\n    if (object.gasInfo !== undefined && object.gasInfo !== null) {\n      message.gasInfo = exports.GasInfo.fromPartial(object.gasInfo);\n    } else {\n      message.gasInfo = undefined;\n    }\n\n    if (object.result !== undefined && object.result !== null) {\n      message.result = exports.Result.fromPartial(object.result);\n    } else {\n      message.result = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseMsgData = {\n  msgType: \"\"\n};\nexports.MsgData = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.msgType !== \"\") {\n      writer.uint32(10).string(message.msgType);\n    }\n\n    if (message.data.length !== 0) {\n      writer.uint32(18).bytes(message.data);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMsgData);\n    message.data = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.msgType = reader.string();\n          break;\n\n        case 2:\n          message.data = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseMsgData);\n    message.data = new Uint8Array();\n\n    if (object.msgType !== undefined && object.msgType !== null) {\n      message.msgType = String(object.msgType);\n    } else {\n      message.msgType = \"\";\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.msgType !== undefined && (obj.msgType = message.msgType);\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseMsgData);\n\n    if (object.msgType !== undefined && object.msgType !== null) {\n      message.msgType = object.msgType;\n    } else {\n      message.msgType = \"\";\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = object.data;\n    } else {\n      message.data = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseTxMsgData = {};\nexports.TxMsgData = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    for (const v of message.data) {\n      exports.MsgData.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseTxMsgData);\n    message.data = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.data.push(exports.MsgData.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseTxMsgData);\n    message.data = [];\n\n    if (object.data !== undefined && object.data !== null) {\n      for (const e of object.data) {\n        message.data.push(exports.MsgData.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.data) {\n      obj.data = message.data.map(e => e ? exports.MsgData.toJSON(e) : undefined);\n    } else {\n      obj.data = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseTxMsgData);\n    message.data = [];\n\n    if (object.data !== undefined && object.data !== null) {\n      for (const e of object.data) {\n        message.data.push(exports.MsgData.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseSearchTxsResult = {\n  totalCount: long_1.default.UZERO,\n  count: long_1.default.UZERO,\n  pageNumber: long_1.default.UZERO,\n  pageTotal: long_1.default.UZERO,\n  limit: long_1.default.UZERO\n};\nexports.SearchTxsResult = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (!message.totalCount.isZero()) {\n      writer.uint32(8).uint64(message.totalCount);\n    }\n\n    if (!message.count.isZero()) {\n      writer.uint32(16).uint64(message.count);\n    }\n\n    if (!message.pageNumber.isZero()) {\n      writer.uint32(24).uint64(message.pageNumber);\n    }\n\n    if (!message.pageTotal.isZero()) {\n      writer.uint32(32).uint64(message.pageTotal);\n    }\n\n    if (!message.limit.isZero()) {\n      writer.uint32(40).uint64(message.limit);\n    }\n\n    for (const v of message.txs) {\n      exports.TxResponse.encode(v, writer.uint32(50).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseSearchTxsResult);\n    message.txs = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.totalCount = reader.uint64();\n          break;\n\n        case 2:\n          message.count = reader.uint64();\n          break;\n\n        case 3:\n          message.pageNumber = reader.uint64();\n          break;\n\n        case 4:\n          message.pageTotal = reader.uint64();\n          break;\n\n        case 5:\n          message.limit = reader.uint64();\n          break;\n\n        case 6:\n          message.txs.push(exports.TxResponse.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseSearchTxsResult);\n    message.txs = [];\n\n    if (object.totalCount !== undefined && object.totalCount !== null) {\n      message.totalCount = long_1.default.fromString(object.totalCount);\n    } else {\n      message.totalCount = long_1.default.UZERO;\n    }\n\n    if (object.count !== undefined && object.count !== null) {\n      message.count = long_1.default.fromString(object.count);\n    } else {\n      message.count = long_1.default.UZERO;\n    }\n\n    if (object.pageNumber !== undefined && object.pageNumber !== null) {\n      message.pageNumber = long_1.default.fromString(object.pageNumber);\n    } else {\n      message.pageNumber = long_1.default.UZERO;\n    }\n\n    if (object.pageTotal !== undefined && object.pageTotal !== null) {\n      message.pageTotal = long_1.default.fromString(object.pageTotal);\n    } else {\n      message.pageTotal = long_1.default.UZERO;\n    }\n\n    if (object.limit !== undefined && object.limit !== null) {\n      message.limit = long_1.default.fromString(object.limit);\n    } else {\n      message.limit = long_1.default.UZERO;\n    }\n\n    if (object.txs !== undefined && object.txs !== null) {\n      for (const e of object.txs) {\n        message.txs.push(exports.TxResponse.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.totalCount !== undefined && (obj.totalCount = (message.totalCount || long_1.default.UZERO).toString());\n    message.count !== undefined && (obj.count = (message.count || long_1.default.UZERO).toString());\n    message.pageNumber !== undefined && (obj.pageNumber = (message.pageNumber || long_1.default.UZERO).toString());\n    message.pageTotal !== undefined && (obj.pageTotal = (message.pageTotal || long_1.default.UZERO).toString());\n    message.limit !== undefined && (obj.limit = (message.limit || long_1.default.UZERO).toString());\n\n    if (message.txs) {\n      obj.txs = message.txs.map(e => e ? exports.TxResponse.toJSON(e) : undefined);\n    } else {\n      obj.txs = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseSearchTxsResult);\n    message.txs = [];\n\n    if (object.totalCount !== undefined && object.totalCount !== null) {\n      message.totalCount = object.totalCount;\n    } else {\n      message.totalCount = long_1.default.UZERO;\n    }\n\n    if (object.count !== undefined && object.count !== null) {\n      message.count = object.count;\n    } else {\n      message.count = long_1.default.UZERO;\n    }\n\n    if (object.pageNumber !== undefined && object.pageNumber !== null) {\n      message.pageNumber = object.pageNumber;\n    } else {\n      message.pageNumber = long_1.default.UZERO;\n    }\n\n    if (object.pageTotal !== undefined && object.pageTotal !== null) {\n      message.pageTotal = object.pageTotal;\n    } else {\n      message.pageTotal = long_1.default.UZERO;\n    }\n\n    if (object.limit !== undefined && object.limit !== null) {\n      message.limit = object.limit;\n    } else {\n      message.limit = long_1.default.UZERO;\n    }\n\n    if (object.txs !== undefined && object.txs !== null) {\n      for (const e of object.txs) {\n        message.txs.push(exports.TxResponse.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\n\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\n\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n\n  return arr;\n}\n\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\n\nfunction base64FromBytes(arr) {\n  const bin = [];\n\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n\n  return btoa(bin.join(\"\"));\n}\n\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":{"version":3,"sources":["../../../../../src/cosmos/base/abci/v1beta1/abci.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SearchTxsResult = exports.TxMsgData = exports.MsgData = exports.SimulationResponse = exports.Result = exports.GasInfo = exports.Attribute = exports.StringEvent = exports.ABCIMessageLog = exports.TxResponse = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst any_1 = require(\"../../../../google/protobuf/any\");\nconst types_1 = require(\"../../../../tendermint/abci/types\");\nexports.protobufPackage = \"cosmos.base.abci.v1beta1\";\nconst baseTxResponse = {\n    height: long_1.default.ZERO,\n    txhash: \"\",\n    codespace: \"\",\n    code: 0,\n    data: \"\",\n    rawLog: \"\",\n    info: \"\",\n    gasWanted: long_1.default.ZERO,\n    gasUsed: long_1.default.ZERO,\n    timestamp: \"\",\n};\nexports.TxResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (!message.height.isZero()) {\n            writer.uint32(8).int64(message.height);\n        }\n        if (message.txhash !== \"\") {\n            writer.uint32(18).string(message.txhash);\n        }\n        if (message.codespace !== \"\") {\n            writer.uint32(26).string(message.codespace);\n        }\n        if (message.code !== 0) {\n            writer.uint32(32).uint32(message.code);\n        }\n        if (message.data !== \"\") {\n            writer.uint32(42).string(message.data);\n        }\n        if (message.rawLog !== \"\") {\n            writer.uint32(50).string(message.rawLog);\n        }\n        for (const v of message.logs) {\n            exports.ABCIMessageLog.encode(v, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.info !== \"\") {\n            writer.uint32(66).string(message.info);\n        }\n        if (!message.gasWanted.isZero()) {\n            writer.uint32(72).int64(message.gasWanted);\n        }\n        if (!message.gasUsed.isZero()) {\n            writer.uint32(80).int64(message.gasUsed);\n        }\n        if (message.tx !== undefined) {\n            any_1.Any.encode(message.tx, writer.uint32(90).fork()).ldelim();\n        }\n        if (message.timestamp !== \"\") {\n            writer.uint32(98).string(message.timestamp);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseTxResponse);\n        message.logs = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = reader.int64();\n                    break;\n                case 2:\n                    message.txhash = reader.string();\n                    break;\n                case 3:\n                    message.codespace = reader.string();\n                    break;\n                case 4:\n                    message.code = reader.uint32();\n                    break;\n                case 5:\n                    message.data = reader.string();\n                    break;\n                case 6:\n                    message.rawLog = reader.string();\n                    break;\n                case 7:\n                    message.logs.push(exports.ABCIMessageLog.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.info = reader.string();\n                    break;\n                case 9:\n                    message.gasWanted = reader.int64();\n                    break;\n                case 10:\n                    message.gasUsed = reader.int64();\n                    break;\n                case 11:\n                    message.tx = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.timestamp = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseTxResponse);\n        message.logs = [];\n        if (object.height !== undefined && object.height !== null) {\n            message.height = long_1.default.fromString(object.height);\n        }\n        else {\n            message.height = long_1.default.ZERO;\n        }\n        if (object.txhash !== undefined && object.txhash !== null) {\n            message.txhash = String(object.txhash);\n        }\n        else {\n            message.txhash = \"\";\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = String(object.codespace);\n        }\n        else {\n            message.codespace = \"\";\n        }\n        if (object.code !== undefined && object.code !== null) {\n            message.code = Number(object.code);\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = String(object.data);\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.rawLog !== undefined && object.rawLog !== null) {\n            message.rawLog = String(object.rawLog);\n        }\n        else {\n            message.rawLog = \"\";\n        }\n        if (object.logs !== undefined && object.logs !== null) {\n            for (const e of object.logs) {\n                message.logs.push(exports.ABCIMessageLog.fromJSON(e));\n            }\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = String(object.info);\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = long_1.default.fromString(object.gasWanted);\n        }\n        else {\n            message.gasWanted = long_1.default.ZERO;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = long_1.default.fromString(object.gasUsed);\n        }\n        else {\n            message.gasUsed = long_1.default.ZERO;\n        }\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = any_1.Any.fromJSON(object.tx);\n        }\n        else {\n            message.tx = undefined;\n        }\n        if (object.timestamp !== undefined && object.timestamp !== null) {\n            message.timestamp = String(object.timestamp);\n        }\n        else {\n            message.timestamp = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n        message.txhash !== undefined && (obj.txhash = message.txhash);\n        message.codespace !== undefined && (obj.codespace = message.codespace);\n        message.code !== undefined && (obj.code = message.code);\n        message.data !== undefined && (obj.data = message.data);\n        message.rawLog !== undefined && (obj.rawLog = message.rawLog);\n        if (message.logs) {\n            obj.logs = message.logs.map((e) => (e ? exports.ABCIMessageLog.toJSON(e) : undefined));\n        }\n        else {\n            obj.logs = [];\n        }\n        message.info !== undefined && (obj.info = message.info);\n        message.gasWanted !== undefined && (obj.gasWanted = (message.gasWanted || long_1.default.ZERO).toString());\n        message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || long_1.default.ZERO).toString());\n        message.tx !== undefined && (obj.tx = message.tx ? any_1.Any.toJSON(message.tx) : undefined);\n        message.timestamp !== undefined && (obj.timestamp = message.timestamp);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseTxResponse);\n        message.logs = [];\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = long_1.default.ZERO;\n        }\n        if (object.txhash !== undefined && object.txhash !== null) {\n            message.txhash = object.txhash;\n        }\n        else {\n            message.txhash = \"\";\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = object.codespace;\n        }\n        else {\n            message.codespace = \"\";\n        }\n        if (object.code !== undefined && object.code !== null) {\n            message.code = object.code;\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.rawLog !== undefined && object.rawLog !== null) {\n            message.rawLog = object.rawLog;\n        }\n        else {\n            message.rawLog = \"\";\n        }\n        if (object.logs !== undefined && object.logs !== null) {\n            for (const e of object.logs) {\n                message.logs.push(exports.ABCIMessageLog.fromPartial(e));\n            }\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = object.info;\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = object.gasWanted;\n        }\n        else {\n            message.gasWanted = long_1.default.ZERO;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = object.gasUsed;\n        }\n        else {\n            message.gasUsed = long_1.default.ZERO;\n        }\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = any_1.Any.fromPartial(object.tx);\n        }\n        else {\n            message.tx = undefined;\n        }\n        if (object.timestamp !== undefined && object.timestamp !== null) {\n            message.timestamp = object.timestamp;\n        }\n        else {\n            message.timestamp = \"\";\n        }\n        return message;\n    },\n};\nconst baseABCIMessageLog = { msgIndex: 0, log: \"\" };\nexports.ABCIMessageLog = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.msgIndex !== 0) {\n            writer.uint32(8).uint32(message.msgIndex);\n        }\n        if (message.log !== \"\") {\n            writer.uint32(18).string(message.log);\n        }\n        for (const v of message.events) {\n            exports.StringEvent.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseABCIMessageLog);\n        message.events = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.msgIndex = reader.uint32();\n                    break;\n                case 2:\n                    message.log = reader.string();\n                    break;\n                case 3:\n                    message.events.push(exports.StringEvent.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseABCIMessageLog);\n        message.events = [];\n        if (object.msgIndex !== undefined && object.msgIndex !== null) {\n            message.msgIndex = Number(object.msgIndex);\n        }\n        else {\n            message.msgIndex = 0;\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = String(object.log);\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(exports.StringEvent.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.msgIndex !== undefined && (obj.msgIndex = message.msgIndex);\n        message.log !== undefined && (obj.log = message.log);\n        if (message.events) {\n            obj.events = message.events.map((e) => (e ? exports.StringEvent.toJSON(e) : undefined));\n        }\n        else {\n            obj.events = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseABCIMessageLog);\n        message.events = [];\n        if (object.msgIndex !== undefined && object.msgIndex !== null) {\n            message.msgIndex = object.msgIndex;\n        }\n        else {\n            message.msgIndex = 0;\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = object.log;\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(exports.StringEvent.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseStringEvent = { type: \"\" };\nexports.StringEvent = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.type !== \"\") {\n            writer.uint32(10).string(message.type);\n        }\n        for (const v of message.attributes) {\n            exports.Attribute.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseStringEvent);\n        message.attributes = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.string();\n                    break;\n                case 2:\n                    message.attributes.push(exports.Attribute.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseStringEvent);\n        message.attributes = [];\n        if (object.type !== undefined && object.type !== null) {\n            message.type = String(object.type);\n        }\n        else {\n            message.type = \"\";\n        }\n        if (object.attributes !== undefined && object.attributes !== null) {\n            for (const e of object.attributes) {\n                message.attributes.push(exports.Attribute.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined && (obj.type = message.type);\n        if (message.attributes) {\n            obj.attributes = message.attributes.map((e) => (e ? exports.Attribute.toJSON(e) : undefined));\n        }\n        else {\n            obj.attributes = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseStringEvent);\n        message.attributes = [];\n        if (object.type !== undefined && object.type !== null) {\n            message.type = object.type;\n        }\n        else {\n            message.type = \"\";\n        }\n        if (object.attributes !== undefined && object.attributes !== null) {\n            for (const e of object.attributes) {\n                message.attributes.push(exports.Attribute.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseAttribute = { key: \"\", value: \"\" };\nexports.Attribute = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== \"\") {\n            writer.uint32(18).string(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseAttribute);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseAttribute);\n        if (object.key !== undefined && object.key !== null) {\n            message.key = String(object.key);\n        }\n        else {\n            message.key = \"\";\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = String(object.value);\n        }\n        else {\n            message.value = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined && (obj.value = message.value);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseAttribute);\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = \"\";\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = object.value;\n        }\n        else {\n            message.value = \"\";\n        }\n        return message;\n    },\n};\nconst baseGasInfo = { gasWanted: long_1.default.UZERO, gasUsed: long_1.default.UZERO };\nexports.GasInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (!message.gasWanted.isZero()) {\n            writer.uint32(8).uint64(message.gasWanted);\n        }\n        if (!message.gasUsed.isZero()) {\n            writer.uint32(16).uint64(message.gasUsed);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseGasInfo);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.gasWanted = reader.uint64();\n                    break;\n                case 2:\n                    message.gasUsed = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseGasInfo);\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = long_1.default.fromString(object.gasWanted);\n        }\n        else {\n            message.gasWanted = long_1.default.UZERO;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = long_1.default.fromString(object.gasUsed);\n        }\n        else {\n            message.gasUsed = long_1.default.UZERO;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.gasWanted !== undefined && (obj.gasWanted = (message.gasWanted || long_1.default.UZERO).toString());\n        message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || long_1.default.UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseGasInfo);\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = object.gasWanted;\n        }\n        else {\n            message.gasWanted = long_1.default.UZERO;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = object.gasUsed;\n        }\n        else {\n            message.gasUsed = long_1.default.UZERO;\n        }\n        return message;\n    },\n};\nconst baseResult = { log: \"\" };\nexports.Result = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        if (message.log !== \"\") {\n            writer.uint32(18).string(message.log);\n        }\n        for (const v of message.events) {\n            types_1.Event.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseResult);\n        message.events = [];\n        message.data = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                case 2:\n                    message.log = reader.string();\n                    break;\n                case 3:\n                    message.events.push(types_1.Event.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseResult);\n        message.events = [];\n        message.data = new Uint8Array();\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = String(object.log);\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(types_1.Event.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.log !== undefined && (obj.log = message.log);\n        if (message.events) {\n            obj.events = message.events.map((e) => (e ? types_1.Event.toJSON(e) : undefined));\n        }\n        else {\n            obj.events = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseResult);\n        message.events = [];\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = object.log;\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(types_1.Event.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseSimulationResponse = {};\nexports.SimulationResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.gasInfo !== undefined) {\n            exports.GasInfo.encode(message.gasInfo, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.result !== undefined) {\n            exports.Result.encode(message.result, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseSimulationResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.gasInfo = exports.GasInfo.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.result = exports.Result.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseSimulationResponse);\n        if (object.gasInfo !== undefined && object.gasInfo !== null) {\n            message.gasInfo = exports.GasInfo.fromJSON(object.gasInfo);\n        }\n        else {\n            message.gasInfo = undefined;\n        }\n        if (object.result !== undefined && object.result !== null) {\n            message.result = exports.Result.fromJSON(object.result);\n        }\n        else {\n            message.result = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.gasInfo !== undefined &&\n            (obj.gasInfo = message.gasInfo ? exports.GasInfo.toJSON(message.gasInfo) : undefined);\n        message.result !== undefined && (obj.result = message.result ? exports.Result.toJSON(message.result) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseSimulationResponse);\n        if (object.gasInfo !== undefined && object.gasInfo !== null) {\n            message.gasInfo = exports.GasInfo.fromPartial(object.gasInfo);\n        }\n        else {\n            message.gasInfo = undefined;\n        }\n        if (object.result !== undefined && object.result !== null) {\n            message.result = exports.Result.fromPartial(object.result);\n        }\n        else {\n            message.result = undefined;\n        }\n        return message;\n    },\n};\nconst baseMsgData = { msgType: \"\" };\nexports.MsgData = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.msgType !== \"\") {\n            writer.uint32(10).string(message.msgType);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgData);\n        message.data = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.msgType = reader.string();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgData);\n        message.data = new Uint8Array();\n        if (object.msgType !== undefined && object.msgType !== null) {\n            message.msgType = String(object.msgType);\n        }\n        else {\n            message.msgType = \"\";\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.msgType !== undefined && (obj.msgType = message.msgType);\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseMsgData);\n        if (object.msgType !== undefined && object.msgType !== null) {\n            message.msgType = object.msgType;\n        }\n        else {\n            message.msgType = \"\";\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseTxMsgData = {};\nexports.TxMsgData = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.data) {\n            exports.MsgData.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseTxMsgData);\n        message.data = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data.push(exports.MsgData.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseTxMsgData);\n        message.data = [];\n        if (object.data !== undefined && object.data !== null) {\n            for (const e of object.data) {\n                message.data.push(exports.MsgData.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.data) {\n            obj.data = message.data.map((e) => (e ? exports.MsgData.toJSON(e) : undefined));\n        }\n        else {\n            obj.data = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseTxMsgData);\n        message.data = [];\n        if (object.data !== undefined && object.data !== null) {\n            for (const e of object.data) {\n                message.data.push(exports.MsgData.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseSearchTxsResult = {\n    totalCount: long_1.default.UZERO,\n    count: long_1.default.UZERO,\n    pageNumber: long_1.default.UZERO,\n    pageTotal: long_1.default.UZERO,\n    limit: long_1.default.UZERO,\n};\nexports.SearchTxsResult = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (!message.totalCount.isZero()) {\n            writer.uint32(8).uint64(message.totalCount);\n        }\n        if (!message.count.isZero()) {\n            writer.uint32(16).uint64(message.count);\n        }\n        if (!message.pageNumber.isZero()) {\n            writer.uint32(24).uint64(message.pageNumber);\n        }\n        if (!message.pageTotal.isZero()) {\n            writer.uint32(32).uint64(message.pageTotal);\n        }\n        if (!message.limit.isZero()) {\n            writer.uint32(40).uint64(message.limit);\n        }\n        for (const v of message.txs) {\n            exports.TxResponse.encode(v, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseSearchTxsResult);\n        message.txs = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.totalCount = reader.uint64();\n                    break;\n                case 2:\n                    message.count = reader.uint64();\n                    break;\n                case 3:\n                    message.pageNumber = reader.uint64();\n                    break;\n                case 4:\n                    message.pageTotal = reader.uint64();\n                    break;\n                case 5:\n                    message.limit = reader.uint64();\n                    break;\n                case 6:\n                    message.txs.push(exports.TxResponse.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseSearchTxsResult);\n        message.txs = [];\n        if (object.totalCount !== undefined && object.totalCount !== null) {\n            message.totalCount = long_1.default.fromString(object.totalCount);\n        }\n        else {\n            message.totalCount = long_1.default.UZERO;\n        }\n        if (object.count !== undefined && object.count !== null) {\n            message.count = long_1.default.fromString(object.count);\n        }\n        else {\n            message.count = long_1.default.UZERO;\n        }\n        if (object.pageNumber !== undefined && object.pageNumber !== null) {\n            message.pageNumber = long_1.default.fromString(object.pageNumber);\n        }\n        else {\n            message.pageNumber = long_1.default.UZERO;\n        }\n        if (object.pageTotal !== undefined && object.pageTotal !== null) {\n            message.pageTotal = long_1.default.fromString(object.pageTotal);\n        }\n        else {\n            message.pageTotal = long_1.default.UZERO;\n        }\n        if (object.limit !== undefined && object.limit !== null) {\n            message.limit = long_1.default.fromString(object.limit);\n        }\n        else {\n            message.limit = long_1.default.UZERO;\n        }\n        if (object.txs !== undefined && object.txs !== null) {\n            for (const e of object.txs) {\n                message.txs.push(exports.TxResponse.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.totalCount !== undefined && (obj.totalCount = (message.totalCount || long_1.default.UZERO).toString());\n        message.count !== undefined && (obj.count = (message.count || long_1.default.UZERO).toString());\n        message.pageNumber !== undefined && (obj.pageNumber = (message.pageNumber || long_1.default.UZERO).toString());\n        message.pageTotal !== undefined && (obj.pageTotal = (message.pageTotal || long_1.default.UZERO).toString());\n        message.limit !== undefined && (obj.limit = (message.limit || long_1.default.UZERO).toString());\n        if (message.txs) {\n            obj.txs = message.txs.map((e) => (e ? exports.TxResponse.toJSON(e) : undefined));\n        }\n        else {\n            obj.txs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseSearchTxsResult);\n        message.txs = [];\n        if (object.totalCount !== undefined && object.totalCount !== null) {\n            message.totalCount = object.totalCount;\n        }\n        else {\n            message.totalCount = long_1.default.UZERO;\n        }\n        if (object.count !== undefined && object.count !== null) {\n            message.count = object.count;\n        }\n        else {\n            message.count = long_1.default.UZERO;\n        }\n        if (object.pageNumber !== undefined && object.pageNumber !== null) {\n            message.pageNumber = object.pageNumber;\n        }\n        else {\n            message.pageNumber = long_1.default.UZERO;\n        }\n        if (object.pageTotal !== undefined && object.pageTotal !== null) {\n            message.pageTotal = object.pageTotal;\n        }\n        else {\n            message.pageTotal = long_1.default.UZERO;\n        }\n        if (object.limit !== undefined && object.limit !== null) {\n            message.limit = object.limit;\n        }\n        else {\n            message.limit = long_1.default.UZERO;\n        }\n        if (object.txs !== undefined && object.txs !== null) {\n            for (const e of object.txs) {\n                message.txs.push(exports.TxResponse.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\n//# sourceMappingURL=abci.js.map"]},"metadata":{},"sourceType":"script"}