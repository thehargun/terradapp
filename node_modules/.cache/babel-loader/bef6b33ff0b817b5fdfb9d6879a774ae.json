{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DenomTrace = void 0;\n\nvar transfer_1 = require(\"@terra-money/terra.proto/ibc/applications/transfer/v1/transfer\");\n\nvar json_1 = require(\"../../util/json\");\n/**\n * DenomTrace is a monotonically increasing data type\n * that can be compared against another DenomTrace for the purposes of updating and\n * freezing clients\n *\n * Normally the RevisionDenomTrace is incremented at each height while keeping\n * RevisionNumber the same. However some consensus algorithms may choose to\n * reset the height in certain conditions e.g. hard forks, state-machine\n * breaking changes In these cases, the RevisionNumber is incremented so that\n * height continues to be monitonically increasing even as the RevisionDenomTrace\n * gets reset\n */\n\n\nvar DenomTrace =\n/** @class */\nfunction (_super) {\n  __extends(DenomTrace, _super);\n  /**\n   * @param path the revision that the client is currently on\n   * @param base_denom the height within the given revision\n   */\n\n\n  function DenomTrace(path, base_denom) {\n    var _this = _super.call(this) || this;\n\n    _this.path = path;\n    _this.base_denom = base_denom;\n    return _this;\n  }\n\n  DenomTrace.fromAmino = function (data) {\n    var path = data.path,\n        base_denom = data.base_denom;\n    return new DenomTrace(path, base_denom);\n  };\n\n  DenomTrace.prototype.toAmino = function () {\n    var _a = this,\n        path = _a.path,\n        base_denom = _a.base_denom;\n\n    var res = {\n      path: path,\n      base_denom: base_denom\n    };\n    return res;\n  };\n\n  DenomTrace.fromData = function (data) {\n    var path = data.path,\n        base_denom = data.base_denom;\n    return new DenomTrace(path, base_denom);\n  };\n\n  DenomTrace.prototype.toData = function () {\n    var _a = this,\n        path = _a.path,\n        base_denom = _a.base_denom;\n\n    var res = {\n      path: path,\n      base_denom: base_denom\n    };\n    return res;\n  };\n\n  DenomTrace.fromProto = function (proto) {\n    return new DenomTrace(proto.path, proto.baseDenom);\n  };\n\n  DenomTrace.prototype.toProto = function () {\n    var _a = this,\n        path = _a.path,\n        base_denom = _a.base_denom;\n\n    return transfer_1.DenomTrace.fromPartial({\n      path: path,\n      baseDenom: base_denom\n    });\n  };\n\n  return DenomTrace;\n}(json_1.JSONSerializable);\n\nexports.DenomTrace = DenomTrace;","map":{"version":3,"sources":["../../../src/core/ibc-transfer/DenomTrace.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,gEAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAEA;;;;;;;;;;;AAWG;;;AACH,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;AAK9B;;;AAGG;;;AACH,WAAA,UAAA,CAAmB,IAAnB,EAAwC,UAAxC,EAA0D;AAA1D,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADT;;AAAmB,IAAA,KAAA,CAAA,IAAA,GAAA,IAAA;AAAqB,IAAA,KAAA,CAAA,UAAA,GAAA,UAAA;;AAEvC;;AAEa,EAAA,UAAA,CAAA,SAAA,GAAd,UAAwB,IAAxB,EAA8C;AACpC,QAAA,IAAI,GAAiB,IAAI,CAArB,IAAJ;AAAA,QAAM,UAAU,GAAK,IAAI,CAAT,UAAhB;AACR,WAAO,IAAI,UAAJ,CAAe,IAAf,EAAqB,UAArB,CAAP;AACD,GAHa;;AAKP,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACQ,QAAA,EAAA,GAAuB,IAAvB;AAAA,QAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,QAAQ,UAAU,GAAA,EAAA,CAAA,UAAlB;;AACN,QAAM,GAAG,GAAqB;AAC5B,MAAA,IAAI,EAAA,IADwB;AAE5B,MAAA,UAAU,EAAA;AAFkB,KAA9B;AAIA,WAAO,GAAP;AACD,GAPM;;AASO,EAAA,UAAA,CAAA,QAAA,GAAd,UAAuB,IAAvB,EAA4C;AAClC,QAAA,IAAI,GAAiB,IAAI,CAArB,IAAJ;AAAA,QAAM,UAAU,GAAK,IAAI,CAAT,UAAhB;AACR,WAAO,IAAI,UAAJ,CAAe,IAAf,EAAqB,UAArB,CAAP;AACD,GAHa;;AAKP,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACQ,QAAA,EAAA,GAAuB,IAAvB;AAAA,QAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,QAAQ,UAAU,GAAA,EAAA,CAAA,UAAlB;;AACN,QAAM,GAAG,GAAoB;AAC3B,MAAA,IAAI,EAAA,IADuB;AAE3B,MAAA,UAAU,EAAA;AAFiB,KAA7B;AAIA,WAAO,GAAP;AACD,GAPM;;AASO,EAAA,UAAA,CAAA,SAAA,GAAd,UAAwB,KAAxB,EAA+C;AAC7C,WAAO,IAAI,UAAJ,CAAe,KAAK,CAAC,IAArB,EAA2B,KAAK,CAAC,SAAjC,CAAP;AACD,GAFa;;AAIP,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACQ,QAAA,EAAA,GAAuB,IAAvB;AAAA,QAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,QAAQ,UAAU,GAAA,EAAA,CAAA,UAAlB;;AACN,WAAO,UAAA,CAAA,UAAA,CAAc,WAAd,CAA0B;AAAE,MAAA,IAAI,EAAA,IAAN;AAAQ,MAAA,SAAS,EAAE;AAAnB,KAA1B,CAAP;AACD,GAHM;;AAIT,SAAA,UAAA;AAAC,CAjDD,CAAgC,MAAA,CAAA,gBAAhC,CAAA;;AAAa,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DenomTrace = void 0;\nvar transfer_1 = require(\"@terra-money/terra.proto/ibc/applications/transfer/v1/transfer\");\nvar json_1 = require(\"../../util/json\");\n/**\n * DenomTrace is a monotonically increasing data type\n * that can be compared against another DenomTrace for the purposes of updating and\n * freezing clients\n *\n * Normally the RevisionDenomTrace is incremented at each height while keeping\n * RevisionNumber the same. However some consensus algorithms may choose to\n * reset the height in certain conditions e.g. hard forks, state-machine\n * breaking changes In these cases, the RevisionNumber is incremented so that\n * height continues to be monitonically increasing even as the RevisionDenomTrace\n * gets reset\n */\nvar DenomTrace = /** @class */ (function (_super) {\n    __extends(DenomTrace, _super);\n    /**\n     * @param path the revision that the client is currently on\n     * @param base_denom the height within the given revision\n     */\n    function DenomTrace(path, base_denom) {\n        var _this = _super.call(this) || this;\n        _this.path = path;\n        _this.base_denom = base_denom;\n        return _this;\n    }\n    DenomTrace.fromAmino = function (data) {\n        var path = data.path, base_denom = data.base_denom;\n        return new DenomTrace(path, base_denom);\n    };\n    DenomTrace.prototype.toAmino = function () {\n        var _a = this, path = _a.path, base_denom = _a.base_denom;\n        var res = {\n            path: path,\n            base_denom: base_denom,\n        };\n        return res;\n    };\n    DenomTrace.fromData = function (data) {\n        var path = data.path, base_denom = data.base_denom;\n        return new DenomTrace(path, base_denom);\n    };\n    DenomTrace.prototype.toData = function () {\n        var _a = this, path = _a.path, base_denom = _a.base_denom;\n        var res = {\n            path: path,\n            base_denom: base_denom,\n        };\n        return res;\n    };\n    DenomTrace.fromProto = function (proto) {\n        return new DenomTrace(proto.path, proto.baseDenom);\n    };\n    DenomTrace.prototype.toProto = function () {\n        var _a = this, path = _a.path, base_denom = _a.base_denom;\n        return transfer_1.DenomTrace.fromPartial({ path: path, baseDenom: base_denom });\n    };\n    return DenomTrace;\n}(json_1.JSONSerializable));\nexports.DenomTrace = DenomTrace;\n//# sourceMappingURL=DenomTrace.js.map"]},"metadata":{},"sourceType":"script"}