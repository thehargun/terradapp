{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValConsAddress = exports.ValPubKey = exports.ValAddress = exports.AccPubKey = exports.AccAddress = void 0;\n\nvar bech32_1 = require(\"bech32\");\n\nfunction checkPrefixAndLength(prefix, data, length) {\n  try {\n    var vals = bech32_1.bech32.decode(data);\n    return vals.prefix === prefix && data.length == length;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar AccAddress;\n\n(function (AccAddress) {\n  /**\n   * Checks if a string is a valid Terra account address.\n   *\n   * @param data string to check\n   */\n  function validate(data) {\n    return checkPrefixAndLength('terra', data, 44);\n  }\n\n  AccAddress.validate = validate;\n  /**\n   * Converts a validator address into an account address\n   *\n   * @param address validator address\n   */\n\n  function fromValAddress(address) {\n    var vals = bech32_1.bech32.decode(address);\n    return bech32_1.bech32.encode('terra', vals.words);\n  }\n\n  AccAddress.fromValAddress = fromValAddress;\n})(AccAddress = exports.AccAddress || (exports.AccAddress = {}));\n\nvar AccPubKey;\n\n(function (AccPubKey) {\n  /**\n   * Checks if a string is a Terra account's public key\n   * @param data string to check\n   */\n  function validate(data) {\n    return checkPrefixAndLength('terrapub', data, 47);\n  }\n\n  AccPubKey.validate = validate;\n  /**\n   * Converts a Terra validator pubkey to an account pubkey.\n   * @param address validator pubkey to convert\n   */\n\n  function fromAccAddress(address) {\n    var vals = bech32_1.bech32.decode(address);\n    return bech32_1.bech32.encode('terrapub', vals.words);\n  }\n\n  AccPubKey.fromAccAddress = fromAccAddress;\n})(AccPubKey = exports.AccPubKey || (exports.AccPubKey = {}));\n\nvar ValAddress;\n\n(function (ValAddress) {\n  /**\n   * Checks if a string is a Terra validator address.\n   *\n   * @param data string to check\n   */\n  function validate(data) {\n    return checkPrefixAndLength('terravaloper', data, 51);\n  }\n\n  ValAddress.validate = validate;\n  /**\n   * Converts a Terra account address to a validator address.\n   * @param address account address to convert\n   */\n\n  function fromAccAddress(address) {\n    var vals = bech32_1.bech32.decode(address);\n    return bech32_1.bech32.encode('terravaloper', vals.words);\n  }\n\n  ValAddress.fromAccAddress = fromAccAddress;\n})(ValAddress = exports.ValAddress || (exports.ValAddress = {}));\n\nvar ValPubKey;\n\n(function (ValPubKey) {\n  /**\n   * Checks if a string is a Terra validator pubkey\n   * @param data string to check\n   */\n  function validate(data) {\n    return checkPrefixAndLength('terravaloperpub', data, 54);\n  }\n\n  ValPubKey.validate = validate;\n  /**\n   * Converts a Terra validator operator address to a validator pubkey.\n   * @param valAddress account pubkey\n   */\n\n  function fromValAddress(valAddress) {\n    var vals = bech32_1.bech32.decode(valAddress);\n    return bech32_1.bech32.encode('terravaloperpub', vals.words);\n  }\n\n  ValPubKey.fromValAddress = fromValAddress;\n})(ValPubKey = exports.ValPubKey || (exports.ValPubKey = {}));\n\nvar ValConsAddress;\n\n(function (ValConsAddress) {\n  /**\n   * Checks if a string is a Terra validator consensus address\n   * @param data string to check\n   */\n  function validate(data) {\n    return checkPrefixAndLength('terravalcons', data, 51);\n  }\n\n  ValConsAddress.validate = validate;\n})(ValConsAddress = exports.ValConsAddress || (exports.ValConsAddress = {}));","map":{"version":3,"sources":["../../src/core/bech32.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValConsAddress = exports.ValPubKey = exports.ValAddress = exports.AccPubKey = exports.AccAddress = void 0;\nvar bech32_1 = require(\"bech32\");\nfunction checkPrefixAndLength(prefix, data, length) {\n    try {\n        var vals = bech32_1.bech32.decode(data);\n        return vals.prefix === prefix && data.length == length;\n    }\n    catch (e) {\n        return false;\n    }\n}\nvar AccAddress;\n(function (AccAddress) {\n    /**\n     * Checks if a string is a valid Terra account address.\n     *\n     * @param data string to check\n     */\n    function validate(data) {\n        return checkPrefixAndLength('terra', data, 44);\n    }\n    AccAddress.validate = validate;\n    /**\n     * Converts a validator address into an account address\n     *\n     * @param address validator address\n     */\n    function fromValAddress(address) {\n        var vals = bech32_1.bech32.decode(address);\n        return bech32_1.bech32.encode('terra', vals.words);\n    }\n    AccAddress.fromValAddress = fromValAddress;\n})(AccAddress = exports.AccAddress || (exports.AccAddress = {}));\nvar AccPubKey;\n(function (AccPubKey) {\n    /**\n     * Checks if a string is a Terra account's public key\n     * @param data string to check\n     */\n    function validate(data) {\n        return checkPrefixAndLength('terrapub', data, 47);\n    }\n    AccPubKey.validate = validate;\n    /**\n     * Converts a Terra validator pubkey to an account pubkey.\n     * @param address validator pubkey to convert\n     */\n    function fromAccAddress(address) {\n        var vals = bech32_1.bech32.decode(address);\n        return bech32_1.bech32.encode('terrapub', vals.words);\n    }\n    AccPubKey.fromAccAddress = fromAccAddress;\n})(AccPubKey = exports.AccPubKey || (exports.AccPubKey = {}));\nvar ValAddress;\n(function (ValAddress) {\n    /**\n     * Checks if a string is a Terra validator address.\n     *\n     * @param data string to check\n     */\n    function validate(data) {\n        return checkPrefixAndLength('terravaloper', data, 51);\n    }\n    ValAddress.validate = validate;\n    /**\n     * Converts a Terra account address to a validator address.\n     * @param address account address to convert\n     */\n    function fromAccAddress(address) {\n        var vals = bech32_1.bech32.decode(address);\n        return bech32_1.bech32.encode('terravaloper', vals.words);\n    }\n    ValAddress.fromAccAddress = fromAccAddress;\n})(ValAddress = exports.ValAddress || (exports.ValAddress = {}));\nvar ValPubKey;\n(function (ValPubKey) {\n    /**\n     * Checks if a string is a Terra validator pubkey\n     * @param data string to check\n     */\n    function validate(data) {\n        return checkPrefixAndLength('terravaloperpub', data, 54);\n    }\n    ValPubKey.validate = validate;\n    /**\n     * Converts a Terra validator operator address to a validator pubkey.\n     * @param valAddress account pubkey\n     */\n    function fromValAddress(valAddress) {\n        var vals = bech32_1.bech32.decode(valAddress);\n        return bech32_1.bech32.encode('terravaloperpub', vals.words);\n    }\n    ValPubKey.fromValAddress = fromValAddress;\n})(ValPubKey = exports.ValPubKey || (exports.ValPubKey = {}));\nvar ValConsAddress;\n(function (ValConsAddress) {\n    /**\n     * Checks if a string is a Terra validator consensus address\n     * @param data string to check\n     */\n    function validate(data) {\n        return checkPrefixAndLength('terravalcons', data, 51);\n    }\n    ValConsAddress.validate = validate;\n})(ValConsAddress = exports.ValConsAddress || (exports.ValConsAddress = {}));\n//# sourceMappingURL=bech32.js.map"]},"metadata":{},"sourceType":"script"}