{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hargu\\\\Desktop\\\\Luna Classic\\\\LunaClassic\\\\src\\\\components\\\\SignSample.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fee, LCDClient, MsgSend } from '@terra-money/terra.js';\nimport { CreateTxFailed, Timeout, TxFailed, TxUnspecifiedError, useConnectedWallet, UserDenied } from '@terra-money/wallet-provider';\nimport React, { useCallback, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TEST_TO_ADDRESS = 'terra12hnhh5vtyg5juqnzm43970nh4fw42pt27nw9g9';\nexport function SignSample() {\n  _s();\n\n  const [signResult, setSignResult] = useState(null);\n  const [txResult, setTxResult] = useState(null);\n  const [txError, setTxError] = useState(null);\n  const connectedWallet = useConnectedWallet();\n  const send = useCallback(() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    if (connectedWallet.network.chainID.startsWith('columbus')) {\n      alert(`Please only execute this example on Testnet`);\n      return;\n    }\n\n    setSignResult(null);\n    setTxResult(null);\n    setTxError(null);\n    connectedWallet.sign({\n      fee: new Fee(1000000, '200000uusd'),\n      msgs: [new MsgSend(connectedWallet.walletAddress, TEST_TO_ADDRESS, {\n        uusd: 1000000\n      })]\n    }).then(nextSignResult => {\n      setSignResult(nextSignResult); // broadcast\n\n      const tx = nextSignResult.result;\n      const lcd = new LCDClient({\n        chainID: connectedWallet.network.chainID,\n        URL: connectedWallet.network.lcd\n      });\n      return lcd.tx.broadcastSync(tx);\n    }).then(nextTxResult => {\n      setTxResult(nextTxResult);\n    }).catch(error => {\n      if (error instanceof UserDenied) {\n        setTxError('User Denied');\n      } else if (error instanceof CreateTxFailed) {\n        setTxError('Create Tx Failed: ' + error.message);\n      } else if (error instanceof TxFailed) {\n        setTxError('Tx Failed: ' + error.message);\n      } else if (error instanceof Timeout) {\n        setTxError('Timeout');\n      } else if (error instanceof TxUnspecifiedError) {\n        setTxError('Unspecified Error: ' + error.message);\n      } else {\n        setTxError('Unknown Error: ' + (error instanceof Error ? error.message : String(error)));\n      }\n    });\n  }, [connectedWallet]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sign Sample\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), (connectedWallet === null || connectedWallet === void 0 ? void 0 : connectedWallet.availableSign) && !signResult && !txResult && !txError && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => send(),\n      children: [\"Send 1USD to \", TEST_TO_ADDRESS]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }, this), signResult && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(signResult, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 22\n    }, this), txResult && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(txResult, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), connectedWallet && txResult && /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://finder.terra.money/${connectedWallet.network.chainID}/tx/${txResult.txhash}`,\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        children: \"Open Tx Result in Terra Finder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), txError && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: txError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 19\n    }, this), (!!signResult || !!txResult || !!txError) && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setSignResult(null);\n        setTxResult(null);\n        setTxError(null);\n      },\n      children: \"Clear result\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), !connectedWallet && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 28\n    }, this), connectedWallet && !connectedWallet.availableSign && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This connection does not support sign()\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignSample, \"IcN78H/qfT01EQb1/+EKX1o7DAo=\", false, function () {\n  return [useConnectedWallet];\n});\n\n_c = SignSample;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignSample\");","map":{"version":3,"sources":["C:/Users/hargu/Desktop/Luna Classic/LunaClassic/src/components/SignSample.tsx"],"names":["Fee","LCDClient","MsgSend","CreateTxFailed","Timeout","TxFailed","TxUnspecifiedError","useConnectedWallet","UserDenied","React","useCallback","useState","TEST_TO_ADDRESS","SignSample","signResult","setSignResult","txResult","setTxResult","txError","setTxError","connectedWallet","send","network","chainID","startsWith","alert","sign","fee","msgs","walletAddress","uusd","then","nextSignResult","tx","result","lcd","URL","broadcastSync","nextTxResult","catch","error","message","Error","String","availableSign","JSON","stringify","txhash"],"mappings":"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","sourcesContent":["import {\n  Fee,\n  LCDClient,\n  MsgSend,\n  SyncTxBroadcastResult,\n} from '@terra-money/terra.js';\nimport {\n  CreateTxFailed,\n  SignResult,\n  Timeout,\n  TxFailed,\n  TxUnspecifiedError,\n  useConnectedWallet,\n  UserDenied,\n} from '@terra-money/wallet-provider';\nimport React, { useCallback, useState } from 'react';\n\nconst TEST_TO_ADDRESS = 'terra12hnhh5vtyg5juqnzm43970nh4fw42pt27nw9g9';\n\nexport function SignSample() {\n  const [signResult, setSignResult] = useState<SignResult | null>(null);\n  const [txResult, setTxResult] = useState<SyncTxBroadcastResult | null>(null);\n  const [txError, setTxError] = useState<string | null>(null);\n\n  const connectedWallet = useConnectedWallet();\n\n  const send = useCallback(() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    if (connectedWallet.network.chainID.startsWith('columbus')) {\n      alert(`Please only execute this example on Testnet`);\n      return;\n    }\n\n    setSignResult(null);\n    setTxResult(null);\n    setTxError(null);\n\n    connectedWallet\n      .sign({\n        fee: new Fee(1000000, '200000uusd'),\n        msgs: [\n          new MsgSend(connectedWallet.walletAddress, TEST_TO_ADDRESS, {\n            uusd: 1000000,\n          }),\n        ],\n      })\n      .then((nextSignResult: SignResult) => {\n        setSignResult(nextSignResult);\n\n        // broadcast\n        const tx = nextSignResult.result;\n\n        const lcd = new LCDClient({\n          chainID: connectedWallet.network.chainID,\n          URL: connectedWallet.network.lcd,\n        });\n\n        return lcd.tx.broadcastSync(tx);\n      })\n      .then((nextTxResult: SyncTxBroadcastResult) => {\n        setTxResult(nextTxResult);\n      })\n      .catch((error: unknown) => {\n        if (error instanceof UserDenied) {\n          setTxError('User Denied');\n        } else if (error instanceof CreateTxFailed) {\n          setTxError('Create Tx Failed: ' + error.message);\n        } else if (error instanceof TxFailed) {\n          setTxError('Tx Failed: ' + error.message);\n        } else if (error instanceof Timeout) {\n          setTxError('Timeout');\n        } else if (error instanceof TxUnspecifiedError) {\n          setTxError('Unspecified Error: ' + error.message);\n        } else {\n          setTxError(\n            'Unknown Error: ' +\n              (error instanceof Error ? error.message : String(error)),\n          );\n        }\n      });\n  }, [connectedWallet]);\n\n  return (\n    <div>\n      <h1>Sign Sample</h1>\n\n      {connectedWallet?.availableSign &&\n        !signResult &&\n        !txResult &&\n        !txError && (\n          <button onClick={() => send()}>Send 1USD to {TEST_TO_ADDRESS}</button>\n        )}\n\n      {signResult && <pre>{JSON.stringify(signResult, null, 2)}</pre>}\n\n      {txResult && (\n        <>\n          <pre>{JSON.stringify(txResult, null, 2)}</pre>\n          {connectedWallet && txResult && (\n            <a\n              href={`https://finder.terra.money/${connectedWallet.network.chainID}/tx/${txResult.txhash}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Open Tx Result in Terra Finder\n            </a>\n          )}\n        </>\n      )}\n\n      {txError && <pre>{txError}</pre>}\n\n      {(!!signResult || !!txResult || !!txError) && (\n        <button\n          onClick={() => {\n            setSignResult(null);\n            setTxResult(null);\n            setTxError(null);\n          }}\n        >\n          Clear result\n        </button>\n      )}\n\n      {!connectedWallet && <p>Wallet not connected!</p>}\n\n      {connectedWallet && !connectedWallet.availableSign && (\n        <p>This connection does not support sign()</p>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}