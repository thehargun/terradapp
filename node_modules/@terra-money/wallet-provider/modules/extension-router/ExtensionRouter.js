import { WebExtensionStatus, } from '@terra-dev/web-extension-interface';
import { BehaviorSubject } from 'rxjs';
import { isDesktopChrome } from '../../utils/browser-check';
import { LegacyExtensionConnector } from '../legacy-extension';
import { defaultSelectModal } from './defaultSelectModal';
import { getTerraExtensions } from './multiChannel';
import { clearSession, getStoredSession, storeSession } from './session';
import { ExtensionRouterConnectorType, ExtensionRouterStatus, } from './types';
export class ExtensionRouter {
    constructor(options) {
        var _a, _b;
        this.options = options;
        this._connector = null;
        // ---------------------------------------------
        // states
        // ---------------------------------------------
        this.states = () => {
            return this._states.asObservable();
        };
        this.getLastStates = () => {
            return this._states.getValue();
        };
        // ---------------------------------------------
        // behaviors
        // ---------------------------------------------
        this.connect = async (identifier) => {
            var _a;
            const extensionInfos = getTerraExtensions();
            if (extensionInfos.length === 0) {
                throw new Error(`[ExtensionRouter] Can't find connectors`);
            }
            let extensionInfo;
            if (identifier) {
                extensionInfo = extensionInfos.find((item) => item.identifier === identifier);
            }
            else if (extensionInfos.length === 1) {
                extensionInfo = extensionInfos[0];
            }
            else {
                const select = (_a = this.options.selectExtension) !== null && _a !== void 0 ? _a : defaultSelectModal;
                const selectedExtensionInfo = await select(extensionInfos);
                if (selectedExtensionInfo) {
                    extensionInfo = selectedExtensionInfo;
                }
            }
            if (extensionInfo) {
                this.createConnector(extensionInfo);
            }
        };
        this.disconnect = () => {
            var _a;
            clearSession();
            this._states.next({
                type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,
                network: this.options.defaultNetwork,
            });
            (_a = this._connector) === null || _a === void 0 ? void 0 : _a.close();
            this._connector = null;
        };
        this.requestApproval = () => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            this._connector.requestApproval();
        };
        this.refetchStates = () => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            this._connector.refetchStates();
        };
        this.post = (tx, terraAddress) => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            const latestStates = this.getLastStates();
            if (latestStates.type !== ExtensionRouterStatus.WALLET_CONNECTED) {
                throw new Error(`[ExtensionRouter] Wallet is not connected`);
            }
            return this._connector.post(terraAddress !== null && terraAddress !== void 0 ? terraAddress : latestStates.wallet.terraAddress, tx);
        };
        this.sign = (tx, terraAddress) => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            const latestStates = this.getLastStates();
            if (latestStates.type !== ExtensionRouterStatus.WALLET_CONNECTED) {
                throw new Error(`[ExtensionRouter] Wallet is not connected`);
            }
            return this._connector.sign(terraAddress !== null && terraAddress !== void 0 ? terraAddress : latestStates.wallet.terraAddress, tx);
        };
        this.signBytes = (bytes, terraAddress) => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            const latestStates = this.getLastStates();
            if (latestStates.type !== ExtensionRouterStatus.WALLET_CONNECTED) {
                throw new Error(`[ExtensionRouter] Wallet is not connected`);
            }
            return this._connector.signBytes(terraAddress !== null && terraAddress !== void 0 ? terraAddress : latestStates.wallet.terraAddress, bytes);
        };
        this.hasCW20Tokens = (chainID, ...tokenAddrs) => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            else if (this._connector instanceof LegacyExtensionConnector) {
                throw new Error('[ExtensionRouter] Legacy extension does not support hasCW20Tokens() ');
            }
            return this._connector.hasCW20Tokens(chainID, ...tokenAddrs);
        };
        this.addCW20Tokens = (chainID, ...tokenAddrs) => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            else if (this._connector instanceof LegacyExtensionConnector) {
                throw new Error('[ExtensionRouter] Legacy extension does not support addCW20Tokens() ');
            }
            return this._connector.addCW20Tokens(chainID, ...tokenAddrs);
        };
        this.hasNetwork = (network) => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            else if (this._connector instanceof LegacyExtensionConnector) {
                throw new Error('[ExtensionRouter] Legacy extension does not support hasNetwork() ');
            }
            return this._connector.hasNetwork(network);
        };
        this.addNetwork = (network) => {
            if (!this._connector) {
                throw new Error('[ExtensionRouter] No connector');
            }
            else if (this._connector instanceof LegacyExtensionConnector) {
                throw new Error('[ExtensionRouter] Legacy extension does not support addNetwork() ');
            }
            return this._connector.addNetwork(network);
        };
        // ---------------------------------------------
        // internal
        // ---------------------------------------------
        this.createConnector = (extensionInfo) => {
            var _a;
            (_a = this._connector) === null || _a === void 0 ? void 0 : _a.close();
            if (!extensionInfo.connector && !this.isDesktopChrome) {
                throw new Error(`[ExtensionRouter] Legacy extension only support the desktop chrome`);
            }
            const connectorPromise = extensionInfo.connector
                ? Promise.resolve(extensionInfo.connector())
                : Promise.resolve(new LegacyExtensionConnector(extensionInfo.identifier));
            connectorPromise.then((connector) => {
                var _a;
                connector.open((_a = this.options.hostWindow) !== null && _a !== void 0 ? _a : window, {
                    next: (nextStates) => {
                        var _a;
                        if (nextStates.type === WebExtensionStatus.INITIALIZING) {
                            this._states.next({
                                type: ExtensionRouterStatus.INITIALIZING,
                                network: this.options.defaultNetwork,
                            });
                        }
                        else if (nextStates.type === WebExtensionStatus.NO_AVAILABLE) {
                            this._states.next({
                                type: ExtensionRouterStatus.NO_AVAILABLE,
                                network: this.options.defaultNetwork,
                                isConnectorExists: true,
                                isApproved: nextStates.isApproved,
                            });
                        }
                        else if (nextStates.wallets.length === 0) {
                            this._states.next({
                                type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,
                                network: nextStates.network,
                            });
                        }
                        else {
                            this._states.next({
                                type: ExtensionRouterStatus.WALLET_CONNECTED,
                                network: nextStates.network,
                                wallet: nextStates.focusedWalletAddress
                                    ? (_a = nextStates.wallets.find((itemWallet) => itemWallet.terraAddress ===
                                        nextStates.focusedWalletAddress)) !== null && _a !== void 0 ? _a : nextStates.wallets[0]
                                    : nextStates.wallets[0],
                                connectorType: connector instanceof LegacyExtensionConnector
                                    ? ExtensionRouterConnectorType.LEGACY
                                    : ExtensionRouterConnectorType.WEB_EXTENSION,
                                supportFeatures: new Set(connector.supportFeatures()),
                            });
                        }
                    },
                    error: (error) => {
                        console.error(error);
                    },
                    complete: () => { },
                });
                this._connector = connector;
                storeSession({
                    identifier: extensionInfo.identifier,
                });
            });
        };
        this.isDesktopChrome =
            typeof window !== 'undefined' &&
                isDesktopChrome((_b = (_a = options.dangerously__chromeExtensionCompatibleBrowserCheck) === null || _a === void 0 ? void 0 : _a.call(options, navigator.userAgent)) !== null && _b !== void 0 ? _b : false);
        this._states = new BehaviorSubject({
            type: ExtensionRouterStatus.INITIALIZING,
            network: options.defaultNetwork,
        });
        this._extensionInfos = getTerraExtensions();
        if (this._extensionInfos.length === 0) {
            this._states.next({
                type: ExtensionRouterStatus.NO_AVAILABLE,
                network: options.defaultNetwork,
                isConnectorExists: false,
            });
            return;
        }
        // ---------------------------------------------
        // initialize session
        // ---------------------------------------------
        const session = getStoredSession();
        if (session) {
            const extensionInfo = this._extensionInfos.find((item) => item.identifier === session.identifier);
            if (extensionInfo) {
                this.createConnector(extensionInfo);
                return;
            }
            else {
                console.warn(`Can't find an extension for the session "${session.identifier}"`);
                clearSession();
                this._states.next({
                    type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,
                    network: options.defaultNetwork,
                });
            }
        }
        else {
            this._states.next({
                type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,
                network: options.defaultNetwork,
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXh0ZW5zaW9uUm91dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL0B0ZXJyYS1tb25leS93YWxsZXQtcHJvdmlkZXIvbW9kdWxlcy9leHRlbnNpb24tcm91dGVyL0V4dGVuc2lvblJvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBT0wsa0JBQWtCLEdBRW5CLE1BQU0sb0NBQW9DLENBQUM7QUFHNUMsT0FBTyxFQUFFLGVBQWUsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzVELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzFELE9BQU8sRUFBaUIsa0JBQWtCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN6RSxPQUFPLEVBQ0wsNEJBQTRCLEVBRTVCLHFCQUFxQixHQUN0QixNQUFNLFNBQVMsQ0FBQztBQWtCakIsTUFBTSxPQUFPLGVBQWU7SUFRMUIsWUFBNkIsT0FBK0I7O1FBQS9CLFlBQU8sR0FBUCxPQUFPLENBQXdCO1FBSnBELGVBQVUsR0FBc0MsSUFBSSxDQUFDO1FBOEQ3RCxnREFBZ0Q7UUFDaEQsU0FBUztRQUNULGdEQUFnRDtRQUNoRCxXQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ1osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3JDLENBQUMsQ0FBQztRQUVGLGtCQUFhLEdBQUcsR0FBRyxFQUFFO1lBQ25CLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNqQyxDQUFDLENBQUM7UUFFRixnREFBZ0Q7UUFDaEQsWUFB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QUVELGdEQUFnRDtRQUNoRCxxQkFBcUI7UUFDckIsZ0RBQWdEO1FBQ2hELE1BQU0sT0FBTyxHQUFHLGdCQUFnQixFQUFFLENBQUM7UUFFbkMsSUFBSSxPQUFPLEVBQUU7WUFDWCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FDN0MsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEtBQUssT0FBTyxDQUFDLFVBQVUsQ0FDakQsQ0FBQztZQUVGLElBQUksYUFBYSxFQUFFO2dCQUNqQixJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUNwQyxPQUFPO2FBQ1I7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLElBQUksQ0FDViw0Q0FBNEMsT0FBTyxDQUFDLFVBQVUsR0FBRyxDQUNsRSxDQUFDO2dCQUNGLFlBQVksRUFBRSxDQUFDO2dCQUVmLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO29CQUNoQixJQUFJLEVBQUUscUJBQXFCLENBQUMsb0JBQW9CO29CQUNoRCxPQUFPLEVBQUUsT0FBTyxDQUFDLGNBQWM7aUJBQ2hDLENBQUMsQ0FBQzthQUNKO1NBQ0Y7YUFBTTtZQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUNoQixJQUFJLEVBQUUscUJBQXFCLENBQUMsb0JBQW9CO2dCQUNoRCxPQUFPLEVBQUUsT0FBTyxDQUFDLGNBQWM7YUFDaEMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0NBb1FGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgVGVycmFXZWJFeHRlbnNpb25Db25uZWN0b3IsXG4gIFdlYkV4dGVuc2lvbk5ldHdvcmtJbmZvLFxuICBXZWJFeHRlbnNpb25Qb3N0UGF5bG9hZCxcbiAgV2ViRXh0ZW5zaW9uU2lnbkJ5dGVzUGF5bG9hZCxcbiAgV2ViRXh0ZW5zaW9uU2lnblBheWxvYWQsXG4gIFdlYkV4dGVuc2lvblN0YXRlcyxcbiAgV2ViRXh0ZW5zaW9uU3RhdHVzLFxuICBXZWJFeHRlbnNpb25UeFJlc3VsdCxcbn0gZnJvbSAnQHRlcnJhLWRldi93ZWItZXh0ZW5zaW9uLWludGVyZmFjZSc7XG5pbXBvcnQgeyBDcmVhdGVUeE9wdGlvbnMgfSBmcm9tICdAdGVycmEtbW9uZXkvdGVycmEuanMnO1xuaW1wb3J0IHsgTmV0d29ya0luZm8gfSBmcm9tICdAdGVycmEtbW9uZXkvdXNlLXdhbGxldCc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIFN1YnNjcmliYWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgaXNEZXNrdG9wQ2hyb21lIH0gZnJvbSAnLi4vLi4vdXRpbHMvYnJvd3Nlci1jaGVjayc7XG5pbXBvcnQgeyBMZWdhY3lFeHRlbnNpb25Db25uZWN0b3IgfSBmcm9tICcuLi9sZWdhY3ktZXh0ZW5zaW9uJztcbmltcG9ydCB7IGRlZmF1bHRTZWxlY3RNb2RhbCB9IGZyb20gJy4vZGVmYXVsdFNlbGVjdE1vZGFsJztcbmltcG9ydCB7IEV4dGVuc2lvbkluZm8sIGdldFRlcnJhRXh0ZW5zaW9ucyB9IGZyb20gJy4vbXVsdGlDaGFubmVsJztcbmltcG9ydCB7IGNsZWFyU2Vzc2lvbiwgZ2V0U3RvcmVkU2Vzc2lvbiwgc3RvcmVTZXNzaW9uIH0gZnJvbSAnLi9zZXNzaW9uJztcbmltcG9ydCB7XG4gIEV4dGVuc2lvblJvdXRlckNvbm5lY3RvclR5cGUsXG4gIEV4dGVuc2lvblJvdXRlclN0YXRlcyxcbiAgRXh0ZW5zaW9uUm91dGVyU3RhdHVzLFxufSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBFeHRlbnNpb25Sb3V0ZXJPcHRpb25zIHtcbiAgZGVmYXVsdE5ldHdvcms6IE5ldHdvcmtJbmZvO1xuICBzZWxlY3RFeHRlbnNpb24/OiAoXG4gICAgZXh0ZW5zaW9uSW5mb3M6IEV4dGVuc2lvbkluZm9bXSxcbiAgKSA9PiBQcm9taXNlPEV4dGVuc2lvbkluZm8gfCBudWxsPjtcblxuICBob3N0V2luZG93PzogV2luZG93O1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBkZXZlbG9wbWVudCBmZWF0dXJlc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgZGFuZ2Vyb3VzbHlfX2Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyQ2hlY2s6IChcbiAgICB1c2VyQWdlbnQ6IHN0cmluZyxcbiAgKSA9PiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgRXh0ZW5zaW9uUm91dGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBfc3RhdGVzOiBCZWhhdmlvclN1YmplY3Q8RXh0ZW5zaW9uUm91dGVyU3RhdGVzPjtcbiAgcHJpdmF0ZSByZWFkb25seSBfZXh0ZW5zaW9uSW5mb3M6IEV4dGVuc2lvbkluZm9bXTtcblxuICBwcml2YXRlIF9jb25uZWN0b3I6IFRlcnJhV2ViRXh0ZW5zaW9uQ29ubmVjdG9yIHwgbnVsbCA9IG51bGw7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBpc0Rlc2t0b3BDaHJvbWU6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBFeHRlbnNpb25Sb3V0ZXJPcHRpb25zKSB7XG4gICAgdGhpcy5pc0Rlc2t0b3BDaHJvbWUgPVxuICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIGlzRGVza3RvcENocm9tZShcbiAgICAgICAgb3B0aW9ucy5kYW5nZXJvdXNseV9fY2hyb21lRXh0ZW5zaW9uQ29tcGF0aWJsZUJyb3dzZXJDaGVjaz8uKFxuICAgICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICkgPz8gZmFsc2UsXG4gICAgICApO1xuXG4gICAgdGhpcy5fc3RhdGVzID0gbmV3IEJlaGF2aW9yU3ViamVjdDxFeHRlbnNpb25Sb3V0ZXJTdGF0ZXM+KHtcbiAgICAgIHR5cGU6IEV4dGVuc2lvblJvdXRlclN0YXR1cy5JTklUSUFMSVpJTkcsXG4gICAgICBuZXR3b3JrOiBvcHRpb25zLmRlZmF1bHROZXR3b3JrLFxuICAgIH0pO1xuXG4gICAgdGhpcy5fZXh0ZW5zaW9uSW5mb3MgPSBnZXRUZXJyYUV4dGVuc2lvbnMoKTtcblxuICAgIGlmICh0aGlzLl9leHRlbnNpb25JbmZvcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuX3N0YXRlcy5uZXh0KHtcbiAgICAgICAgdHlwZTogRXh0ZW5zaW9uUm91dGVyU3RhdHVzLk5PX0FWQUlMQUJMRSxcbiAgICAgICAgbmV0d29yazogb3B0aW9ucy5kZWZhdWx0TmV0d29yayxcbiAgICAgICAgaXNDb25uZWN0b3JFeGlzdHM6IGZhbHNlLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBpbml0aWFsaXplIHNlc3Npb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBjb25zdCBzZXNzaW9uID0gZ2V0U3RvcmVkU2Vzc2lvbigpO1xuXG4gICAgaWYgKHNlc3Npb24pIHtcbiAgICAgIGNvbnN0IGV4dGVuc2lvbkluZm8gPSB0aGlzLl9leHRlbnNpb25JbmZvcy5maW5kKFxuICAgICAgICAoaXRlbSkgPT4gaXRlbS5pZGVudGlmaWVyID09PSBzZXNzaW9uLmlkZW50aWZpZXIsXG4gICAgICApO1xuXG4gICAgICBpZiAoZXh0ZW5zaW9uSW5mbykge1xuICAgICAgICB0aGlzLmNyZWF0ZUNvbm5lY3RvcihleHRlbnNpb25JbmZvKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBDYW4ndCBmaW5kIGFuIGV4dGVuc2lvbiBmb3IgdGhlIHNlc3Npb24gXCIke3Nlc3Npb24uaWRlbnRpZmllcn1cImAsXG4gICAgICAgICk7XG4gICAgICAgIGNsZWFyU2Vzc2lvbigpO1xuXG4gICAgICAgIHRoaXMuX3N0YXRlcy5uZXh0KHtcbiAgICAgICAgICB0eXBlOiBFeHRlbnNpb25Sb3V0ZXJTdGF0dXMuV0FMTEVUX05PVF9DT05ORUNURUQsXG4gICAgICAgICAgbmV0d29yazogb3B0aW9ucy5kZWZhdWx0TmV0d29yayxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3N0YXRlcy5uZXh0KHtcbiAgICAgICAgdHlwZTogRXh0ZW5zaW9uUm91dGVyU3RhdHVzLldBTExFVF9OT1RfQ09OTkVDVEVELFxuICAgICAgICBuZXR3b3JrOiBvcHRpb25zLmRlZmF1bHROZXR3b3JrLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHN0YXRlc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgc3RhdGVzID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZXMuYXNPYnNlcnZhYmxlKCk7XG4gIH07XG5cbiAgZ2V0TGFzdFN0YXRlcyA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGVzLmdldFZhbHVlKCk7XG4gIH07XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIGJlaGF2aW9yc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgY29ubmVjdCA9IGFzeW5jIChpZGVudGlmaWVyPzogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgZXh0ZW5zaW9uSW5mb3MgPSBnZXRUZXJyYUV4dGVuc2lvbnMoKTtcblxuICAgIGlmIChleHRlbnNpb25JbmZvcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgW0V4dGVuc2lvblJvdXRlcl0gQ2FuJ3QgZmluZCBjb25uZWN0b3JzYCk7XG4gICAgfVxuXG4gICAgbGV0IGV4dGVuc2lvbkluZm86IEV4dGVuc2lvbkluZm8gfCB1bmRlZmluZWQ7XG5cbiAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgZXh0ZW5zaW9uSW5mbyA9IGV4dGVuc2lvbkluZm9zLmZpbmQoXG4gICAgICAgIChpdGVtKSA9PiBpdGVtLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIsXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoZXh0ZW5zaW9uSW5mb3MubGVuZ3RoID09PSAxKSB7XG4gICAgICBleHRlbnNpb25JbmZvID0gZXh0ZW5zaW9uSW5mb3NbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNlbGVjdCA9IHRoaXMub3B0aW9ucy5zZWxlY3RFeHRlbnNpb24gPz8gZGVmYXVsdFNlbGVjdE1vZGFsO1xuICAgICAgY29uc3Qgc2VsZWN0ZWRFeHRlbnNpb25JbmZvID0gYXdhaXQgc2VsZWN0KGV4dGVuc2lvbkluZm9zKTtcblxuICAgICAgaWYgKHNlbGVjdGVkRXh0ZW5zaW9uSW5mbykge1xuICAgICAgICBleHRlbnNpb25JbmZvID0gc2VsZWN0ZWRFeHRlbnNpb25JbmZvO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleHRlbnNpb25JbmZvKSB7XG4gICAgICB0aGlzLmNyZWF0ZUNvbm5lY3RvcihleHRlbnNpb25JbmZvKTtcbiAgICB9XG4gIH07XG5cbiAgZGlzY29ubmVjdCA9ICgpID0+IHtcbiAgICBjbGVhclNlc3Npb24oKTtcblxuICAgIHRoaXMuX3N0YXRlcy5uZXh0KHtcbiAgICAgIHR5cGU6IEV4dGVuc2lvblJvdXRlclN0YXR1cy5XQUxMRVRfTk9UX0NPTk5FQ1RFRCxcbiAgICAgIG5ldHdvcms6IHRoaXMub3B0aW9ucy5kZWZhdWx0TmV0d29yayxcbiAgICB9KTtcblxuICAgIHRoaXMuX2Nvbm5lY3Rvcj8uY2xvc2UoKTtcbiAgICB0aGlzLl9jb25uZWN0b3IgPSBudWxsO1xuICB9O1xuXG4gIHJlcXVlc3RBcHByb3ZhbCA9ICgpID0+IHtcbiAgICBpZiAoIXRoaXMuX2Nvbm5lY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbRXh0ZW5zaW9uUm91dGVyXSBObyBjb25uZWN0b3InKTtcbiAgICB9XG5cbiAgICB0aGlzLl9jb25uZWN0b3IucmVxdWVzdEFwcHJvdmFsKCk7XG4gIH07XG5cbiAgcmVmZXRjaFN0YXRlcyA9ICgpID0+IHtcbiAgICBpZiAoIXRoaXMuX2Nvbm5lY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbRXh0ZW5zaW9uUm91dGVyXSBObyBjb25uZWN0b3InKTtcbiAgICB9XG5cbiAgICB0aGlzLl9jb25uZWN0b3IucmVmZXRjaFN0YXRlcygpO1xuICB9O1xuXG4gIHBvc3QgPSAoXG4gICAgdHg6IENyZWF0ZVR4T3B0aW9ucyxcbiAgICB0ZXJyYUFkZHJlc3M/OiBzdHJpbmcsXG4gICk6IFN1YnNjcmliYWJsZTxXZWJFeHRlbnNpb25UeFJlc3VsdDxXZWJFeHRlbnNpb25Qb3N0UGF5bG9hZD4+ID0+IHtcbiAgICBpZiAoIXRoaXMuX2Nvbm5lY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbRXh0ZW5zaW9uUm91dGVyXSBObyBjb25uZWN0b3InKTtcbiAgICB9XG5cbiAgICBjb25zdCBsYXRlc3RTdGF0ZXMgPSB0aGlzLmdldExhc3RTdGF0ZXMoKTtcblxuICAgIGlmIChsYXRlc3RTdGF0ZXMudHlwZSAhPT0gRXh0ZW5zaW9uUm91dGVyU3RhdHVzLldBTExFVF9DT05ORUNURUQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgW0V4dGVuc2lvblJvdXRlcl0gV2FsbGV0IGlzIG5vdCBjb25uZWN0ZWRgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fY29ubmVjdG9yLnBvc3QoXG4gICAgICB0ZXJyYUFkZHJlc3MgPz8gbGF0ZXN0U3RhdGVzLndhbGxldC50ZXJyYUFkZHJlc3MsXG4gICAgICB0eCxcbiAgICApO1xuICB9O1xuXG4gIHNpZ24gPSAoXG4gICAgdHg6IENyZWF0ZVR4T3B0aW9ucyxcbiAgICB0ZXJyYUFkZHJlc3M/OiBzdHJpbmcsXG4gICk6IFN1YnNjcmliYWJsZTxXZWJFeHRlbnNpb25UeFJlc3VsdDxXZWJFeHRlbnNpb25TaWduUGF5bG9hZD4+ID0+IHtcbiAgICBpZiAoIXRoaXMuX2Nvbm5lY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbRXh0ZW5zaW9uUm91dGVyXSBObyBjb25uZWN0b3InKTtcbiAgICB9XG5cbiAgICBjb25zdCBsYXRlc3RTdGF0ZXMgPSB0aGlzLmdldExhc3RTdGF0ZXMoKTtcblxuICAgIGlmIChsYXRlc3RTdGF0ZXMudHlwZSAhPT0gRXh0ZW5zaW9uUm91dGVyU3RhdHVzLldBTExFVF9DT05ORUNURUQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgW0V4dGVuc2lvblJvdXRlcl0gV2FsbGV0IGlzIG5vdCBjb25uZWN0ZWRgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fY29ubmVjdG9yLnNpZ24oXG4gICAgICB0ZXJyYUFkZHJlc3MgPz8gbGF0ZXN0U3RhdGVzLndhbGxldC50ZXJyYUFkZHJlc3MsXG4gICAgICB0eCxcbiAgICApO1xuICB9O1xuXG4gIHNpZ25CeXRlcyA9IChcbiAgICBieXRlczogQnVmZmVyLFxuICAgIHRlcnJhQWRkcmVzcz86IHN0cmluZyxcbiAgKTogU3Vic2NyaWJhYmxlPFdlYkV4dGVuc2lvblR4UmVzdWx0PFdlYkV4dGVuc2lvblNpZ25CeXRlc1BheWxvYWQ+PiA9PiB7XG4gICAgaWYgKCF0aGlzLl9jb25uZWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0V4dGVuc2lvblJvdXRlcl0gTm8gY29ubmVjdG9yJyk7XG4gICAgfVxuXG4gICAgY29uc3QgbGF0ZXN0U3RhdGVzID0gdGhpcy5nZXRMYXN0U3RhdGVzKCk7XG5cbiAgICBpZiAobGF0ZXN0U3RhdGVzLnR5cGUgIT09IEV4dGVuc2lvblJvdXRlclN0YXR1cy5XQUxMRVRfQ09OTkVDVEVEKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFtFeHRlbnNpb25Sb3V0ZXJdIFdhbGxldCBpcyBub3QgY29ubmVjdGVkYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rvci5zaWduQnl0ZXMoXG4gICAgICB0ZXJyYUFkZHJlc3MgPz8gbGF0ZXN0U3RhdGVzLndhbGxldC50ZXJyYUFkZHJlc3MsXG4gICAgICBieXRlcyxcbiAgICApO1xuICB9O1xuXG4gIGhhc0NXMjBUb2tlbnMgPSAoXG4gICAgY2hhaW5JRDogc3RyaW5nLFxuICAgIC4uLnRva2VuQWRkcnM6IHN0cmluZ1tdXG4gICk6IFByb21pc2U8eyBbdG9rZW5BZGRyOiBzdHJpbmddOiBib29sZWFuIH0+ID0+IHtcbiAgICBpZiAoIXRoaXMuX2Nvbm5lY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbRXh0ZW5zaW9uUm91dGVyXSBObyBjb25uZWN0b3InKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2Nvbm5lY3RvciBpbnN0YW5jZW9mIExlZ2FjeUV4dGVuc2lvbkNvbm5lY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnW0V4dGVuc2lvblJvdXRlcl0gTGVnYWN5IGV4dGVuc2lvbiBkb2VzIG5vdCBzdXBwb3J0IGhhc0NXMjBUb2tlbnMoKSAnLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fY29ubmVjdG9yLmhhc0NXMjBUb2tlbnMoY2hhaW5JRCwgLi4udG9rZW5BZGRycyk7XG4gIH07XG5cbiAgYWRkQ1cyMFRva2VucyA9IChcbiAgICBjaGFpbklEOiBzdHJpbmcsXG4gICAgLi4udG9rZW5BZGRyczogc3RyaW5nW11cbiAgKTogUHJvbWlzZTx7IFt0b2tlbkFkZHI6IHN0cmluZ106IGJvb2xlYW4gfT4gPT4ge1xuICAgIGlmICghdGhpcy5fY29ubmVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tFeHRlbnNpb25Sb3V0ZXJdIE5vIGNvbm5lY3RvcicpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fY29ubmVjdG9yIGluc3RhbmNlb2YgTGVnYWN5RXh0ZW5zaW9uQ29ubmVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdbRXh0ZW5zaW9uUm91dGVyXSBMZWdhY3kgZXh0ZW5zaW9uIGRvZXMgbm90IHN1cHBvcnQgYWRkQ1cyMFRva2VucygpICcsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9jb25uZWN0b3IuYWRkQ1cyMFRva2VucyhjaGFpbklELCAuLi50b2tlbkFkZHJzKTtcbiAgfTtcblxuICBoYXNOZXR3b3JrID0gKFxuICAgIG5ldHdvcms6IE9taXQ8V2ViRXh0ZW5zaW9uTmV0d29ya0luZm8sICduYW1lJz4sXG4gICk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGlmICghdGhpcy5fY29ubmVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tFeHRlbnNpb25Sb3V0ZXJdIE5vIGNvbm5lY3RvcicpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fY29ubmVjdG9yIGluc3RhbmNlb2YgTGVnYWN5RXh0ZW5zaW9uQ29ubmVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdbRXh0ZW5zaW9uUm91dGVyXSBMZWdhY3kgZXh0ZW5zaW9uIGRvZXMgbm90IHN1cHBvcnQgaGFzTmV0d29yaygpICcsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9jb25uZWN0b3IuaGFzTmV0d29yayhuZXR3b3JrKTtcbiAgfTtcblxuICBhZGROZXR3b3JrID0gKG5ldHdvcms6IFdlYkV4dGVuc2lvbk5ldHdvcmtJbmZvKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgaWYgKCF0aGlzLl9jb25uZWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0V4dGVuc2lvblJvdXRlcl0gTm8gY29ubmVjdG9yJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9jb25uZWN0b3IgaW5zdGFuY2VvZiBMZWdhY3lFeHRlbnNpb25Db25uZWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1tFeHRlbnNpb25Sb3V0ZXJdIExlZ2FjeSBleHRlbnNpb24gZG9lcyBub3Qgc3VwcG9ydCBhZGROZXR3b3JrKCkgJyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rvci5hZGROZXR3b3JrKG5ldHdvcmspO1xuICB9O1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBpbnRlcm5hbFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgcHJpdmF0ZSBjcmVhdGVDb25uZWN0b3IgPSAoZXh0ZW5zaW9uSW5mbzogRXh0ZW5zaW9uSW5mbykgPT4ge1xuICAgIHRoaXMuX2Nvbm5lY3Rvcj8uY2xvc2UoKTtcblxuICAgIGlmICghZXh0ZW5zaW9uSW5mby5jb25uZWN0b3IgJiYgIXRoaXMuaXNEZXNrdG9wQ2hyb21lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBbRXh0ZW5zaW9uUm91dGVyXSBMZWdhY3kgZXh0ZW5zaW9uIG9ubHkgc3VwcG9ydCB0aGUgZGVza3RvcCBjaHJvbWVgLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb25uZWN0b3JQcm9taXNlOiBQcm9taXNlPFRlcnJhV2ViRXh0ZW5zaW9uQ29ubmVjdG9yPiA9XG4gICAgICBleHRlbnNpb25JbmZvLmNvbm5lY3RvclxuICAgICAgICA/IFByb21pc2UucmVzb2x2ZShleHRlbnNpb25JbmZvLmNvbm5lY3RvcigpKVxuICAgICAgICA6IFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgICAgIG5ldyBMZWdhY3lFeHRlbnNpb25Db25uZWN0b3IoZXh0ZW5zaW9uSW5mby5pZGVudGlmaWVyKSxcbiAgICAgICAgICApO1xuXG4gICAgY29ubmVjdG9yUHJvbWlzZS50aGVuKChjb25uZWN0b3IpID0+IHtcbiAgICAgIGNvbm5lY3Rvci5vcGVuKHRoaXMub3B0aW9ucy5ob3N0V2luZG93ID8/IHdpbmRvdywge1xuICAgICAgICBuZXh0OiAobmV4dFN0YXRlczogV2ViRXh0ZW5zaW9uU3RhdGVzKSA9PiB7XG4gICAgICAgICAgaWYgKG5leHRTdGF0ZXMudHlwZSA9PT0gV2ViRXh0ZW5zaW9uU3RhdHVzLklOSVRJQUxJWklORykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVzLm5leHQoe1xuICAgICAgICAgICAgICB0eXBlOiBFeHRlbnNpb25Sb3V0ZXJTdGF0dXMuSU5JVElBTElaSU5HLFxuICAgICAgICAgICAgICBuZXR3b3JrOiB0aGlzLm9wdGlvbnMuZGVmYXVsdE5ldHdvcmssXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5leHRTdGF0ZXMudHlwZSA9PT0gV2ViRXh0ZW5zaW9uU3RhdHVzLk5PX0FWQUlMQUJMRSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVzLm5leHQoe1xuICAgICAgICAgICAgICB0eXBlOiBFeHRlbnNpb25Sb3V0ZXJTdGF0dXMuTk9fQVZBSUxBQkxFLFxuICAgICAgICAgICAgICBuZXR3b3JrOiB0aGlzLm9wdGlvbnMuZGVmYXVsdE5ldHdvcmssXG4gICAgICAgICAgICAgIGlzQ29ubmVjdG9yRXhpc3RzOiB0cnVlLFxuICAgICAgICAgICAgICBpc0FwcHJvdmVkOiBuZXh0U3RhdGVzLmlzQXBwcm92ZWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5leHRTdGF0ZXMud2FsbGV0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlcy5uZXh0KHtcbiAgICAgICAgICAgICAgdHlwZTogRXh0ZW5zaW9uUm91dGVyU3RhdHVzLldBTExFVF9OT1RfQ09OTkVDVEVELFxuICAgICAgICAgICAgICBuZXR3b3JrOiBuZXh0U3RhdGVzLm5ldHdvcmssXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVzLm5leHQoe1xuICAgICAgICAgICAgICB0eXBlOiBFeHRlbnNpb25Sb3V0ZXJTdGF0dXMuV0FMTEVUX0NPTk5FQ1RFRCxcbiAgICAgICAgICAgICAgbmV0d29yazogbmV4dFN0YXRlcy5uZXR3b3JrLFxuICAgICAgICAgICAgICB3YWxsZXQ6IG5leHRTdGF0ZXMuZm9jdXNlZFdhbGxldEFkZHJlc3NcbiAgICAgICAgICAgICAgICA/IG5leHRTdGF0ZXMud2FsbGV0cy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAoaXRlbVdhbGxldCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICBpdGVtV2FsbGV0LnRlcnJhQWRkcmVzcyA9PT1cbiAgICAgICAgICAgICAgICAgICAgICBuZXh0U3RhdGVzLmZvY3VzZWRXYWxsZXRBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgKSA/PyBuZXh0U3RhdGVzLndhbGxldHNbMF1cbiAgICAgICAgICAgICAgICA6IG5leHRTdGF0ZXMud2FsbGV0c1swXSxcbiAgICAgICAgICAgICAgY29ubmVjdG9yVHlwZTpcbiAgICAgICAgICAgICAgICBjb25uZWN0b3IgaW5zdGFuY2VvZiBMZWdhY3lFeHRlbnNpb25Db25uZWN0b3JcbiAgICAgICAgICAgICAgICAgID8gRXh0ZW5zaW9uUm91dGVyQ29ubmVjdG9yVHlwZS5MRUdBQ1lcbiAgICAgICAgICAgICAgICAgIDogRXh0ZW5zaW9uUm91dGVyQ29ubmVjdG9yVHlwZS5XRUJfRVhURU5TSU9OLFxuICAgICAgICAgICAgICBzdXBwb3J0RmVhdHVyZXM6IG5ldyBTZXQoY29ubmVjdG9yLnN1cHBvcnRGZWF0dXJlcygpKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IChlcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9LFxuICAgICAgICBjb21wbGV0ZTogKCkgPT4ge30sXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fY29ubmVjdG9yID0gY29ubmVjdG9yO1xuXG4gICAgICBzdG9yZVNlc3Npb24oe1xuICAgICAgICBpZGVudGlmaWVyOiBleHRlbnNpb25JbmZvLmlkZW50aWZpZXIsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn1cbiJdfQ==