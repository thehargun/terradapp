import { WebExtensionCreateTxFailed, WebExtensionTxFailed, WebExtensionTxUnspecifiedError, WebExtensionUserDenied, } from '@terra-dev/web-extension-interface';
import { CreateTxFailed, SignBytesFailed, Timeout, TxFailed, TxUnspecifiedError, UserDenied, } from '@terra-money/use-wallet';
import { isError } from './isError';
export function mapExtensionTxError(tx, error) {
    if (isError(error, UserDenied) ||
        isError(error, Timeout) ||
        isError(error, SignBytesFailed) ||
        isError(error, CreateTxFailed) ||
        isError(error, TxFailed) ||
        isError(error, TxUnspecifiedError)) {
        return error;
    }
    else if (isError(error, WebExtensionUserDenied)) {
        return new UserDenied();
    }
    else if (isError(error, WebExtensionCreateTxFailed)) {
        return new CreateTxFailed(tx, error.message);
    }
    else if (isError(error, WebExtensionTxFailed)) {
        return new TxFailed(tx, error.txhash, error.message, null);
    }
    else if (isError(error, WebExtensionTxUnspecifiedError)) {
        return new TxUnspecifiedError(tx, error.message);
    }
    return new TxUnspecifiedError(tx, error instanceof Error ? error.message : String(error));
}
export function mapExtensionSignBytesError(bytes, error) {
    if (isError(error, UserDenied) ||
        isError(error, Timeout) ||
        isError(error, SignBytesFailed) ||
        isError(error, CreateTxFailed) ||
        isError(error, TxFailed) ||
        isError(error, TxUnspecifiedError)) {
        return error;
    }
    else if (isError(error, WebExtensionUserDenied)) {
        return new UserDenied();
    }
    return new SignBytesFailed(bytes, error instanceof Error ? error.message : String(error));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwRXh0ZW5zaW9uVHhFcnJvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9AdGVycmEtbW9uZXkvd2FsbGV0LXByb3ZpZGVyL2V4Y2VwdGlvbi9tYXBFeHRlbnNpb25UeEVycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCwwQkFBMEIsRUFDMUIsb0JBQW9CLEVBQ3BCLDhCQUE4QixFQUM5QixzQkFBc0IsR0FDdkIsTUFBTSxvQ0FBb0MsQ0FBQztBQUU1QyxPQUFPLEVBQ0wsY0FBYyxFQUNkLGVBQWUsRUFDZixPQUFPLEVBQ1AsUUFBUSxFQUNSLGtCQUFrQixFQUNsQixVQUFVLEdBQ1gsTUFBTSx5QkFBeUIsQ0FBQztBQUVqQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXBDLE1BQU0sVUFBVSxtQkFBbUIsQ0FDakMsRUFBbUIsRUFDbkIsS0FBYztJQUVkLElBQ0UsT0FBTyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUM7UUFDMUIsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUM7UUFDdkIsT0FBTyxDQUFDLEtBQUssRUFBRSxlQUFlLENBQUM7UUFDL0IsT0FBTyxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUM7UUFDOUIsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUM7UUFDeEIsT0FBTyxDQUFDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxFQUNsQztRQUNBLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsc0JBQXNCLENBQUMsRUFBRTtRQUNqRCxPQUFPLElBQUksVUFBVSxFQUFFLENBQUM7S0FDekI7U0FBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsMEJBQTBCLENBQUMsRUFBRTtRQUNyRCxPQUFPLElBQUksY0FBYyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDOUM7U0FBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsb0JBQW9CLENBQUMsRUFBRTtRQUMvQyxPQUFPLElBQUksUUFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDNUQ7U0FBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsOEJBQThCLENBQUMsRUFBRTtRQUN6RCxPQUFPLElBQUksa0JBQWtCLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNsRDtJQUNELE9BQU8sSUFBSSxrQkFBa0IsQ0FDM0IsRUFBRSxFQUNGLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FDdkQsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsMEJBQTBCLENBQ3hDLEtBQWEsRUFDYixLQUFjO0lBRWQsSUFDRSxPQUFPLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQztRQUMxQixPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQztRQUN2QixPQUFPLENBQUMsS0FBSyxFQUFFLGVBQWUsQ0FBQztRQUMvQixPQUFPLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQztRQUM5QixPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQztRQUN4QixPQUFPLENBQUMsS0FBSyxFQUFFLGtCQUFrQixDQUFDLEVBQ2xDO1FBQ0EsT0FBTyxLQUFLLENBQUM7S0FDZDtTQUFNLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxzQkFBc0IsQ0FBQyxFQUFFO1FBQ2pELE9BQU8sSUFBSSxVQUFVLEVBQUUsQ0FBQztLQUN6QjtJQUNELE9BQU8sSUFBSSxlQUFlLENBQ3hCLEtBQUssRUFDTCxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQ3ZELENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgV2ViRXh0ZW5zaW9uQ3JlYXRlVHhGYWlsZWQsXG4gIFdlYkV4dGVuc2lvblR4RmFpbGVkLFxuICBXZWJFeHRlbnNpb25UeFVuc3BlY2lmaWVkRXJyb3IsXG4gIFdlYkV4dGVuc2lvblVzZXJEZW5pZWQsXG59IGZyb20gJ0B0ZXJyYS1kZXYvd2ViLWV4dGVuc2lvbi1pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ3JlYXRlVHhPcHRpb25zIH0gZnJvbSAnQHRlcnJhLW1vbmV5L3RlcnJhLmpzJztcbmltcG9ydCB7XG4gIENyZWF0ZVR4RmFpbGVkLFxuICBTaWduQnl0ZXNGYWlsZWQsXG4gIFRpbWVvdXQsXG4gIFR4RmFpbGVkLFxuICBUeFVuc3BlY2lmaWVkRXJyb3IsXG4gIFVzZXJEZW5pZWQsXG59IGZyb20gJ0B0ZXJyYS1tb25leS91c2Utd2FsbGV0JztcbmltcG9ydCAqIGFzIEJ1ZmZlciBmcm9tICdidWZmZXInO1xuaW1wb3J0IHsgaXNFcnJvciB9IGZyb20gJy4vaXNFcnJvcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBFeHRlbnNpb25UeEVycm9yKFxuICB0eDogQ3JlYXRlVHhPcHRpb25zLFxuICBlcnJvcjogdW5rbm93bixcbik6IEVycm9yIHtcbiAgaWYgKFxuICAgIGlzRXJyb3IoZXJyb3IsIFVzZXJEZW5pZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVGltZW91dCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBTaWduQnl0ZXNGYWlsZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgQ3JlYXRlVHhGYWlsZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVHhGYWlsZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVHhVbnNwZWNpZmllZEVycm9yKVxuICApIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH0gZWxzZSBpZiAoaXNFcnJvcihlcnJvciwgV2ViRXh0ZW5zaW9uVXNlckRlbmllZCkpIHtcbiAgICByZXR1cm4gbmV3IFVzZXJEZW5pZWQoKTtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXZWJFeHRlbnNpb25DcmVhdGVUeEZhaWxlZCkpIHtcbiAgICByZXR1cm4gbmV3IENyZWF0ZVR4RmFpbGVkKHR4LCBlcnJvci5tZXNzYWdlKTtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXZWJFeHRlbnNpb25UeEZhaWxlZCkpIHtcbiAgICByZXR1cm4gbmV3IFR4RmFpbGVkKHR4LCBlcnJvci50eGhhc2gsIGVycm9yLm1lc3NhZ2UsIG51bGwpO1xuICB9IGVsc2UgaWYgKGlzRXJyb3IoZXJyb3IsIFdlYkV4dGVuc2lvblR4VW5zcGVjaWZpZWRFcnJvcikpIHtcbiAgICByZXR1cm4gbmV3IFR4VW5zcGVjaWZpZWRFcnJvcih0eCwgZXJyb3IubWVzc2FnZSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBUeFVuc3BlY2lmaWVkRXJyb3IoXG4gICAgdHgsXG4gICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwRXh0ZW5zaW9uU2lnbkJ5dGVzRXJyb3IoXG4gIGJ5dGVzOiBCdWZmZXIsXG4gIGVycm9yOiB1bmtub3duLFxuKTogRXJyb3Ige1xuICBpZiAoXG4gICAgaXNFcnJvcihlcnJvciwgVXNlckRlbmllZCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBUaW1lb3V0KSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIFNpZ25CeXRlc0ZhaWxlZCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBDcmVhdGVUeEZhaWxlZCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBUeEZhaWxlZCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBUeFVuc3BlY2lmaWVkRXJyb3IpXG4gICkge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXZWJFeHRlbnNpb25Vc2VyRGVuaWVkKSkge1xuICAgIHJldHVybiBuZXcgVXNlckRlbmllZCgpO1xuICB9XG4gIHJldHVybiBuZXcgU2lnbkJ5dGVzRmFpbGVkKFxuICAgIGJ5dGVzLFxuICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSxcbiAgKTtcbn1cbiJdfQ==