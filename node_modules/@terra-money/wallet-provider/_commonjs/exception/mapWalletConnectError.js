"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapWalletConnectError = void 0;
const use_wallet_1 = require("@terra-money/use-wallet");
const walletconnect_1 = require("../modules/walletconnect");
const isError_1 = require("./isError");
function mapWalletConnectError(tx, error) {
    if ((0, isError_1.isError)(error, use_wallet_1.UserDenied) ||
        (0, isError_1.isError)(error, use_wallet_1.Timeout) ||
        (0, isError_1.isError)(error, use_wallet_1.CreateTxFailed) ||
        (0, isError_1.isError)(error, use_wallet_1.TxFailed) ||
        (0, isError_1.isError)(error, use_wallet_1.TxUnspecifiedError)) {
        return error;
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectUserDenied)) {
        return new use_wallet_1.UserDenied();
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectTimeout)) {
        return new use_wallet_1.Timeout(error.message);
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectCreateTxFailed)) {
        return new use_wallet_1.CreateTxFailed(tx, error.message);
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectTxFailed)) {
        return new use_wallet_1.TxFailed(tx, error.txhash, error.message, null);
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectTxUnspecifiedError)) {
        return new use_wallet_1.TxUnspecifiedError(tx, error.message);
    }
    return new use_wallet_1.TxUnspecifiedError(tx, error instanceof Error ? error.message : String(error));
}
exports.mapWalletConnectError = mapWalletConnectError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwV2FsbGV0Q29ubmVjdEVycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL0B0ZXJyYS1tb25leS93YWxsZXQtcHJvdmlkZXIvZXhjZXB0aW9uL21hcFdhbGxldENvbm5lY3RFcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx3REFNaUM7QUFDakMsNERBTWtDO0FBQ2xDLHVDQUFvQztBQUVwQyxTQUFnQixxQkFBcUIsQ0FDbkMsRUFBbUIsRUFDbkIsS0FBYztJQUVkLElBQ0UsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSx1QkFBVSxDQUFDO1FBQzFCLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsb0JBQU8sQ0FBQztRQUN2QixJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLDJCQUFjLENBQUM7UUFDOUIsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxxQkFBUSxDQUFDO1FBQ3hCLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsK0JBQWtCLENBQUMsRUFDbEM7UUFDQSxPQUFPLEtBQUssQ0FBQztLQUNkO1NBQU0sSUFBSSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLHVDQUF1QixDQUFDLEVBQUU7UUFDbEQsT0FBTyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztLQUN6QjtTQUFNLElBQUksSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxvQ0FBb0IsQ0FBQyxFQUFFO1FBQy9DLE9BQU8sSUFBSSxvQkFBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNuQztTQUFNLElBQUksSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSwyQ0FBMkIsQ0FBQyxFQUFFO1FBQ3RELE9BQU8sSUFBSSwyQkFBYyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDOUM7U0FBTSxJQUFJLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUscUNBQXFCLENBQUMsRUFBRTtRQUNoRCxPQUFPLElBQUkscUJBQVEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzVEO1NBQU0sSUFBSSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLCtDQUErQixDQUFDLEVBQUU7UUFDMUQsT0FBTyxJQUFJLCtCQUFrQixDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDbEQ7SUFDRCxPQUFPLElBQUksK0JBQWtCLENBQzNCLEVBQUUsRUFDRixLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQ3ZELENBQUM7QUFDSixDQUFDO0FBM0JELHNEQTJCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENyZWF0ZVR4T3B0aW9ucyB9IGZyb20gJ0B0ZXJyYS1tb25leS90ZXJyYS5qcyc7XG5pbXBvcnQge1xuICBDcmVhdGVUeEZhaWxlZCxcbiAgVGltZW91dCxcbiAgVHhGYWlsZWQsXG4gIFR4VW5zcGVjaWZpZWRFcnJvcixcbiAgVXNlckRlbmllZCxcbn0gZnJvbSAnQHRlcnJhLW1vbmV5L3VzZS13YWxsZXQnO1xuaW1wb3J0IHtcbiAgV2FsbGV0Q29ubmVjdENyZWF0ZVR4RmFpbGVkLFxuICBXYWxsZXRDb25uZWN0VGltZW91dCxcbiAgV2FsbGV0Q29ubmVjdFR4RmFpbGVkLFxuICBXYWxsZXRDb25uZWN0VHhVbnNwZWNpZmllZEVycm9yLFxuICBXYWxsZXRDb25uZWN0VXNlckRlbmllZCxcbn0gZnJvbSAnLi4vbW9kdWxlcy93YWxsZXRjb25uZWN0JztcbmltcG9ydCB7IGlzRXJyb3IgfSBmcm9tICcuL2lzRXJyb3InO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFwV2FsbGV0Q29ubmVjdEVycm9yKFxuICB0eDogQ3JlYXRlVHhPcHRpb25zLFxuICBlcnJvcjogdW5rbm93bixcbik6IEVycm9yIHtcbiAgaWYgKFxuICAgIGlzRXJyb3IoZXJyb3IsIFVzZXJEZW5pZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVGltZW91dCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBDcmVhdGVUeEZhaWxlZCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBUeEZhaWxlZCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBUeFVuc3BlY2lmaWVkRXJyb3IpXG4gICkge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXYWxsZXRDb25uZWN0VXNlckRlbmllZCkpIHtcbiAgICByZXR1cm4gbmV3IFVzZXJEZW5pZWQoKTtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXYWxsZXRDb25uZWN0VGltZW91dCkpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVvdXQoZXJyb3IubWVzc2FnZSk7XG4gIH0gZWxzZSBpZiAoaXNFcnJvcihlcnJvciwgV2FsbGV0Q29ubmVjdENyZWF0ZVR4RmFpbGVkKSkge1xuICAgIHJldHVybiBuZXcgQ3JlYXRlVHhGYWlsZWQodHgsIGVycm9yLm1lc3NhZ2UpO1xuICB9IGVsc2UgaWYgKGlzRXJyb3IoZXJyb3IsIFdhbGxldENvbm5lY3RUeEZhaWxlZCkpIHtcbiAgICByZXR1cm4gbmV3IFR4RmFpbGVkKHR4LCBlcnJvci50eGhhc2gsIGVycm9yLm1lc3NhZ2UsIG51bGwpO1xuICB9IGVsc2UgaWYgKGlzRXJyb3IoZXJyb3IsIFdhbGxldENvbm5lY3RUeFVuc3BlY2lmaWVkRXJyb3IpKSB7XG4gICAgcmV0dXJuIG5ldyBUeFVuc3BlY2lmaWVkRXJyb3IodHgsIGVycm9yLm1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiBuZXcgVHhVbnNwZWNpZmllZEVycm9yKFxuICAgIHR4LFxuICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSxcbiAgKTtcbn1cbiJdfQ==