"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapExtensionSignBytesError = exports.mapExtensionTxError = void 0;
const web_extension_interface_1 = require("@terra-dev/web-extension-interface");
const use_wallet_1 = require("@terra-money/use-wallet");
const isError_1 = require("./isError");
function mapExtensionTxError(tx, error) {
    if ((0, isError_1.isError)(error, use_wallet_1.UserDenied) ||
        (0, isError_1.isError)(error, use_wallet_1.Timeout) ||
        (0, isError_1.isError)(error, use_wallet_1.SignBytesFailed) ||
        (0, isError_1.isError)(error, use_wallet_1.CreateTxFailed) ||
        (0, isError_1.isError)(error, use_wallet_1.TxFailed) ||
        (0, isError_1.isError)(error, use_wallet_1.TxUnspecifiedError)) {
        return error;
    }
    else if ((0, isError_1.isError)(error, web_extension_interface_1.WebExtensionUserDenied)) {
        return new use_wallet_1.UserDenied();
    }
    else if ((0, isError_1.isError)(error, web_extension_interface_1.WebExtensionCreateTxFailed)) {
        return new use_wallet_1.CreateTxFailed(tx, error.message);
    }
    else if ((0, isError_1.isError)(error, web_extension_interface_1.WebExtensionTxFailed)) {
        return new use_wallet_1.TxFailed(tx, error.txhash, error.message, null);
    }
    else if ((0, isError_1.isError)(error, web_extension_interface_1.WebExtensionTxUnspecifiedError)) {
        return new use_wallet_1.TxUnspecifiedError(tx, error.message);
    }
    return new use_wallet_1.TxUnspecifiedError(tx, error instanceof Error ? error.message : String(error));
}
exports.mapExtensionTxError = mapExtensionTxError;
function mapExtensionSignBytesError(bytes, error) {
    if ((0, isError_1.isError)(error, use_wallet_1.UserDenied) ||
        (0, isError_1.isError)(error, use_wallet_1.Timeout) ||
        (0, isError_1.isError)(error, use_wallet_1.SignBytesFailed) ||
        (0, isError_1.isError)(error, use_wallet_1.CreateTxFailed) ||
        (0, isError_1.isError)(error, use_wallet_1.TxFailed) ||
        (0, isError_1.isError)(error, use_wallet_1.TxUnspecifiedError)) {
        return error;
    }
    else if ((0, isError_1.isError)(error, web_extension_interface_1.WebExtensionUserDenied)) {
        return new use_wallet_1.UserDenied();
    }
    return new use_wallet_1.SignBytesFailed(bytes, error instanceof Error ? error.message : String(error));
}
exports.mapExtensionSignBytesError = mapExtensionSignBytesError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwRXh0ZW5zaW9uVHhFcnJvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AdGVycmEtbW9uZXkvd2FsbGV0LXByb3ZpZGVyL2V4Y2VwdGlvbi9tYXBFeHRlbnNpb25UeEVycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGdGQUs0QztBQUU1Qyx3REFPaUM7QUFFakMsdUNBQW9DO0FBRXBDLFNBQWdCLG1CQUFtQixDQUNqQyxFQUFtQixFQUNuQixLQUFjO0lBRWQsSUFDRSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLHVCQUFVLENBQUM7UUFDMUIsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxvQkFBTyxDQUFDO1FBQ3ZCLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsNEJBQWUsQ0FBQztRQUMvQixJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLDJCQUFjLENBQUM7UUFDOUIsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxxQkFBUSxDQUFDO1FBQ3hCLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsK0JBQWtCLENBQUMsRUFDbEM7UUFDQSxPQUFPLEtBQUssQ0FBQztLQUNkO1NBQU0sSUFBSSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLGdEQUFzQixDQUFDLEVBQUU7UUFDakQsT0FBTyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztLQUN6QjtTQUFNLElBQUksSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxvREFBMEIsQ0FBQyxFQUFFO1FBQ3JELE9BQU8sSUFBSSwyQkFBYyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDOUM7U0FBTSxJQUFJLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsOENBQW9CLENBQUMsRUFBRTtRQUMvQyxPQUFPLElBQUkscUJBQVEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzVEO1NBQU0sSUFBSSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLHdEQUE4QixDQUFDLEVBQUU7UUFDekQsT0FBTyxJQUFJLCtCQUFrQixDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDbEQ7SUFDRCxPQUFPLElBQUksK0JBQWtCLENBQzNCLEVBQUUsRUFDRixLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQ3ZELENBQUM7QUFDSixDQUFDO0FBMUJELGtEQTBCQztBQUVELFNBQWdCLDBCQUEwQixDQUN4QyxLQUFhLEVBQ2IsS0FBYztJQUVkLElBQ0UsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSx1QkFBVSxDQUFDO1FBQzFCLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsb0JBQU8sQ0FBQztRQUN2QixJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLDRCQUFlLENBQUM7UUFDL0IsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSwyQkFBYyxDQUFDO1FBQzlCLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUscUJBQVEsQ0FBQztRQUN4QixJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLCtCQUFrQixDQUFDLEVBQ2xDO1FBQ0EsT0FBTyxLQUFLLENBQUM7S0FDZDtTQUFNLElBQUksSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxnREFBc0IsQ0FBQyxFQUFFO1FBQ2pELE9BQU8sSUFBSSx1QkFBVSxFQUFFLENBQUM7S0FDekI7SUFDRCxPQUFPLElBQUksNEJBQWUsQ0FDeEIsS0FBSyxFQUNMLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FDdkQsQ0FBQztBQUNKLENBQUM7QUFwQkQsZ0VBb0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgV2ViRXh0ZW5zaW9uQ3JlYXRlVHhGYWlsZWQsXG4gIFdlYkV4dGVuc2lvblR4RmFpbGVkLFxuICBXZWJFeHRlbnNpb25UeFVuc3BlY2lmaWVkRXJyb3IsXG4gIFdlYkV4dGVuc2lvblVzZXJEZW5pZWQsXG59IGZyb20gJ0B0ZXJyYS1kZXYvd2ViLWV4dGVuc2lvbi1pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ3JlYXRlVHhPcHRpb25zIH0gZnJvbSAnQHRlcnJhLW1vbmV5L3RlcnJhLmpzJztcbmltcG9ydCB7XG4gIENyZWF0ZVR4RmFpbGVkLFxuICBTaWduQnl0ZXNGYWlsZWQsXG4gIFRpbWVvdXQsXG4gIFR4RmFpbGVkLFxuICBUeFVuc3BlY2lmaWVkRXJyb3IsXG4gIFVzZXJEZW5pZWQsXG59IGZyb20gJ0B0ZXJyYS1tb25leS91c2Utd2FsbGV0JztcbmltcG9ydCAqIGFzIEJ1ZmZlciBmcm9tICdidWZmZXInO1xuaW1wb3J0IHsgaXNFcnJvciB9IGZyb20gJy4vaXNFcnJvcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBFeHRlbnNpb25UeEVycm9yKFxuICB0eDogQ3JlYXRlVHhPcHRpb25zLFxuICBlcnJvcjogdW5rbm93bixcbik6IEVycm9yIHtcbiAgaWYgKFxuICAgIGlzRXJyb3IoZXJyb3IsIFVzZXJEZW5pZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVGltZW91dCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBTaWduQnl0ZXNGYWlsZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgQ3JlYXRlVHhGYWlsZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVHhGYWlsZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVHhVbnNwZWNpZmllZEVycm9yKVxuICApIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH0gZWxzZSBpZiAoaXNFcnJvcihlcnJvciwgV2ViRXh0ZW5zaW9uVXNlckRlbmllZCkpIHtcbiAgICByZXR1cm4gbmV3IFVzZXJEZW5pZWQoKTtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXZWJFeHRlbnNpb25DcmVhdGVUeEZhaWxlZCkpIHtcbiAgICByZXR1cm4gbmV3IENyZWF0ZVR4RmFpbGVkKHR4LCBlcnJvci5tZXNzYWdlKTtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXZWJFeHRlbnNpb25UeEZhaWxlZCkpIHtcbiAgICByZXR1cm4gbmV3IFR4RmFpbGVkKHR4LCBlcnJvci50eGhhc2gsIGVycm9yLm1lc3NhZ2UsIG51bGwpO1xuICB9IGVsc2UgaWYgKGlzRXJyb3IoZXJyb3IsIFdlYkV4dGVuc2lvblR4VW5zcGVjaWZpZWRFcnJvcikpIHtcbiAgICByZXR1cm4gbmV3IFR4VW5zcGVjaWZpZWRFcnJvcih0eCwgZXJyb3IubWVzc2FnZSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBUeFVuc3BlY2lmaWVkRXJyb3IoXG4gICAgdHgsXG4gICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwRXh0ZW5zaW9uU2lnbkJ5dGVzRXJyb3IoXG4gIGJ5dGVzOiBCdWZmZXIsXG4gIGVycm9yOiB1bmtub3duLFxuKTogRXJyb3Ige1xuICBpZiAoXG4gICAgaXNFcnJvcihlcnJvciwgVXNlckRlbmllZCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBUaW1lb3V0KSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIFNpZ25CeXRlc0ZhaWxlZCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBDcmVhdGVUeEZhaWxlZCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBUeEZhaWxlZCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBUeFVuc3BlY2lmaWVkRXJyb3IpXG4gICkge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXZWJFeHRlbnNpb25Vc2VyRGVuaWVkKSkge1xuICAgIHJldHVybiBuZXcgVXNlckRlbmllZCgpO1xuICB9XG4gIHJldHVybiBuZXcgU2lnbkJ5dGVzRmFpbGVkKFxuICAgIGJ5dGVzLFxuICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSxcbiAgKTtcbn1cbiJdfQ==