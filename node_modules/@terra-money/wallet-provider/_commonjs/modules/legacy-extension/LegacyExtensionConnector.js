"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegacyExtensionConnector = void 0;
const web_extension_interface_1 = require("@terra-dev/web-extension-interface");
const terra_js_1 = require("@terra-money/terra.js");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const createFixedExtension_1 = require("./createFixedExtension");
const supportFeatures = ['post', 'sign'];
class LegacyExtensionConnector {
    constructor(identifier) {
        this.identifier = identifier;
        this.hostWindow = null;
        this.statesSubscription = null;
        this.open = (hostWindow, statesObserver) => {
            this.hostWindow = hostWindow;
            this.statesSubscription = this._states
                .pipe((0, operators_1.filter)((states) => !!states))
                .subscribe(statesObserver);
            this.refetchStates();
        };
        this.close = () => {
            this._extension.disconnect();
        };
        this.requestApproval = () => {
            this.recheckStates();
        };
        this.refetchStates = () => {
            this.recheckStates();
        };
        this.post = (terraAddress, tx) => {
            const subject = new rxjs_1.BehaviorSubject({
                status: web_extension_interface_1.WebExtensionTxStatus.PROGRESS,
            });
            this._extension
                .post(tx)
                .then(({ payload }) => {
                subject.next({
                    status: web_extension_interface_1.WebExtensionTxStatus.SUCCEED,
                    payload: payload.result,
                });
                subject.complete();
            })
                .catch((error) => subject.error(error));
            return subject.asObservable();
        };
        this.sign = (terraAddress, tx) => {
            const subject = new rxjs_1.BehaviorSubject({
                status: web_extension_interface_1.WebExtensionTxStatus.PROGRESS,
            });
            this._extension
                .sign(tx)
                .then(({ payload }) => {
                subject.next({
                    status: web_extension_interface_1.WebExtensionTxStatus.SUCCEED,
                    payload: payload.result,
                });
                subject.complete();
            })
                .catch((error) => subject.error(error));
            return subject.asObservable();
        };
        this.signBytes = () => {
            throw new Error('[LegacyExtensionConnector] does not support signBytes()');
        };
        this.hasCW20Tokens = () => {
            throw new Error('[LegacyExtensionConnector] does not support hasCW20Tokens()');
        };
        this.addCW20Tokens = () => {
            throw new Error('[LegacyExtensionConnector] does not support addCW20Tokens()');
        };
        this.hasNetwork = () => {
            throw new Error('[LegacyExtensionConnector] does not support hasNetwork()');
        };
        this.addNetwork = () => {
            throw new Error('[LegacyExtensionConnector] does not support addNetwork()');
        };
        // ---------------------------------------------
        // internal
        // ---------------------------------------------
        this.recheckStates = async () => {
            if (this._extension.inTransactionProgress()) {
                return;
            }
            const infoResult = await this._extension.info();
            const connectResult = await this._extension.connect();
            if (connectResult.address && terra_js_1.AccAddress.validate(connectResult.address)) {
                this._states.next({
                    type: web_extension_interface_1.WebExtensionStatus.READY,
                    network: infoResult,
                    focusedWalletAddress: connectResult.address,
                    wallets: [
                        {
                            name: '',
                            terraAddress: connectResult.address,
                            design: 'terra',
                        },
                    ],
                });
            }
            else {
                this._states.next({
                    type: web_extension_interface_1.WebExtensionStatus.READY,
                    network: infoResult,
                    focusedWalletAddress: undefined,
                    wallets: [],
                });
            }
        };
        this._states = new rxjs_1.BehaviorSubject({
            type: web_extension_interface_1.WebExtensionStatus.INITIALIZING,
        });
        this._extension = (0, createFixedExtension_1.createFixedExtension)(identifier);
    }
    supportFeatures() {
        return supportFeatures;
    }
}
exports.LegacyExtensionConnector = LegacyExtensionConnector;
//# sourceMappingURL=data:application/json;base64,