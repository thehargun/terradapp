"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletController = void 0;
const web_extension_interface_1 = require("@terra-dev/web-extension-interface");
const terra_js_1 = require("@terra-money/terra.js");
const use_wallet_1 = require("@terra-money/use-wallet");
const fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const env_1 = require("./env");
const mapExtensionTxError_1 = require("./exception/mapExtensionTxError");
const mapWalletConnectError_1 = require("./exception/mapWalletConnectError");
const extension_router_1 = require("./modules/extension-router");
const multiChannel_1 = require("./modules/extension-router/multiChannel");
const readonly_wallet_1 = require("./modules/readonly-wallet");
const walletconnect_1 = require("./modules/walletconnect");
const browser_check_1 = require("./utils/browser-check");
const checkExtensionReady_1 = require("./utils/checkExtensionReady");
const CONNECTIONS = {
    [use_wallet_1.ConnectType.READONLY]: {
        type: use_wallet_1.ConnectType.READONLY,
        name: 'View an address',
        icon: 'https://assets.terra.money/icon/station-extension/icon.png',
    },
    [use_wallet_1.ConnectType.WALLETCONNECT]: {
        type: use_wallet_1.ConnectType.WALLETCONNECT,
        name: 'Terra Station Mobile',
        icon: 'https://assets.terra.money/icon/station-extension/icon.png',
    },
};
const DEFAULT_WAITING_CHROME_EXTENSION_INSTALL_CHECK = 1000 * 3;
const WALLETCONNECT_SUPPORT_FEATURES = new Set([
    'post',
]);
const EMPTY_SUPPORT_FEATURES = new Set();
class WalletController {
    constructor(options) {
        var _a;
        this.options = options;
        this.extension = null;
        this.walletConnect = null;
        this.readonlyWallet = null;
        this.disableReadonlyWallet = null;
        this.disableExtension = null;
        this.disableWalletConnect = null;
        /** @see Wallet#isChromeExtensionCompatibleBrowser */
        this.isChromeExtensionCompatibleBrowser = () => {
            var _a;
            return ((_a = this.options.dangerously__chromeExtensionCompatibleBrowserCheck) !== null && _a !== void 0 ? _a : env_1.DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK)(navigator.userAgent);
        };
        /** @see Wallet#availableConnectTypes */
        this.availableConnectTypes = () => {
            return this._availableConnectTypes.asObservable();
        };
        /** @see Wallet#availableConnections */
        this.availableConnections = () => {
            return this._availableConnectTypes.pipe((0, operators_1.map)((connectTypes) => {
                const connections = [];
                for (const connectType of connectTypes) {
                    if (connectType === use_wallet_1.ConnectType.EXTENSION) {
                        const terraExtensions = (0, multiChannel_1.getTerraExtensions)();
                        for (const terraExtension of terraExtensions) {
                            connections.push({
                                type: use_wallet_1.ConnectType.EXTENSION,
                                identifier: terraExtension.identifier,
                                name: terraExtension.name,
                                icon: terraExtension.icon,
                            });
                        }
                    }
                    else {
                        connections.push(CONNECTIONS[connectType]);
                    }
                }
                return connections;
            }));
        };
        /** @see Wallet#availableInstallTypes */
        this.availableInstallTypes = () => {
            return this._availableInstallTypes.asObservable();
        };
        /**
         * @see Wallet#status
         * @see Wallet#network
         * @see Wallet#wallets
         */
        this.states = () => {
            return this._states.asObservable();
        };
        /** @see Wallet#recheckStatus */
        this.refetchStates = () => {
            var _a;
            if (this.disableExtension) {
                (_a = this.extension) === null || _a === void 0 ? void 0 : _a.refetchStates();
            }
        };
        /** @see Wallet#install */
        this.install = (type) => {
            if (type === use_wallet_1.ConnectType.EXTENSION) {
                // TODO separate install links by browser types
                window.open(env_1.CHROME_EXTENSION_INSTALL_URL, '_blank');
            }
            else {
                console.warn(`[WalletController] ConnectType "${type}" does not support install() function`);
            }
        };
        /** @see Wallet#connect */
        this.connect = (type, identifier) => {
            var _a, _b, _c;
            switch (type) {
                case use_wallet_1.ConnectType.READONLY:
                    const networks = Object.keys(this.options.walletConnectChainIds).map((chainId) => this.options.walletConnectChainIds[+chainId]);
                    const createReadonlyWalletSession = (_c = (_b = (_a = this.options).createReadonlyWalletSession) === null || _b === void 0 ? void 0 : _b.call(_a, networks)) !== null && _c !== void 0 ? _c : (0, readonly_wallet_1.readonlyWalletModal)({ networks });
                    createReadonlyWalletSession.then((readonlyWalletSession) => {
                        if (readonlyWalletSession) {
                            this.enableReadonlyWallet((0, readonly_wallet_1.connect)(readonlyWalletSession));
                        }
                    });
                    break;
                case use_wallet_1.ConnectType.WALLETCONNECT:
                    this.enableWalletConnect((0, walletconnect_1.connect)(this.options));
                    break;
                case use_wallet_1.ConnectType.EXTENSION:
                    if (!this.extension) {
                        throw new Error(`extension instance is not created!`);
                    }
                    this.extension.connect(identifier);
                    this.enableExtension();
                    break;
                default:
                    throw new Error(`Unknown ConnectType!`);
            }
        };
        /** @see Wallet#connectReadonly */
        this.connectReadonly = (terraAddress, network) => {
            this.enableReadonlyWallet((0, readonly_wallet_1.connect)({
                terraAddress,
                network,
            }));
        };
        /** @see Wallet#disconnect */
        this.disconnect = () => {
            var _a, _b, _c;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            this.disableReadonlyWallet = null;
            (_b = this.disableExtension) === null || _b === void 0 ? void 0 : _b.call(this);
            this.disableExtension = null;
            (_c = this.disableWalletConnect) === null || _c === void 0 ? void 0 : _c.call(this);
            this.disableWalletConnect = null;
            this.updateStates(this._notConnected);
        };
        /**
         * @see Wallet#post
         * @param tx
         * @param terraAddress only available new extension
         */
        this.post = async (tx, terraAddress) => {
            // ---------------------------------------------
            // extension
            // ---------------------------------------------
            if (this.disableExtension) {
                return new Promise((resolve, reject) => {
                    if (!this.extension) {
                        reject(new Error(`extension instance not created!`));
                        return;
                    }
                    const subscription = this.extension.post(tx, terraAddress).subscribe({
                        next: (txResult) => {
                            if (txResult.status === web_extension_interface_1.WebExtensionTxStatus.SUCCEED) {
                                resolve({
                                    ...tx,
                                    result: txResult.payload,
                                    success: true,
                                });
                                subscription.unsubscribe();
                            }
                        },
                        error: (error) => {
                            reject((0, mapExtensionTxError_1.mapExtensionTxError)(tx, error));
                            subscription.unsubscribe();
                        },
                    });
                });
            }
            // ---------------------------------------------
            // wallet connect
            // ---------------------------------------------
            else if (this.walletConnect) {
                return this.walletConnect
                    .post(tx)
                    .then((result) => ({
                    ...tx,
                    result,
                    success: true,
                }))
                    .catch((error) => {
                    throw (0, mapWalletConnectError_1.mapWalletConnectError)(tx, error);
                });
            }
            else {
                throw new Error(`There are no connections that can be posting tx!`);
            }
        };
        /**
         * @see Wallet#sign
         * @param tx
         * @param terraAddress only available new extension
         */
        this.sign = async (tx, terraAddress) => {
            if (this.disableExtension) {
                return new Promise((resolve, reject) => {
                    if (!this.extension) {
                        reject(new Error(`extension instance is not created!`));
                        return;
                    }
                    const subscription = this.extension.sign(tx, terraAddress).subscribe({
                        next: (txResult) => {
                            if (txResult.status === web_extension_interface_1.WebExtensionTxStatus.SUCCEED) {
                                resolve({
                                    ...tx,
                                    result: terra_js_1.Tx.fromData(txResult.payload),
                                    success: true,
                                });
                                subscription.unsubscribe();
                            }
                        },
                        error: (error) => {
                            reject((0, mapExtensionTxError_1.mapExtensionTxError)(tx, error));
                            subscription.unsubscribe();
                        },
                    });
                });
            }
            throw new Error(`sign() method only available on extension`);
        };
        /**
         * @see Wallet#signBytes
         * @param bytes
         * @param terraAddress only available new extension
         */
        this.signBytes = async (bytes, terraAddress) => {
            if (this.disableExtension) {
                return new Promise((resolve, reject) => {
                    if (!this.extension) {
                        reject(new Error(`extension instance is not created!`));
                        return;
                    }
                    const subscription = this.extension
                        .signBytes(bytes, terraAddress)
                        .subscribe({
                        next: (txResult) => {
                            if (txResult.status === web_extension_interface_1.WebExtensionTxStatus.SUCCEED) {
                                resolve({
                                    result: {
                                        recid: txResult.payload.recid,
                                        signature: Uint8Array.from(Buffer.from(txResult.payload.signature, 'base64')),
                                        public_key: txResult.payload.public_key
                                            ? terra_js_1.PublicKey.fromData(txResult.payload.public_key)
                                            : undefined,
                                    },
                                    success: true,
                                });
                                subscription.unsubscribe();
                            }
                        },
                        error: (error) => {
                            reject((0, mapExtensionTxError_1.mapExtensionSignBytesError)(bytes, error));
                            subscription.unsubscribe();
                        },
                    });
                });
            }
            throw new Error(`signBytes() method only available on extension`);
            // TODO implements signBytes() to other connect types
        };
        /**
         * @see Wallet#hasCW20Tokens
         * @param chainID
         * @param tokenAddrs Token addresses
         */
        this.hasCW20Tokens = async (chainID, ...tokenAddrs) => {
            if (this.availableExtensionFeature('cw20-token')) {
                return this.extension.hasCW20Tokens(chainID, ...tokenAddrs);
            }
            throw new Error(`Does not support hasCW20Tokens() on this connection`);
        };
        /**
         * @see Wallet#addCW20Tokens
         * @param chainID
         * @param tokenAddrs Token addresses
         */
        this.addCW20Tokens = async (chainID, ...tokenAddrs) => {
            if (this.availableExtensionFeature('cw20-token')) {
                return this.extension.addCW20Tokens(chainID, ...tokenAddrs);
            }
            throw new Error(`Does not support addCW20Tokens() on this connection`);
        };
        /**
         * @see Wallet#hasNetwork
         * @param network
         */
        this.hasNetwork = (network) => {
            if (this.availableExtensionFeature('network')) {
                return this.extension.hasNetwork(network);
            }
            throw new Error(`Does not support hasNetwork() on this connection`);
        };
        /**
         * @see Wallet#hasNetwork
         * @param network
         */
        this.addNetwork = (network) => {
            if (this.availableExtensionFeature('network')) {
                return this.extension.addNetwork(network);
            }
            throw new Error(`Does not support addNetwork() on this connection`);
        };
        // ================================================================
        // internal
        // connect type changing
        // ================================================================
        this.availableExtensionFeature = (feature) => {
            if (this.disableExtension && this.extension) {
                const states = this.extension.getLastStates();
                return (states.type === extension_router_1.ExtensionRouterStatus.WALLET_CONNECTED &&
                    states.supportFeatures.has(feature));
            }
        };
        this.updateStates = (next) => {
            const prev = this._states.getValue();
            if (next.status === use_wallet_1.WalletStatus.WALLET_CONNECTED &&
                next.wallets.length === 0) {
                next = {
                    status: use_wallet_1.WalletStatus.WALLET_NOT_CONNECTED,
                    network: next.network,
                };
            }
            if (prev.status !== next.status || !(0, fast_deep_equal_1.default)(prev, next)) {
                this._states.next(next);
            }
        };
        this.enableReadonlyWallet = (readonlyWallet) => {
            var _a, _b, _c;
            (_a = this.disableWalletConnect) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableExtension) === null || _b === void 0 ? void 0 : _b.call(this);
            if (this.readonlyWallet === readonlyWallet ||
                (((_c = this.readonlyWallet) === null || _c === void 0 ? void 0 : _c.terraAddress) === readonlyWallet.terraAddress &&
                    this.readonlyWallet.network === readonlyWallet.network)) {
                return;
            }
            if (this.readonlyWallet) {
                this.readonlyWallet.disconnect();
            }
            this.readonlyWallet = readonlyWallet;
            this.updateStates({
                status: use_wallet_1.WalletStatus.WALLET_CONNECTED,
                network: readonlyWallet.network,
                wallets: [
                    {
                        connectType: use_wallet_1.ConnectType.READONLY,
                        terraAddress: readonlyWallet.terraAddress,
                        design: 'readonly',
                    },
                ],
                supportFeatures: EMPTY_SUPPORT_FEATURES,
            });
            this.disableReadonlyWallet = () => {
                readonlyWallet.disconnect();
                this.readonlyWallet = null;
                this.disableReadonlyWallet = null;
            };
        };
        this.enableExtension = () => {
            var _a, _b;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableWalletConnect) === null || _b === void 0 ? void 0 : _b.call(this);
            if (this.disableExtension || !this.extension) {
                return;
            }
            const extensionSubscription = this.extension.states().subscribe({
                next: (extensionStates) => {
                    if (extensionStates.type === extension_router_1.ExtensionRouterStatus.WALLET_CONNECTED &&
                        terra_js_1.AccAddress.validate(extensionStates.wallet.terraAddress)) {
                        this.updateStates({
                            status: use_wallet_1.WalletStatus.WALLET_CONNECTED,
                            network: extensionStates.network,
                            wallets: [
                                {
                                    connectType: use_wallet_1.ConnectType.EXTENSION,
                                    terraAddress: extensionStates.wallet.terraAddress,
                                    design: extensionStates.wallet.design,
                                },
                            ],
                            supportFeatures: extensionStates.supportFeatures,
                        });
                    }
                    else {
                        this.updateStates(this._notConnected);
                    }
                },
            });
            this.disableExtension = () => {
                var _a;
                (_a = this.extension) === null || _a === void 0 ? void 0 : _a.disconnect();
                extensionSubscription.unsubscribe();
                this.disableExtension = null;
            };
        };
        this.enableWalletConnect = (walletConnect) => {
            var _a, _b;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableExtension) === null || _b === void 0 ? void 0 : _b.call(this);
            if (this.walletConnect === walletConnect) {
                return;
            }
            if (this.walletConnect) {
                this.walletConnect.disconnect();
            }
            this.walletConnect = walletConnect;
            const subscribeWalletConnect = (wc) => {
                return wc.session().subscribe({
                    next: (status) => {
                        var _a;
                        switch (status.status) {
                            case walletconnect_1.WalletConnectSessionStatus.CONNECTED:
                                this.updateStates({
                                    status: use_wallet_1.WalletStatus.WALLET_CONNECTED,
                                    network: (_a = this.options.walletConnectChainIds[status.chainId]) !== null && _a !== void 0 ? _a : this.options.defaultNetwork,
                                    wallets: [
                                        {
                                            connectType: use_wallet_1.ConnectType.WALLETCONNECT,
                                            terraAddress: status.terraAddress,
                                            design: 'walletconnect',
                                        },
                                    ],
                                    supportFeatures: WALLETCONNECT_SUPPORT_FEATURES,
                                });
                                break;
                            default:
                                this.updateStates(this._notConnected);
                                break;
                        }
                    },
                });
            };
            const walletConnectSessionSubscription = subscribeWalletConnect(walletConnect);
            this.disableWalletConnect = () => {
                var _a;
                (_a = this.walletConnect) === null || _a === void 0 ? void 0 : _a.disconnect();
                this.walletConnect = null;
                walletConnectSessionSubscription.unsubscribe();
                this.disableWalletConnect = null;
            };
        };
        this._notConnected = {
            status: use_wallet_1.WalletStatus.WALLET_NOT_CONNECTED,
            network: options.defaultNetwork,
        };
        this._initializing = {
            status: use_wallet_1.WalletStatus.INITIALIZING,
            network: options.defaultNetwork,
        };
        this._availableConnectTypes = new rxjs_1.BehaviorSubject([
            use_wallet_1.ConnectType.READONLY,
            use_wallet_1.ConnectType.WALLETCONNECT,
        ]);
        this._availableInstallTypes = new rxjs_1.BehaviorSubject([]);
        this._states = new rxjs_1.BehaviorSubject(this._initializing);
        let numSessionCheck = 0;
        // wait checking the availability of the chrome extension
        // 0. check if extension wallet session is exists
        (0, checkExtensionReady_1.checkExtensionReady)((_a = options.waitingChromeExtensionInstallCheck) !== null && _a !== void 0 ? _a : DEFAULT_WAITING_CHROME_EXTENSION_INSTALL_CHECK, this.isChromeExtensionCompatibleBrowser()).then((ready) => {
            var _a;
            if (ready) {
                this._availableConnectTypes.next([
                    use_wallet_1.ConnectType.EXTENSION,
                    use_wallet_1.ConnectType.WALLETCONNECT,
                    use_wallet_1.ConnectType.READONLY,
                ]);
                this.extension = new extension_router_1.ExtensionRouter({
                    hostWindow: window,
                    selectExtension: options.selectExtension,
                    dangerously__chromeExtensionCompatibleBrowserCheck: (_a = options.dangerously__chromeExtensionCompatibleBrowserCheck) !== null && _a !== void 0 ? _a : env_1.DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK,
                    defaultNetwork: options.defaultNetwork,
                });
                const subscription = this.extension
                    .states()
                    .pipe((0, operators_1.filter)(({ type }) => type !== extension_router_1.ExtensionRouterStatus.INITIALIZING))
                    .subscribe((extensionStates) => {
                    try {
                        subscription.unsubscribe();
                    }
                    catch (_a) { }
                    if (extensionStates.type === extension_router_1.ExtensionRouterStatus.WALLET_CONNECTED &&
                        !this.disableWalletConnect &&
                        !this.disableReadonlyWallet) {
                        this.enableExtension();
                    }
                    else if (numSessionCheck === 0) {
                        numSessionCheck += 1;
                    }
                    else {
                        this.updateStates(this._notConnected);
                    }
                });
            }
            else {
                if ((0, browser_check_1.isDesktopChrome)(this.isChromeExtensionCompatibleBrowser())) {
                    this._availableInstallTypes.next([use_wallet_1.ConnectType.EXTENSION]);
                }
                if (numSessionCheck === 0) {
                    numSessionCheck += 1;
                }
                else {
                    this.updateStates(this._notConnected);
                }
            }
        });
        // 1. check if readonly wallet session is exists
        const draftReadonlyWallet = (0, readonly_wallet_1.connectIfSessionExists)();
        if (draftReadonlyWallet) {
            this.enableReadonlyWallet(draftReadonlyWallet);
            return;
        }
        // 2. check if walletconnect sesison is exists
        const draftWalletConnect = (0, walletconnect_1.connectIfSessionExists)(options);
        if (draftWalletConnect &&
            draftWalletConnect.getLatestSession().status ===
                walletconnect_1.WalletConnectSessionStatus.CONNECTED) {
            this.enableWalletConnect(draftWalletConnect);
        }
        else if (numSessionCheck === 0) {
            numSessionCheck += 1;
        }
        else {
            this.updateStates(this._notConnected);
        }
    }
}
exports.WalletController = WalletController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9AdGVycmEtbW9uZXkvd2FsbGV0LXByb3ZpZGVyL2NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0ZBRzRDO0FBQzVDLG9EQUsrQjtBQUMvQix3REFTaUM7QUFDakMsc0VBQXdDO0FBQ3hDLCtCQUFpRTtBQUNqRSw4Q0FBNkM7QUFDN0MsK0JBR2U7QUFDZix5RUFHeUM7QUFDekMsNkVBQTBFO0FBQzFFLGlFQUdvQztBQUNwQywwRUFHaUQ7QUFDakQsK0RBTW1DO0FBQ25DLDJEQU1pQztBQUNqQyx5REFBd0Q7QUFDeEQscUVBQWtFO0FBaUZsRSxNQUFNLFdBQVcsR0FBRztJQUNsQixDQUFDLHdCQUFXLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDdEIsSUFBSSxFQUFFLHdCQUFXLENBQUMsUUFBUTtRQUMxQixJQUFJLEVBQUUsaUJBQWlCO1FBQ3ZCLElBQUksRUFBRSw0REFBNEQ7S0FDckQ7SUFDZixDQUFDLHdCQUFXLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDM0IsSUFBSSxFQUFFLHdCQUFXLENBQUMsYUFBYTtRQUMvQixJQUFJLEVBQUUsc0JBQXNCO1FBQzVCLElBQUksRUFBRSw0REFBNEQ7S0FDckQ7Q0FDUCxDQUFDO0FBRVgsTUFBTSw4Q0FBOEMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ2hFLE1BQU0sOEJBQThCLEdBQUcsSUFBSSxHQUFHLENBQTRCO0lBQ3hFLE1BQU07Q0FDUCxDQUFDLENBQUM7QUFDSCxNQUFNLHNCQUFzQixHQUFHLElBQUksR0FBRyxFQUE2QixDQUFDO0FBRXBFLE1BQWEsZ0JBQWdCO0lBZ0IzQixZQUFxQixPQUFnQzs7UUFBaEMsWUFBTyxHQUFQLE9BQU8sQ0FBeUI7UUFmN0MsY0FBUyxHQUEyQixJQUFJLENBQUM7UUFDekMsa0JBQWEsR0FBbUMsSUFBSSxDQUFDO1FBQ3JELG1CQUFj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dXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFRlcnJhV2ViRXh0ZW5zaW9uRmVhdHVyZXMsXG4gIFdlYkV4dGVuc2lvblR4U3RhdHVzLFxufSBmcm9tICdAdGVycmEtZGV2L3dlYi1leHRlbnNpb24taW50ZXJmYWNlJztcbmltcG9ydCB7XG4gIEFjY0FkZHJlc3MsXG4gIENyZWF0ZVR4T3B0aW9ucyxcbiAgUHVibGljS2V5LFxuICBUeCxcbn0gZnJvbSAnQHRlcnJhLW1vbmV5L3RlcnJhLmpzJztcbmltcG9ydCB7XG4gIENvbm5lY3Rpb24sXG4gIENvbm5lY3RUeXBlLFxuICBOZXR3b3JrSW5mbyxcbiAgU2lnbkJ5dGVzUmVzdWx0LFxuICBTaWduUmVzdWx0LFxuICBUeFJlc3VsdCxcbiAgV2FsbGV0U3RhdGVzLFxuICBXYWxsZXRTdGF0dXMsXG59IGZyb20gJ0B0ZXJyYS1tb25leS91c2Utd2FsbGV0JztcbmltcG9ydCBkZWVwRXF1YWwgZnJvbSAnZmFzdC1kZWVwLWVxdWFsJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIENIUk9NRV9FWFRFTlNJT05fSU5TVEFMTF9VUkwsXG4gIERFRkFVTFRfQ0hST01FX0VYVEVOU0lPTl9DT01QQVRJQkxFX0JST1dTRVJfQ0hFQ0ssXG59IGZyb20gJy4vZW52JztcbmltcG9ydCB7XG4gIG1hcEV4dGVuc2lvblNpZ25CeXRlc0Vycm9yLFxuICBtYXBFeHRlbnNpb25UeEVycm9yLFxufSBmcm9tICcuL2V4Y2VwdGlvbi9tYXBFeHRlbnNpb25UeEVycm9yJztcbmltcG9ydCB7IG1hcFdhbGxldENvbm5lY3RFcnJvciB9IGZyb20gJy4vZXhjZXB0aW9uL21hcFdhbGxldENvbm5lY3RFcnJvcic7XG5pbXBvcnQge1xuICBFeHRlbnNpb25Sb3V0ZXIsXG4gIEV4dGVuc2lvblJvdXRlclN0YXR1cyxcbn0gZnJvbSAnLi9tb2R1bGVzL2V4dGVuc2lvbi1yb3V0ZXInO1xuaW1wb3J0IHtcbiAgRXh0ZW5zaW9uSW5mbyxcbiAgZ2V0VGVycmFFeHRlbnNpb25zLFxufSBmcm9tICcuL21vZHVsZXMvZXh0ZW5zaW9uLXJvdXRlci9tdWx0aUNoYW5uZWwnO1xuaW1wb3J0IHtcbiAgY29ubmVjdCBhcyByZUNvbm5lY3QsXG4gIGNvbm5lY3RJZlNlc3Npb25FeGlzdHMgYXMgcmVDb25uZWN0SWZTZXNzaW9uRXhpc3RzLFxuICBSZWFkb25seVdhbGxldENvbnRyb2xsZXIsXG4gIHJlYWRvbmx5V2FsbGV0TW9kYWwsXG4gIFJlYWRvbmx5V2FsbGV0U2Vzc2lvbixcbn0gZnJvbSAnLi9tb2R1bGVzL3JlYWRvbmx5LXdhbGxldCc7XG5pbXBvcnQge1xuICBjb25uZWN0IGFzIHdjQ29ubmVjdCxcbiAgY29ubmVjdElmU2Vzc2lvbkV4aXN0cyBhcyB3Y0Nvbm5lY3RJZlNlc3Npb25FeGlzdHMsXG4gIFdhbGxldENvbm5lY3RDb250cm9sbGVyLFxuICBXYWxsZXRDb25uZWN0Q29udHJvbGxlck9wdGlvbnMsXG4gIFdhbGxldENvbm5lY3RTZXNzaW9uU3RhdHVzLFxufSBmcm9tICcuL21vZHVsZXMvd2FsbGV0Y29ubmVjdCc7XG5pbXBvcnQgeyBpc0Rlc2t0b3BDaHJvbWUgfSBmcm9tICcuL3V0aWxzL2Jyb3dzZXItY2hlY2snO1xuaW1wb3J0IHsgY2hlY2tFeHRlbnNpb25SZWFkeSB9IGZyb20gJy4vdXRpbHMvY2hlY2tFeHRlbnNpb25SZWFkeSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2FsbGV0Q29udHJvbGxlck9wdGlvbnNcbiAgZXh0ZW5kcyBXYWxsZXRDb25uZWN0Q29udHJvbGxlck9wdGlvbnMge1xuICAvKipcbiAgICog4pqg77iPIERvbid0IGhhcmRjb2RpbmcgdGhpcywgdXNlIGdldENoYWluIE9wdGlvbnMoKVxuICAgKlxuICAgKiBmYWxsYmFjayBuZXR3b3JrIGlmIGNvbnRyb2xsZXIgaXMgbm90IGNvbm5lY3RlZFxuICAgKi9cbiAgZGVmYXVsdE5ldHdvcms6IE5ldHdvcmtJbmZvO1xuXG4gIC8qKlxuICAgKiDimqDvuI8gRG9uJ3QgaGFyZGNvZGluZyB0aGlzLCB1c2UgZ2V0Q2hhaW4gT3B0aW9ucygpXG4gICAqXG4gICAqIGZvciB3YWxsZXRjb25uZWN0XG4gICAqXG4gICAqIFRoZSBuZXR3b3JrIHJ1bGVzIHBhc3NlZCBieSB0aGUgVGVycmEgU3RhdGlvbiBNb2JpbGUgYXJlIDAgaXMgdGVzdG5ldCwgMSBpcyBtYWlubmV0LlxuICAgKlxuICAgKiBBbHdheXMgc2V0IHRlc3RuZXQgZm9yIDAgYW5kIG1haW5uZXQgZm9yIDEuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYFxuICAgKiBjb25zdCBtYWlubmV0OiBOZXR3b3JrSW5mbyA9IHtcbiAgICogIG5hbWU6ICdtYWlubmV0JyxcbiAgICogIGNoYWluSUQ6ICdjb2x1bWJ1cy01JyxcbiAgICogIGxjZDogJ2h0dHBzOi8vbGNkLnRlcnJhLmRldicsXG4gICAqIH1cbiAgICpcbiAgICogY29uc3QgdGVzdG5ldDogTmV0d29ya0luZm8gPSB7XG4gICAqICBuYW1lOiAndGVzdG5ldCcsXG4gICAqICBjaGFpbklEOiAnYm9tYmF5LTEyJyxcbiAgICogIGxjZDogJ2h0dHBzOi8vYm9tYmF5LWxjZC50ZXJyYS5kZXYnLFxuICAgKiB9XG4gICAqXG4gICAqIGNvbnN0IHdhbGxldENvbm5lY3RDaGFpbklkczogUmVjb3JkPG51bWJlciwgTmV0d29ya0luZm8+ID0ge1xuICAgKiAgIDA6IHRlc3RuZXQsXG4gICAqICAgMTogbWFpbm5ldCxcbiAgICogfVxuICAgKlxuICAgKiA8V2FsbGV0UHJvdmlkZXIgd2FsbGV0Q29ubmVjdENoYWluSWRzPXt3YWxsZXRDb25uZWN0Q2hhaW5JZHN9PlxuICAgKiBgYGBcbiAgICovXG4gIHdhbGxldENvbm5lY3RDaGFpbklkczogUmVjb3JkPG51bWJlciwgTmV0d29ya0luZm8+O1xuXG4gIC8qKlxuICAgKiBydW4gYXQgZXhlY3V0aW5nIHRoZSBgY29ubmVjdChDb25uZWN0VHlwZS5SRUFET05MWSlgXG4gICAqL1xuICBjcmVhdGVSZWFkb25seVdhbGxldFNlc3Npb24/OiAoXG4gICAgbmV0d29ya3M6IE5ldHdvcmtJbmZvW10sXG4gICkgPT4gUHJvbWlzZTxSZWFkb25seVdhbGxldFNlc3Npb24gfCBudWxsPjtcblxuICAvKipcbiAgICogcnVuIGF0IGV4ZWN1dGluZyB0aGUgYGNvbm5lY3QoQ29ubmVjdFR5cGUuRVhURU5TSU9OKWBcbiAgICogaWYgdXNlciBpbnN0YWxsZWQgbXVsdGlwbGUgd2FsbGV0c1xuICAgKi9cbiAgc2VsZWN0RXh0ZW5zaW9uPzogKFxuICAgIGV4dGVuc2lvbkluZm9zOiBFeHRlbnNpb25JbmZvW10sXG4gICkgPT4gUHJvbWlzZTxFeHRlbnNpb25JbmZvIHwgbnVsbD47XG5cbiAgLyoqXG4gICAqIG1pbGxpc2Vjb25kcyB0byB3YWl0IGNoZWNraW5nIGNocm9tZSBleHRlbnNpb24gaXMgaW5zdGFsbGVkXG4gICAqXG4gICAqIEBkZWZhdWx0IDEwMDAgKiAzIG1pbGlzZWNvbmRzXG4gICAqL1xuICB3YWl0aW5nQ2hyb21lRXh0ZW5zaW9uSW5zdGFsbENoZWNrPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiDimqDvuI8gVGhpcyBBUEkgaXMgYW4gb3B0aW9uIGZvciB3YWxsZXQgZGV2ZWxvcGVycy4gUGxlYXNlIGRvbid0IHVzZSBkQXBwIGRldmVsb3BlcnMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYFxuICAgKiA8V2FsbGV0UHJvdmlkZXIgZGFuZ2Vyb3VzbHlfX2Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyQ2hlY2s9eyh1c2VyQWdlbnQ6IHN0cmluZykgPT4ge1xuICAgKiAgIHJldHVybiAvTXlXYWxsZXRcXC8vLnRlc3QodXNlckFnZW50KTtcbiAgICogfX0+XG4gICAqIGBgYFxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlfX2Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyQ2hlY2s/OiAoXG4gICAgdXNlckFnZW50OiBzdHJpbmcsXG4gICkgPT4gYm9vbGVhbjtcbn1cblxuY29uc3QgQ09OTkVDVElPTlMgPSB7XG4gIFtDb25uZWN0VHlwZS5SRUFET05MWV06IHtcbiAgICB0eXBlOiBDb25uZWN0VHlwZS5SRUFET05MWSxcbiAgICBuYW1lOiAnVmlldyBhbiBhZGRyZXNzJyxcbiAgICBpY29uOiAnaHR0cHM6Ly9hc3NldHMudGVycmEubW9uZXkvaWNvbi9zdGF0aW9uLWV4dGVuc2lvbi9pY29uLnBuZycsXG4gIH0gYXMgQ29ubmVjdGlvbixcbiAgW0Nvbm5lY3RUeXBlLldBTExFVENPTk5FQ1RdOiB7XG4gICAgdHlwZTogQ29ubmVjdFR5cGUuV0FMTEVUQ09OTkVDVCxcbiAgICBuYW1lOiAnVGVycmEgU3RhdGlvbiBNb2JpbGUnLFxuICAgIGljb246ICdodHRwczovL2Fzc2V0cy50ZXJyYS5tb25leS9pY29uL3N0YXRpb24tZXh0ZW5zaW9uL2ljb24ucG5nJyxcbiAgfSBhcyBDb25uZWN0aW9uLFxufSBhcyBjb25zdDtcblxuY29uc3QgREVGQVVMVF9XQUlUSU5HX0NIUk9NRV9FWFRFTlNJT05fSU5TVEFMTF9DSEVDSyA9IDEwMDAgKiAzO1xuY29uc3QgV0FMTEVUQ09OTkVDVF9TVVBQT1JUX0ZFQVRVUkVTID0gbmV3IFNldDxUZXJyYVdlYkV4dGVuc2lvbkZlYXR1cmVzPihbXG4gICdwb3N0Jyxcbl0pO1xuY29uc3QgRU1QVFlfU1VQUE9SVF9GRUFUVVJFUyA9IG5ldyBTZXQ8VGVycmFXZWJFeHRlbnNpb25GZWF0dXJlcz4oKTtcblxuZXhwb3J0IGNsYXNzIFdhbGxldENvbnRyb2xsZXIge1xuICBwcml2YXRlIGV4dGVuc2lvbjogRXh0ZW5zaW9uUm91dGVyIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgd2FsbGV0Q29ubmVjdDogV2FsbGV0Q29ubmVjdENvbnRyb2xsZXIgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSByZWFkb25seVdhbGxldDogUmVhZG9ubHlXYWxsZXRDb250cm9sbGVyIHwgbnVsbCA9IG51bGw7XG5cbiAgcHJpdmF0ZSBfYXZhaWxhYmxlQ29ubmVjdFR5cGVzOiBCZWhhdmlvclN1YmplY3Q8Q29ubmVjdFR5cGVbXT47XG4gIHByaXZhdGUgX2F2YWlsYWJsZUluc3RhbGxUeXBlczogQmVoYXZpb3JTdWJqZWN0PENvbm5lY3RUeXBlW10+O1xuICBwcml2YXRlIF9zdGF0ZXM6IEJlaGF2aW9yU3ViamVjdDxXYWxsZXRTdGF0ZXM+O1xuXG4gIHByaXZhdGUgZGlzYWJsZVJlYWRvbmx5V2FsbGV0OiAoKCkgPT4gdm9pZCkgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBkaXNhYmxlRXh0ZW5zaW9uOiAoKCkgPT4gdm9pZCkgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBkaXNhYmxlV2FsbGV0Q29ubmVjdDogKCgpID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfbm90Q29ubmVjdGVkOiBXYWxsZXRTdGF0ZXM7XG4gIHByaXZhdGUgcmVhZG9ubHkgX2luaXRpYWxpemluZzogV2FsbGV0U3RhdGVzO1xuXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IG9wdGlvbnM6IFdhbGxldENvbnRyb2xsZXJPcHRpb25zKSB7XG4gICAgdGhpcy5fbm90Q29ubmVjdGVkID0ge1xuICAgICAgc3RhdHVzOiBXYWxsZXRTdGF0dXMuV0FMTEVUX05PVF9DT05ORUNURUQsXG4gICAgICBuZXR3b3JrOiBvcHRpb25zLmRlZmF1bHROZXR3b3JrLFxuICAgIH07XG5cbiAgICB0aGlzLl9pbml0aWFsaXppbmcgPSB7XG4gICAgICBzdGF0dXM6IFdhbGxldFN0YXR1cy5JTklUSUFMSVpJTkcsXG4gICAgICBuZXR3b3JrOiBvcHRpb25zLmRlZmF1bHROZXR3b3JrLFxuICAgIH07XG5cbiAgICB0aGlzLl9hdmFpbGFibGVDb25uZWN0VHlwZXMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PENvbm5lY3RUeXBlW10+KFtcbiAgICAgIENvbm5lY3RUeXBlLlJFQURPTkxZLFxuICAgICAgQ29ubmVjdFR5cGUuV0FMTEVUQ09OTkVDVCxcbiAgICBdKTtcblxuICAgIHRoaXMuX2F2YWlsYWJsZUluc3RhbGxUeXBlcyA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Q29ubmVjdFR5cGVbXT4oW10pO1xuXG4gICAgdGhpcy5fc3RhdGVzID0gbmV3IEJlaGF2aW9yU3ViamVjdDxXYWxsZXRTdGF0ZXM+KHRoaXMuX2luaXRpYWxpemluZyk7XG5cbiAgICBsZXQgbnVtU2Vzc2lvbkNoZWNrOiBudW1iZXIgPSAwO1xuXG4gICAgLy8gd2FpdCBjaGVja2luZyB0aGUgYXZhaWxhYmlsaXR5IG9mIHRoZSBjaHJvbWUgZXh0ZW5zaW9uXG4gICAgLy8gMC4gY2hlY2sgaWYgZXh0ZW5zaW9uIHdhbGxldCBzZXNzaW9uIGlzIGV4aXN0c1xuICAgIGNoZWNrRXh0ZW5zaW9uUmVhZHkoXG4gICAgICBvcHRpb25zLndhaXRpbmdDaHJvbWVFeHRlbnNpb25JbnN0YWxsQ2hlY2sgPz9cbiAgICAgICAgREVGQVVMVF9XQUlUSU5HX0NIUk9NRV9FWFRFTlNJT05fSU5TVEFMTF9DSEVDSyxcbiAgICAgIHRoaXMuaXNDaHJvbWVFeHRlbnNpb25Db21wYXRpYmxlQnJvd3NlcigpLFxuICAgICkudGhlbigocmVhZHk6IGJvb2xlYW4pID0+IHtcbiAgICAgIGlmIChyZWFkeSkge1xuICAgICAgICB0aGlzLl9hdmFpbGFibGVDb25uZWN0VHlwZXMubmV4dChbXG4gICAgICAgICAgQ29ubmVjdFR5cGUuRVhURU5TSU9OLFxuICAgICAgICAgIENvbm5lY3RUeXBlLldBTExFVENPTk5FQ1QsXG4gICAgICAgICAgQ29ubmVjdFR5cGUuUkVBRE9OTFksXG4gICAgICAgIF0pO1xuXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9uID0gbmV3IEV4dGVuc2lvblJvdXRlcih7XG4gICAgICAgICAgaG9zdFdpbmRvdzogd2luZG93LFxuICAgICAgICAgIHNlbGVjdEV4dGVuc2lvbjogb3B0aW9ucy5zZWxlY3RFeHRlbnNpb24sXG4gICAgICAgICAgZGFuZ2Vyb3VzbHlfX2Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyQ2hlY2s6XG4gICAgICAgICAgICBvcHRpb25zLmRhbmdlcm91c2x5X19jaHJvbWVFeHRlbnNpb25Db21wYXRpYmxlQnJvd3NlckNoZWNrID8/XG4gICAgICAgICAgICBERUZBVUxUX0NIUk9NRV9FWFRFTlNJT05fQ09NUEFUSUJMRV9CUk9XU0VSX0NIRUNLLFxuICAgICAgICAgIGRlZmF1bHROZXR3b3JrOiBvcHRpb25zLmRlZmF1bHROZXR3b3JrLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB0aGlzLmV4dGVuc2lvblxuICAgICAgICAgIC5zdGF0ZXMoKVxuICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgZmlsdGVyKCh7IHR5cGUgfSkgPT4gdHlwZSAhPT0gRXh0ZW5zaW9uUm91dGVyU3RhdHVzLklOSVRJQUxJWklORyksXG4gICAgICAgICAgKVxuICAgICAgICAgIC5zdWJzY3JpYmUoKGV4dGVuc2lvblN0YXRlcykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9IGNhdGNoIHt9XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgZXh0ZW5zaW9uU3RhdGVzLnR5cGUgPT09IEV4dGVuc2lvblJvdXRlclN0YXR1cy5XQUxMRVRfQ09OTkVDVEVEICYmXG4gICAgICAgICAgICAgICF0aGlzLmRpc2FibGVXYWxsZXRDb25uZWN0ICYmXG4gICAgICAgICAgICAgICF0aGlzLmRpc2FibGVSZWFkb25seVdhbGxldFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHRoaXMuZW5hYmxlRXh0ZW5zaW9uKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bVNlc3Npb25DaGVjayA9PT0gMCkge1xuICAgICAgICAgICAgICBudW1TZXNzaW9uQ2hlY2sgKz0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGVzKHRoaXMuX25vdENvbm5lY3RlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNEZXNrdG9wQ2hyb21lKHRoaXMuaXNDaHJvbWVFeHRlbnNpb25Db21wYXRpYmxlQnJvd3NlcigpKSkge1xuICAgICAgICAgIHRoaXMuX2F2YWlsYWJsZUluc3RhbGxUeXBlcy5uZXh0KFtDb25uZWN0VHlwZS5FWFRFTlNJT05dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChudW1TZXNzaW9uQ2hlY2sgPT09IDApIHtcbiAgICAgICAgICBudW1TZXNzaW9uQ2hlY2sgKz0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlcyh0aGlzLl9ub3RDb25uZWN0ZWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyAxLiBjaGVjayBpZiByZWFkb25seSB3YWxsZXQgc2Vzc2lvbiBpcyBleGlzdHNcbiAgICBjb25zdCBkcmFmdFJlYWRvbmx5V2FsbGV0ID0gcmVDb25uZWN0SWZTZXNzaW9uRXhpc3RzKCk7XG5cbiAgICBpZiAoZHJhZnRSZWFkb25seVdhbGxldCkge1xuICAgICAgdGhpcy5lbmFibGVSZWFkb25seVdhbGxldChkcmFmdFJlYWRvbmx5V2FsbGV0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyAyLiBjaGVjayBpZiB3YWxsZXRjb25uZWN0IHNlc2lzb24gaXMgZXhpc3RzXG4gICAgY29uc3QgZHJhZnRXYWxsZXRDb25uZWN0ID0gd2NDb25uZWN0SWZTZXNzaW9uRXhpc3RzKG9wdGlvbnMpO1xuXG4gICAgaWYgKFxuICAgICAgZHJhZnRXYWxsZXRDb25uZWN0ICYmXG4gICAgICBkcmFmdFdhbGxldENvbm5lY3QuZ2V0TGF0ZXN0U2Vzc2lvbigpLnN0YXR1cyA9PT1cbiAgICAgICAgV2FsbGV0Q29ubmVjdFNlc3Npb25TdGF0dXMuQ09OTkVDVEVEXG4gICAgKSB7XG4gICAgICB0aGlzLmVuYWJsZVdhbGxldENvbm5lY3QoZHJhZnRXYWxsZXRDb25uZWN0KTtcbiAgICB9IGVsc2UgaWYgKG51bVNlc3Npb25DaGVjayA9PT0gMCkge1xuICAgICAgbnVtU2Vzc2lvbkNoZWNrICs9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBkYXRlU3RhdGVzKHRoaXMuX25vdENvbm5lY3RlZCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBzZWUgV2FsbGV0I2lzQ2hyb21lRXh0ZW5zaW9uQ29tcGF0aWJsZUJyb3dzZXIgKi9cbiAgaXNDaHJvbWVFeHRlbnNpb25Db21wYXRpYmxlQnJvd3NlciA9ICgpOiBib29sZWFuID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5vcHRpb25zLmRhbmdlcm91c2x5X19jaHJvbWVFeHRlbnNpb25Db21wYXRpYmxlQnJvd3NlckNoZWNrID8/XG4gICAgICBERUZBVUxUX0NIUk9NRV9FWFRFTlNJT05fQ09NUEFUSUJMRV9CUk9XU0VSX0NIRUNLXG4gICAgKShuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgfTtcblxuICAvKiogQHNlZSBXYWxsZXQjYXZhaWxhYmxlQ29ubmVjdFR5cGVzICovXG4gIGF2YWlsYWJsZUNvbm5lY3RUeXBlcyA9ICgpOiBPYnNlcnZhYmxlPENvbm5lY3RUeXBlW10+ID0+IHtcbiAgICByZXR1cm4gdGhpcy5fYXZhaWxhYmxlQ29ubmVjdFR5cGVzLmFzT2JzZXJ2YWJsZSgpO1xuICB9O1xuXG4gIC8qKiBAc2VlIFdhbGxldCNhdmFpbGFibGVDb25uZWN0aW9ucyAqL1xuICBhdmFpbGFibGVDb25uZWN0aW9ucyA9ICgpOiBPYnNlcnZhYmxlPENvbm5lY3Rpb25bXT4gPT4ge1xuICAgIHJldHVybiB0aGlzLl9hdmFpbGFibGVDb25uZWN0VHlwZXMucGlwZShcbiAgICAgIG1hcCgoY29ubmVjdFR5cGVzKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb25zOiBDb25uZWN0aW9uW10gPSBbXTtcblxuICAgICAgICBmb3IgKGNvbnN0IGNvbm5lY3RUeXBlIG9mIGNvbm5lY3RUeXBlcykge1xuICAgICAgICAgIGlmIChjb25uZWN0VHlwZSA9PT0gQ29ubmVjdFR5cGUuRVhURU5TSU9OKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXJyYUV4dGVuc2lvbnMgPSBnZXRUZXJyYUV4dGVuc2lvbnMoKTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCB0ZXJyYUV4dGVuc2lvbiBvZiB0ZXJyYUV4dGVuc2lvbnMpIHtcbiAgICAgICAgICAgICAgY29ubmVjdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogQ29ubmVjdFR5cGUuRVhURU5TSU9OLFxuICAgICAgICAgICAgICAgIGlkZW50aWZpZXI6IHRlcnJhRXh0ZW5zaW9uLmlkZW50aWZpZXIsXG4gICAgICAgICAgICAgICAgbmFtZTogdGVycmFFeHRlbnNpb24ubmFtZSxcbiAgICAgICAgICAgICAgICBpY29uOiB0ZXJyYUV4dGVuc2lvbi5pY29uLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29ubmVjdGlvbnMucHVzaChDT05ORUNUSU9OU1tjb25uZWN0VHlwZV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25uZWN0aW9ucztcbiAgICAgIH0pLFxuICAgICk7XG4gIH07XG5cbiAgLyoqIEBzZWUgV2FsbGV0I2F2YWlsYWJsZUluc3RhbGxUeXBlcyAqL1xuICBhdmFpbGFibGVJbnN0YWxsVHlwZXMgPSAoKTogT2JzZXJ2YWJsZTxDb25uZWN0VHlwZVtdPiA9PiB7XG4gICAgcmV0dXJuIHRoaXMuX2F2YWlsYWJsZUluc3RhbGxUeXBlcy5hc09ic2VydmFibGUoKTtcbiAgfTtcblxuICAvKipcbiAgICogQHNlZSBXYWxsZXQjc3RhdHVzXG4gICAqIEBzZWUgV2FsbGV0I25ldHdvcmtcbiAgICogQHNlZSBXYWxsZXQjd2FsbGV0c1xuICAgKi9cbiAgc3RhdGVzID0gKCk6IE9ic2VydmFibGU8V2FsbGV0U3RhdGVzPiA9PiB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlcy5hc09ic2VydmFibGUoKTtcbiAgfTtcblxuICAvKiogQHNlZSBXYWxsZXQjcmVjaGVja1N0YXR1cyAqL1xuICByZWZldGNoU3RhdGVzID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLmRpc2FibGVFeHRlbnNpb24pIHtcbiAgICAgIHRoaXMuZXh0ZW5zaW9uPy5yZWZldGNoU3RhdGVzKCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKiBAc2VlIFdhbGxldCNpbnN0YWxsICovXG4gIGluc3RhbGwgPSAodHlwZTogQ29ubmVjdFR5cGUpID0+IHtcbiAgICBpZiAodHlwZSA9PT0gQ29ubmVjdFR5cGUuRVhURU5TSU9OKSB7XG4gICAgICAvLyBUT0RPIHNlcGFyYXRlIGluc3RhbGwgbGlua3MgYnkgYnJvd3NlciB0eXBlc1xuICAgICAgd2luZG93Lm9wZW4oQ0hST01FX0VYVEVOU0lPTl9JTlNUQUxMX1VSTCwgJ19ibGFuaycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBbV2FsbGV0Q29udHJvbGxlcl0gQ29ubmVjdFR5cGUgXCIke3R5cGV9XCIgZG9lcyBub3Qgc3VwcG9ydCBpbnN0YWxsKCkgZnVuY3Rpb25gLFxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqIEBzZWUgV2FsbGV0I2Nvbm5lY3QgKi9cbiAgY29ubmVjdCA9ICh0eXBlOiBDb25uZWN0VHlwZSwgaWRlbnRpZmllcj86IHN0cmluZykgPT4ge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBDb25uZWN0VHlwZS5SRUFET05MWTpcbiAgICAgICAgY29uc3QgbmV0d29ya3M6IE5ldHdvcmtJbmZvW10gPSBPYmplY3Qua2V5cyhcbiAgICAgICAgICB0aGlzLm9wdGlvbnMud2FsbGV0Q29ubmVjdENoYWluSWRzLFxuICAgICAgICApLm1hcCgoY2hhaW5JZCkgPT4gdGhpcy5vcHRpb25zLndhbGxldENvbm5lY3RDaGFpbklkc1srY2hhaW5JZF0pO1xuXG4gICAgICAgIGNvbnN0IGNyZWF0ZVJlYWRvbmx5V2FsbGV0U2Vzc2lvbiA9XG4gICAgICAgICAgdGhpcy5vcHRpb25zLmNyZWF0ZVJlYWRvbmx5V2FsbGV0U2Vzc2lvbj8uKG5ldHdvcmtzKSA/P1xuICAgICAgICAgIHJlYWRvbmx5V2FsbGV0TW9kYWwoeyBuZXR3b3JrcyB9KTtcblxuICAgICAgICBjcmVhdGVSZWFkb25seVdhbGxldFNlc3Npb24udGhlbigocmVhZG9ubHlXYWxsZXRTZXNzaW9uKSA9PiB7XG4gICAgICAgICAgaWYgKHJlYWRvbmx5V2FsbGV0U2Vzc2lvbikge1xuICAgICAgICAgICAgdGhpcy5lbmFibGVSZWFkb25seVdhbGxldChyZUNvbm5lY3QocmVhZG9ubHlXYWxsZXRTZXNzaW9uKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENvbm5lY3RUeXBlLldBTExFVENPTk5FQ1Q6XG4gICAgICAgIHRoaXMuZW5hYmxlV2FsbGV0Q29ubmVjdCh3Y0Nvbm5lY3QodGhpcy5vcHRpb25zKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDb25uZWN0VHlwZS5FWFRFTlNJT046XG4gICAgICAgIGlmICghdGhpcy5leHRlbnNpb24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGV4dGVuc2lvbiBpbnN0YW5jZSBpcyBub3QgY3JlYXRlZCFgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmV4dGVuc2lvbi5jb25uZWN0KGlkZW50aWZpZXIpO1xuICAgICAgICB0aGlzLmVuYWJsZUV4dGVuc2lvbigpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBDb25uZWN0VHlwZSFgKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqIEBzZWUgV2FsbGV0I2Nvbm5lY3RSZWFkb25seSAqL1xuICBjb25uZWN0UmVhZG9ubHkgPSAodGVycmFBZGRyZXNzOiBzdHJpbmcsIG5ldHdvcms6IE5ldHdvcmtJbmZvKSA9PiB7XG4gICAgdGhpcy5lbmFibGVSZWFkb25seVdhbGxldChcbiAgICAgIHJlQ29ubmVjdCh7XG4gICAgICAgIHRlcnJhQWRkcmVzcyxcbiAgICAgICAgbmV0d29yayxcbiAgICAgIH0pLFxuICAgICk7XG4gIH07XG5cbiAgLyoqIEBzZWUgV2FsbGV0I2Rpc2Nvbm5lY3QgKi9cbiAgZGlzY29ubmVjdCA9ICgpID0+IHtcbiAgICB0aGlzLmRpc2FibGVSZWFkb25seVdhbGxldD8uKCk7XG4gICAgdGhpcy5kaXNhYmxlUmVhZG9ubHlXYWxsZXQgPSBudWxsO1xuXG4gICAgdGhpcy5kaXNhYmxlRXh0ZW5zaW9uPy4oKTtcbiAgICB0aGlzLmRpc2FibGVFeHRlbnNpb24gPSBudWxsO1xuXG4gICAgdGhpcy5kaXNhYmxlV2FsbGV0Q29ubmVjdD8uKCk7XG4gICAgdGhpcy5kaXNhYmxlV2FsbGV0Q29ubmVjdCA9IG51bGw7XG5cbiAgICB0aGlzLnVwZGF0ZVN0YXRlcyh0aGlzLl9ub3RDb25uZWN0ZWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc2VlIFdhbGxldCNwb3N0XG4gICAqIEBwYXJhbSB0eFxuICAgKiBAcGFyYW0gdGVycmFBZGRyZXNzIG9ubHkgYXZhaWxhYmxlIG5ldyBleHRlbnNpb25cbiAgICovXG4gIHBvc3QgPSBhc3luYyAoXG4gICAgdHg6IENyZWF0ZVR4T3B0aW9ucyxcbiAgICB0ZXJyYUFkZHJlc3M/OiBzdHJpbmcsXG4gICk6IFByb21pc2U8VHhSZXN1bHQ+ID0+IHtcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBleHRlbnNpb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBpZiAodGhpcy5kaXNhYmxlRXh0ZW5zaW9uKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8VHhSZXN1bHQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLmV4dGVuc2lvbikge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYGV4dGVuc2lvbiBpbnN0YW5jZSBub3QgY3JlYXRlZCFgKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gdGhpcy5leHRlbnNpb24ucG9zdCh0eCwgdGVycmFBZGRyZXNzKS5zdWJzY3JpYmUoe1xuICAgICAgICAgIG5leHQ6ICh0eFJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHR4UmVzdWx0LnN0YXR1cyA9PT0gV2ViRXh0ZW5zaW9uVHhTdGF0dXMuU1VDQ0VFRCkge1xuICAgICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAuLi50eCxcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHR4UmVzdWx0LnBheWxvYWQsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IChlcnJvcikgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KG1hcEV4dGVuc2lvblR4RXJyb3IodHgsIGVycm9yKSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyB3YWxsZXQgY29ubmVjdFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGVsc2UgaWYgKHRoaXMud2FsbGV0Q29ubmVjdCkge1xuICAgICAgcmV0dXJuIHRoaXMud2FsbGV0Q29ubmVjdFxuICAgICAgICAucG9zdCh0eClcbiAgICAgICAgLnRoZW4oXG4gICAgICAgICAgKHJlc3VsdCkgPT5cbiAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgIC4uLnR4LFxuICAgICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICB9IGFzIFR4UmVzdWx0KSxcbiAgICAgICAgKVxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgdGhyb3cgbWFwV2FsbGV0Q29ubmVjdEVycm9yKHR4LCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIGFyZSBubyBjb25uZWN0aW9ucyB0aGF0IGNhbiBiZSBwb3N0aW5nIHR4IWApO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHNlZSBXYWxsZXQjc2lnblxuICAgKiBAcGFyYW0gdHhcbiAgICogQHBhcmFtIHRlcnJhQWRkcmVzcyBvbmx5IGF2YWlsYWJsZSBuZXcgZXh0ZW5zaW9uXG4gICAqL1xuICBzaWduID0gYXN5bmMgKFxuICAgIHR4OiBDcmVhdGVUeE9wdGlvbnMsXG4gICAgdGVycmFBZGRyZXNzPzogc3RyaW5nLFxuICApOiBQcm9taXNlPFNpZ25SZXN1bHQ+ID0+IHtcbiAgICBpZiAodGhpcy5kaXNhYmxlRXh0ZW5zaW9uKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8U2lnblJlc3VsdD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuZXh0ZW5zaW9uKSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgZXh0ZW5zaW9uIGluc3RhbmNlIGlzIG5vdCBjcmVhdGVkIWApKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB0aGlzLmV4dGVuc2lvbi5zaWduKHR4LCB0ZXJyYUFkZHJlc3MpLnN1YnNjcmliZSh7XG4gICAgICAgICAgbmV4dDogKHR4UmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAodHhSZXN1bHQuc3RhdHVzID09PSBXZWJFeHRlbnNpb25UeFN0YXR1cy5TVUNDRUVEKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIC4uLnR4LFxuICAgICAgICAgICAgICAgIHJlc3VsdDogVHguZnJvbURhdGEodHhSZXN1bHQucGF5bG9hZCksXG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IChlcnJvcikgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KG1hcEV4dGVuc2lvblR4RXJyb3IodHgsIGVycm9yKSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihgc2lnbigpIG1ldGhvZCBvbmx5IGF2YWlsYWJsZSBvbiBleHRlbnNpb25gKTtcbiAgfTtcblxuICAvKipcbiAgICogQHNlZSBXYWxsZXQjc2lnbkJ5dGVzXG4gICAqIEBwYXJhbSBieXRlc1xuICAgKiBAcGFyYW0gdGVycmFBZGRyZXNzIG9ubHkgYXZhaWxhYmxlIG5ldyBleHRlbnNpb25cbiAgICovXG4gIHNpZ25CeXRlcyA9IGFzeW5jIChcbiAgICBieXRlczogQnVmZmVyLFxuICAgIHRlcnJhQWRkcmVzcz86IHN0cmluZyxcbiAgKTogUHJvbWlzZTxTaWduQnl0ZXNSZXN1bHQ+ID0+IHtcbiAgICBpZiAodGhpcy5kaXNhYmxlRXh0ZW5zaW9uKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8U2lnbkJ5dGVzUmVzdWx0PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5leHRlbnNpb24pIHtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBleHRlbnNpb24gaW5zdGFuY2UgaXMgbm90IGNyZWF0ZWQhYCkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMuZXh0ZW5zaW9uXG4gICAgICAgICAgLnNpZ25CeXRlcyhieXRlcywgdGVycmFBZGRyZXNzKVxuICAgICAgICAgIC5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgbmV4dDogKHR4UmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgIGlmICh0eFJlc3VsdC5zdGF0dXMgPT09IFdlYkV4dGVuc2lvblR4U3RhdHVzLlNVQ0NFRUQpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgICAgICAgICByZWNpZDogdHhSZXN1bHQucGF5bG9hZC5yZWNpZCxcbiAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlOiBVaW50OEFycmF5LmZyb20oXG4gICAgICAgICAgICAgICAgICAgICAgQnVmZmVyLmZyb20odHhSZXN1bHQucGF5bG9hZC5zaWduYXR1cmUsICdiYXNlNjQnKSxcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgcHVibGljX2tleTogdHhSZXN1bHQucGF5bG9hZC5wdWJsaWNfa2V5XG4gICAgICAgICAgICAgICAgICAgICAgPyBQdWJsaWNLZXkuZnJvbURhdGEodHhSZXN1bHQucGF5bG9hZC5wdWJsaWNfa2V5KVxuICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgIHJlamVjdChtYXBFeHRlbnNpb25TaWduQnl0ZXNFcnJvcihieXRlcywgZXJyb3IpKTtcbiAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKGBzaWduQnl0ZXMoKSBtZXRob2Qgb25seSBhdmFpbGFibGUgb24gZXh0ZW5zaW9uYCk7XG4gICAgLy8gVE9ETyBpbXBsZW1lbnRzIHNpZ25CeXRlcygpIHRvIG90aGVyIGNvbm5lY3QgdHlwZXNcbiAgfTtcblxuICAvKipcbiAgICogQHNlZSBXYWxsZXQjaGFzQ1cyMFRva2Vuc1xuICAgKiBAcGFyYW0gY2hhaW5JRFxuICAgKiBAcGFyYW0gdG9rZW5BZGRycyBUb2tlbiBhZGRyZXNzZXNcbiAgICovXG4gIGhhc0NXMjBUb2tlbnMgPSBhc3luYyAoXG4gICAgY2hhaW5JRDogc3RyaW5nLFxuICAgIC4uLnRva2VuQWRkcnM6IHN0cmluZ1tdXG4gICk6IFByb21pc2U8eyBbdG9rZW5BZGRyOiBzdHJpbmddOiBib29sZWFuIH0+ID0+IHtcbiAgICBpZiAodGhpcy5hdmFpbGFibGVFeHRlbnNpb25GZWF0dXJlKCdjdzIwLXRva2VuJykpIHtcbiAgICAgIHJldHVybiB0aGlzLmV4dGVuc2lvbiEuaGFzQ1cyMFRva2VucyhjaGFpbklELCAuLi50b2tlbkFkZHJzKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYERvZXMgbm90IHN1cHBvcnQgaGFzQ1cyMFRva2VucygpIG9uIHRoaXMgY29ubmVjdGlvbmApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc2VlIFdhbGxldCNhZGRDVzIwVG9rZW5zXG4gICAqIEBwYXJhbSBjaGFpbklEXG4gICAqIEBwYXJhbSB0b2tlbkFkZHJzIFRva2VuIGFkZHJlc3Nlc1xuICAgKi9cbiAgYWRkQ1cyMFRva2VucyA9IGFzeW5jIChcbiAgICBjaGFpbklEOiBzdHJpbmcsXG4gICAgLi4udG9rZW5BZGRyczogc3RyaW5nW11cbiAgKTogUHJvbWlzZTx7IFt0b2tlbkFkZHI6IHN0cmluZ106IGJvb2xlYW4gfT4gPT4ge1xuICAgIGlmICh0aGlzLmF2YWlsYWJsZUV4dGVuc2lvbkZlYXR1cmUoJ2N3MjAtdG9rZW4nKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uIS5hZGRDVzIwVG9rZW5zKGNoYWluSUQsIC4uLnRva2VuQWRkcnMpO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihgRG9lcyBub3Qgc3VwcG9ydCBhZGRDVzIwVG9rZW5zKCkgb24gdGhpcyBjb25uZWN0aW9uYCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzZWUgV2FsbGV0I2hhc05ldHdvcmtcbiAgICogQHBhcmFtIG5ldHdvcmtcbiAgICovXG4gIGhhc05ldHdvcmsgPSAobmV0d29yazogT21pdDxOZXR3b3JrSW5mbywgJ25hbWUnPik6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGlmICh0aGlzLmF2YWlsYWJsZUV4dGVuc2lvbkZlYXR1cmUoJ25ldHdvcmsnKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uIS5oYXNOZXR3b3JrKG5ldHdvcmspO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihgRG9lcyBub3Qgc3VwcG9ydCBoYXNOZXR3b3JrKCkgb24gdGhpcyBjb25uZWN0aW9uYCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzZWUgV2FsbGV0I2hhc05ldHdvcmtcbiAgICogQHBhcmFtIG5ldHdvcmtcbiAgICovXG4gIGFkZE5ldHdvcmsgPSAobmV0d29yazogTmV0d29ya0luZm8pOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBpZiAodGhpcy5hdmFpbGFibGVFeHRlbnNpb25GZWF0dXJlKCduZXR3b3JrJykpIHtcbiAgICAgIHJldHVybiB0aGlzLmV4dGVuc2lvbiEuYWRkTmV0d29yayhuZXR3b3JrKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYERvZXMgbm90IHN1cHBvcnQgYWRkTmV0d29yaygpIG9uIHRoaXMgY29ubmVjdGlvbmApO1xuICB9O1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gaW50ZXJuYWxcbiAgLy8gY29ubmVjdCB0eXBlIGNoYW5naW5nXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgcHJpdmF0ZSBhdmFpbGFibGVFeHRlbnNpb25GZWF0dXJlID0gKGZlYXR1cmU6IFRlcnJhV2ViRXh0ZW5zaW9uRmVhdHVyZXMpID0+IHtcbiAgICBpZiAodGhpcy5kaXNhYmxlRXh0ZW5zaW9uICYmIHRoaXMuZXh0ZW5zaW9uKSB7XG4gICAgICBjb25zdCBzdGF0ZXMgPSB0aGlzLmV4dGVuc2lvbi5nZXRMYXN0U3RhdGVzKCk7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIHN0YXRlcy50eXBlID09PSBFeHRlbnNpb25Sb3V0ZXJTdGF0dXMuV0FMTEVUX0NPTk5FQ1RFRCAmJlxuICAgICAgICBzdGF0ZXMuc3VwcG9ydEZlYXR1cmVzLmhhcyhmZWF0dXJlKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSB1cGRhdGVTdGF0ZXMgPSAobmV4dDogV2FsbGV0U3RhdGVzKSA9PiB7XG4gICAgY29uc3QgcHJldiA9IHRoaXMuX3N0YXRlcy5nZXRWYWx1ZSgpO1xuXG4gICAgaWYgKFxuICAgICAgbmV4dC5zdGF0dXMgPT09IFdhbGxldFN0YXR1cy5XQUxMRVRfQ09OTkVDVEVEICYmXG4gICAgICBuZXh0LndhbGxldHMubGVuZ3RoID09PSAwXG4gICAgKSB7XG4gICAgICBuZXh0ID0ge1xuICAgICAgICBzdGF0dXM6IFdhbGxldFN0YXR1cy5XQUxMRVRfTk9UX0NPTk5FQ1RFRCxcbiAgICAgICAgbmV0d29yazogbmV4dC5uZXR3b3JrLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAocHJldi5zdGF0dXMgIT09IG5leHQuc3RhdHVzIHx8ICFkZWVwRXF1YWwocHJldiwgbmV4dCkpIHtcbiAgICAgIHRoaXMuX3N0YXRlcy5uZXh0KG5leHQpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIGVuYWJsZVJlYWRvbmx5V2FsbGV0ID0gKHJlYWRvbmx5V2FsbGV0OiBSZWFkb25seVdhbGxldENvbnRyb2xsZXIpID0+IHtcbiAgICB0aGlzLmRpc2FibGVXYWxsZXRDb25uZWN0Py4oKTtcbiAgICB0aGlzLmRpc2FibGVFeHRlbnNpb24/LigpO1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy5yZWFkb25seVdhbGxldCA9PT0gcmVhZG9ubHlXYWxsZXQgfHxcbiAgICAgICh0aGlzLnJlYWRvbmx5V2FsbGV0Py50ZXJyYUFkZHJlc3MgPT09IHJlYWRvbmx5V2FsbGV0LnRlcnJhQWRkcmVzcyAmJlxuICAgICAgICB0aGlzLnJlYWRvbmx5V2FsbGV0Lm5ldHdvcmsgPT09IHJlYWRvbmx5V2FsbGV0Lm5ldHdvcmspXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVhZG9ubHlXYWxsZXQpIHtcbiAgICAgIHRoaXMucmVhZG9ubHlXYWxsZXQuZGlzY29ubmVjdCgpO1xuICAgIH1cblxuICAgIHRoaXMucmVhZG9ubHlXYWxsZXQgPSByZWFkb25seVdhbGxldDtcblxuICAgIHRoaXMudXBkYXRlU3RhdGVzKHtcbiAgICAgIHN0YXR1czogV2FsbGV0U3RhdHVzLldBTExFVF9DT05ORUNURUQsXG4gICAgICBuZXR3b3JrOiByZWFkb25seVdhbGxldC5uZXR3b3JrLFxuICAgICAgd2FsbGV0czogW1xuICAgICAgICB7XG4gICAgICAgICAgY29ubmVjdFR5cGU6IENvbm5lY3RUeXBlLlJFQURPTkxZLFxuICAgICAgICAgIHRlcnJhQWRkcmVzczogcmVhZG9ubHlXYWxsZXQudGVycmFBZGRyZXNzLFxuICAgICAgICAgIGRlc2lnbjogJ3JlYWRvbmx5JyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBzdXBwb3J0RmVhdHVyZXM6IEVNUFRZX1NVUFBPUlRfRkVBVFVSRVMsXG4gICAgfSk7XG5cbiAgICB0aGlzLmRpc2FibGVSZWFkb25seVdhbGxldCA9ICgpID0+IHtcbiAgICAgIHJlYWRvbmx5V2FsbGV0LmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRoaXMucmVhZG9ubHlXYWxsZXQgPSBudWxsO1xuICAgICAgdGhpcy5kaXNhYmxlUmVhZG9ubHlXYWxsZXQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgcHJpdmF0ZSBlbmFibGVFeHRlbnNpb24gPSAoKSA9PiB7XG4gICAgdGhpcy5kaXNhYmxlUmVhZG9ubHlXYWxsZXQ/LigpO1xuICAgIHRoaXMuZGlzYWJsZVdhbGxldENvbm5lY3Q/LigpO1xuXG4gICAgaWYgKHRoaXMuZGlzYWJsZUV4dGVuc2lvbiB8fCAhdGhpcy5leHRlbnNpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBleHRlbnNpb25TdWJzY3JpcHRpb24gPSB0aGlzLmV4dGVuc2lvbi5zdGF0ZXMoKS5zdWJzY3JpYmUoe1xuICAgICAgbmV4dDogKGV4dGVuc2lvblN0YXRlcykgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZXh0ZW5zaW9uU3RhdGVzLnR5cGUgPT09IEV4dGVuc2lvblJvdXRlclN0YXR1cy5XQUxMRVRfQ09OTkVDVEVEICYmXG4gICAgICAgICAgQWNjQWRkcmVzcy52YWxpZGF0ZShleHRlbnNpb25TdGF0ZXMud2FsbGV0LnRlcnJhQWRkcmVzcylcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZXMoe1xuICAgICAgICAgICAgc3RhdHVzOiBXYWxsZXRTdGF0dXMuV0FMTEVUX0NPTk5FQ1RFRCxcbiAgICAgICAgICAgIG5ldHdvcms6IGV4dGVuc2lvblN0YXRlcy5uZXR3b3JrLFxuICAgICAgICAgICAgd2FsbGV0czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29ubmVjdFR5cGU6IENvbm5lY3RUeXBlLkVYVEVOU0lPTixcbiAgICAgICAgICAgICAgICB0ZXJyYUFkZHJlc3M6IGV4dGVuc2lvblN0YXRlcy53YWxsZXQudGVycmFBZGRyZXNzLFxuICAgICAgICAgICAgICAgIGRlc2lnbjogZXh0ZW5zaW9uU3RhdGVzLndhbGxldC5kZXNpZ24sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgc3VwcG9ydEZlYXR1cmVzOiBleHRlbnNpb25TdGF0ZXMuc3VwcG9ydEZlYXR1cmVzLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGVzKHRoaXMuX25vdENvbm5lY3RlZCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLmRpc2FibGVFeHRlbnNpb24gPSAoKSA9PiB7XG4gICAgICB0aGlzLmV4dGVuc2lvbj8uZGlzY29ubmVjdCgpO1xuICAgICAgZXh0ZW5zaW9uU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLmRpc2FibGVFeHRlbnNpb24gPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgcHJpdmF0ZSBlbmFibGVXYWxsZXRDb25uZWN0ID0gKHdhbGxldENvbm5lY3Q6IFdhbGxldENvbm5lY3RDb250cm9sbGVyKSA9PiB7XG4gICAgdGhpcy5kaXNhYmxlUmVhZG9ubHlXYWxsZXQ/LigpO1xuICAgIHRoaXMuZGlzYWJsZUV4dGVuc2lvbj8uKCk7XG5cbiAgICBpZiAodGhpcy53YWxsZXRDb25uZWN0ID09PSB3YWxsZXRDb25uZWN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMud2FsbGV0Q29ubmVjdCkge1xuICAgICAgdGhpcy53YWxsZXRDb25uZWN0LmRpc2Nvbm5lY3QoKTtcbiAgICB9XG5cbiAgICB0aGlzLndhbGxldENvbm5lY3QgPSB3YWxsZXRDb25uZWN0O1xuXG4gICAgY29uc3Qgc3Vic2NyaWJlV2FsbGV0Q29ubmVjdCA9IChcbiAgICAgIHdjOiBXYWxsZXRDb25uZWN0Q29udHJvbGxlcixcbiAgICApOiBTdWJzY3JpcHRpb24gPT4ge1xuICAgICAgcmV0dXJuIHdjLnNlc3Npb24oKS5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiAoc3RhdHVzKSA9PiB7XG4gICAgICAgICAgc3dpdGNoIChzdGF0dXMuc3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIFdhbGxldENvbm5lY3RTZXNzaW9uU3RhdHVzLkNPTk5FQ1RFRDpcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZXMoe1xuICAgICAgICAgICAgICAgIHN0YXR1czogV2FsbGV0U3RhdHVzLldBTExFVF9DT05ORUNURUQsXG4gICAgICAgICAgICAgICAgbmV0d29yazpcbiAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy53YWxsZXRDb25uZWN0Q2hhaW5JZHNbc3RhdHVzLmNoYWluSWRdID8/XG4gICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuZGVmYXVsdE5ldHdvcmssXG4gICAgICAgICAgICAgICAgd2FsbGV0czogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0VHlwZTogQ29ubmVjdFR5cGUuV0FMTEVUQ09OTkVDVCxcbiAgICAgICAgICAgICAgICAgICAgdGVycmFBZGRyZXNzOiBzdGF0dXMudGVycmFBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICBkZXNpZ246ICd3YWxsZXRjb25uZWN0JyxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBzdXBwb3J0RmVhdHVyZXM6IFdBTExFVENPTk5FQ1RfU1VQUE9SVF9GRUFUVVJFUyxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZXModGhpcy5fbm90Q29ubmVjdGVkKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHdhbGxldENvbm5lY3RTZXNzaW9uU3Vic2NyaXB0aW9uID1cbiAgICAgIHN1YnNjcmliZVdhbGxldENvbm5lY3Qod2FsbGV0Q29ubmVjdCk7XG5cbiAgICB0aGlzLmRpc2FibGVXYWxsZXRDb25uZWN0ID0gKCkgPT4ge1xuICAgICAgdGhpcy53YWxsZXRDb25uZWN0Py5kaXNjb25uZWN0KCk7XG4gICAgICB0aGlzLndhbGxldENvbm5lY3QgPSBudWxsO1xuICAgICAgd2FsbGV0Q29ubmVjdFNlc3Npb25TdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMuZGlzYWJsZVdhbGxldENvbm5lY3QgPSBudWxsO1xuICAgIH07XG4gIH07XG59XG4iXX0=