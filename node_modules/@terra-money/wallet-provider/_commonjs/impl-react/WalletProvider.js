"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const use_wallet_1 = require("@terra-money/use-wallet");
const react_1 = require("react");
const controller_1 = require("../controller");
const EMPTY_ARRAY = [];
const EMPTY_SUPPORT_FEATURES = new Set();
function WalletProvider({ children, defaultNetwork, walletConnectChainIds, connectorOpts, pushServerOpts, createReadonlyWalletSession, selectExtension, waitingChromeExtensionInstallCheck, dangerously__chromeExtensionCompatibleBrowserCheck, }) {
    const [controller] = (0, react_1.useState)(() => new controller_1.WalletController({
        defaultNetwork,
        walletConnectChainIds,
        connectorOpts,
        pushServerOpts,
        createReadonlyWalletSession,
        selectExtension,
        waitingChromeExtensionInstallCheck,
        dangerously__chromeExtensionCompatibleBrowserCheck,
    }));
    const [availableConnectTypes, setAvailableConnectTypes] = (0, react_1.useState)(() => []);
    const [availableInstallTypes, setAvailableInstallTypes] = (0, react_1.useState)(() => []);
    const [availableConnections, setAvailableConnections] = (0, react_1.useState)(() => []);
    const [states, setStates] = (0, react_1.useState)(() => ({
        status: use_wallet_1.WalletStatus.INITIALIZING,
        network: defaultNetwork,
    }));
    (0, react_1.useEffect)(() => {
        const availableConnectTypesSubscription = controller
            .availableConnectTypes()
            .subscribe({
            next: (value) => {
                setAvailableConnectTypes(value);
            },
        });
        const availableInstallTypesSubscription = controller
            .availableInstallTypes()
            .subscribe({
            next: (value) => {
                setAvailableInstallTypes(value);
            },
        });
        const availableConnectionsSubscription = controller
            .availableConnections()
            .subscribe({
            next: (value) => {
                setAvailableConnections(value);
            },
        });
        const statesSubscription = controller.states().subscribe({
            next: (value) => {
                setStates(value);
            },
        });
        return () => {
            availableConnectTypesSubscription.unsubscribe();
            availableInstallTypesSubscription.unsubscribe();
            availableConnectionsSubscription.unsubscribe();
            statesSubscription.unsubscribe();
        };
    }, [controller]);
    const state = (0, react_1.useMemo)(() => {
        return {
            availableConnectTypes,
            availableInstallTypes,
            availableConnections,
            status: states.status,
            network: states.network,
            wallets: states.status === use_wallet_1.WalletStatus.WALLET_CONNECTED
                ? states.wallets
                : EMPTY_ARRAY,
            install: controller.install,
            connect: controller.connect,
            connectReadonly: controller.connectReadonly,
            disconnect: controller.disconnect,
            supportFeatures: states.status === use_wallet_1.WalletStatus.WALLET_CONNECTED
                ? states.supportFeatures
                : EMPTY_SUPPORT_FEATURES,
            post: controller.post,
            sign: controller.sign,
            signBytes: controller.signBytes,
            hasCW20Tokens: controller.hasCW20Tokens,
            addCW20Tokens: controller.addCW20Tokens,
            hasNetwork: controller.hasNetwork,
            addNetwork: controller.addNetwork,
            refetchStates: controller.refetchStates,
            recheckStatus: controller.refetchStates,
            isChromeExtensionCompatibleBrowser: controller.isChromeExtensionCompatibleBrowser,
        };
    }, [
        availableConnectTypes,
        availableInstallTypes,
        availableConnections,
        controller,
        states,
    ]);
    return ((0, jsx_runtime_1.jsx)(use_wallet_1.WalletContext.Provider, Object.assign({ value: state }, { children: children }), void 0));
}
exports.WalletProvider = WalletProvider;
//# sourceMappingURL=data:application/json;base64,