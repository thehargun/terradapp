import { AccAddress } from '@terra-money/terra.js';
import { useMemo } from 'react';
import { WalletStatus, } from './types';
import { useWallet } from './useWallet';
export function useConnectedWallet() {
    const { status, network, wallets, post, sign, signBytes, supportFeatures } = useWallet();
    const value = useMemo(() => {
        try {
            if (status === WalletStatus.WALLET_CONNECTED &&
                wallets.length > 0 &&
                AccAddress.validate(wallets[0].terraAddress)) {
                const { terraAddress, connectType, design } = wallets[0];
                return {
                    network,
                    terraAddress: terraAddress,
                    walletAddress: terraAddress,
                    design,
                    post: (tx) => {
                        return post(tx, terraAddress);
                    },
                    sign: (tx) => {
                        return sign(tx, terraAddress);
                    },
                    signBytes: (bytes) => {
                        return signBytes(bytes, terraAddress);
                    },
                    availablePost: supportFeatures.has('post'),
                    availableSign: supportFeatures.has('sign'),
                    availableSignBytes: supportFeatures.has('sign-bytes'),
                    connectType,
                };
            }
            else {
                return undefined;
            }
        }
        catch (_a) {
            return undefined;
        }
    }, [network, post, sign, signBytes, status, supportFeatures, wallets]);
    return value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlQ29ubmVjdGVkV2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL0B0ZXJyYS1tb25leS91c2Utd2FsbGV0L3VzZUNvbm5lY3RlZFdhbGxldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFtQixNQUFNLHVCQUF1QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDaEMsT0FBTyxFQU1MLFlBQVksR0FDYixNQUFNLFNBQVMsQ0FBQztBQUNqQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBbUJ4QyxNQUFNLFVBQVUsa0JBQWtCO0lBQ2hDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsR0FDeEUsU0FBUyxFQUFFLENBQUM7SUFFZCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQThCLEdBQUcsRUFBRTtRQUN0RCxJQUFJO1lBQ0YsSUFDRSxNQUFNLEtBQUssWUFBWSxDQUFDLGdCQUFnQjtnQkFDeEMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDO2dCQUNsQixVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFDNUM7Z0JBQ0EsTUFBTSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUV6RCxPQUFPO29CQUNMLE9BQU87b0JBQ1AsWUFBWSxFQUFFLFlBQXlCO29CQUN2QyxhQUFhLEVBQUUsWUFBeUI7b0JBQ3hDLE1BQU07b0JBQ04sSUFBSSxFQUFFLENBQUMsRUFBbUIsRUFBRSxFQUFFO3dCQUM1QixPQUFPLElBQUksQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7b0JBQ2hDLENBQUM7b0JBQ0QsSUFBSSxFQUFFLENBQUMsRUFBbUIsRUFBRSxFQUFFO3dCQUM1QixPQUFPLElBQUksQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7b0JBQ2hDLENBQUM7b0JBQ0QsU0FBUyxFQUFFLENBQUMsS0FBYSxFQUFFLEVBQUU7d0JBQzNCLE9BQU8sU0FBUyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztvQkFDeEMsQ0FBQztvQkFDRCxhQUFhLEVBQUUsZUFBZSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7b0JBQzFDLGFBQWEsRUFBRSxlQUFlLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztvQkFDMUMsa0JBQWtCLEVBQUUsZUFBZSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUM7b0JBQ3JELFdBQVc7aUJBQ1osQ0FBQzthQUNIO2lCQUFNO2dCQUNMLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1NBQ0Y7UUFBQyxXQUFNO1lBQ04sT0FBTyxTQUFTLENBQUM7U0FDbEI7SUFDSCxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBRXZFLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjY0FkZHJlc3MsIENyZWF0ZVR4T3B0aW9ucyB9IGZyb20gJ0B0ZXJyYS1tb25leS90ZXJyYS5qcyc7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgQ29ubmVjdFR5cGUsXG4gIE5ldHdvcmtJbmZvLFxuICBTaWduQnl0ZXNSZXN1bHQsXG4gIFNpZ25SZXN1bHQsXG4gIFR4UmVzdWx0LFxuICBXYWxsZXRTdGF0dXMsXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgdXNlV2FsbGV0IH0gZnJvbSAnLi91c2VXYWxsZXQnO1xuXG50eXBlIEh1bWFuQWRkciA9IHN0cmluZyAmIHsgX190eXBlOiAnSHVtYW5BZGRyJyB9O1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbm5lY3RlZFdhbGxldCB7XG4gIG5ldHdvcms6IE5ldHdvcmtJbmZvO1xuICB3YWxsZXRBZGRyZXNzOiBIdW1hbkFkZHI7XG4gIC8qKiB0ZXJyYUFkZHJlc3MgaXMgc2FtZSBhcyB3YWxsZXRBZGRyZXNzICovXG4gIHRlcnJhQWRkcmVzczogSHVtYW5BZGRyO1xuICBkZXNpZ24/OiBzdHJpbmc7XG4gIHBvc3Q6ICh0eDogQ3JlYXRlVHhPcHRpb25zKSA9PiBQcm9taXNlPFR4UmVzdWx0PjtcbiAgc2lnbjogKHR4OiBDcmVhdGVUeE9wdGlvbnMpID0+IFByb21pc2U8U2lnblJlc3VsdD47XG4gIHNpZ25CeXRlczogKGJ5dGVzOiBCdWZmZXIpID0+IFByb21pc2U8U2lnbkJ5dGVzUmVzdWx0PjtcbiAgYXZhaWxhYmxlUG9zdDogYm9vbGVhbjtcbiAgYXZhaWxhYmxlU2lnbjogYm9vbGVhbjtcbiAgYXZhaWxhYmxlU2lnbkJ5dGVzOiBib29sZWFuO1xuICBjb25uZWN0VHlwZTogQ29ubmVjdFR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VDb25uZWN0ZWRXYWxsZXQoKTogQ29ubmVjdGVkV2FsbGV0IHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgeyBzdGF0dXMsIG5ldHdvcmssIHdhbGxldHMsIHBvc3QsIHNpZ24sIHNpZ25CeXRlcywgc3VwcG9ydEZlYXR1cmVzIH0gPVxuICAgIHVzZVdhbGxldCgpO1xuXG4gIGNvbnN0IHZhbHVlID0gdXNlTWVtbzxDb25uZWN0ZWRXYWxsZXQgfCB1bmRlZmluZWQ+KCgpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKFxuICAgICAgICBzdGF0dXMgPT09IFdhbGxldFN0YXR1cy5XQUxMRVRfQ09OTkVDVEVEICYmXG4gICAgICAgIHdhbGxldHMubGVuZ3RoID4gMCAmJlxuICAgICAgICBBY2NBZGRyZXNzLnZhbGlkYXRlKHdhbGxldHNbMF0udGVycmFBZGRyZXNzKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHsgdGVycmFBZGRyZXNzLCBjb25uZWN0VHlwZSwgZGVzaWduIH0gPSB3YWxsZXRzWzBdO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmV0d29yayxcbiAgICAgICAgICB0ZXJyYUFkZHJlc3M6IHRlcnJhQWRkcmVzcyBhcyBIdW1hbkFkZHIsXG4gICAgICAgICAgd2FsbGV0QWRkcmVzczogdGVycmFBZGRyZXNzIGFzIEh1bWFuQWRkcixcbiAgICAgICAgICBkZXNpZ24sXG4gICAgICAgICAgcG9zdDogKHR4OiBDcmVhdGVUeE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwb3N0KHR4LCB0ZXJyYUFkZHJlc3MpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2lnbjogKHR4OiBDcmVhdGVUeE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzaWduKHR4LCB0ZXJyYUFkZHJlc3MpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2lnbkJ5dGVzOiAoYnl0ZXM6IEJ1ZmZlcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHNpZ25CeXRlcyhieXRlcywgdGVycmFBZGRyZXNzKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGF2YWlsYWJsZVBvc3Q6IHN1cHBvcnRGZWF0dXJlcy5oYXMoJ3Bvc3QnKSxcbiAgICAgICAgICBhdmFpbGFibGVTaWduOiBzdXBwb3J0RmVhdHVyZXMuaGFzKCdzaWduJyksXG4gICAgICAgICAgYXZhaWxhYmxlU2lnbkJ5dGVzOiBzdXBwb3J0RmVhdHVyZXMuaGFzKCdzaWduLWJ5dGVzJyksXG4gICAgICAgICAgY29ubmVjdFR5cGUsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sIFtuZXR3b3JrLCBwb3N0LCBzaWduLCBzaWduQnl0ZXMsIHN0YXR1cywgc3VwcG9ydEZlYXR1cmVzLCB3YWxsZXRzXSk7XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuIl19